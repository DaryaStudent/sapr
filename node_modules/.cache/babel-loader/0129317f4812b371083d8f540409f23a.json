{"ast":null,"code":"import { v4 as uuidv4 } from \"uuid\";\nimport { ADD_NEW_ROD, NEW_ROD_AREA_CHANGED, NEW_ROD_LENGTH_CHANGED, NEW_ROD_MODULUS_CHANGED, NEW_ROD_SIGMA_CHANGED, NEW_ROD_DISTLOAD_CHANGED, CHANGE_ROD, CHANGING_ROD_AREA_CHANGED, CHANGING_ROD_LENGTH_CHANGED, CHANGING_ROD_MODULUS_CHANGED, CHANGING_ROD_SIGMA_CHANGED, CHANGING_ROD_DISTLOAD_CHANGED, CHANGING_ROD_SUBMIT, REMOVE_ROD_ROW } from \"./includes/constants\";\nimport { ADD_NODE_ROW, NEW_NODE_NUMBER_CHANGED, NEW_NODE_FORCE_CHANGED, CHANGE_NODE, REMOVE_NODE_ROW, CHANGING_NODE_NUMBER_CHANGED, CHANGING_NODE_FORCE_CHANGED, CHANGING_NODE_SUBMIT } from \"./includes/constants\";\nimport { CHANGE_LEFT_SUPPORT, CHANGE_RIGHT_SUPPORT } from \"./includes/constants\";\nimport { CHECK_FOR_ERROR, SHOW_CONSTRUCTION_FROM_FILE_ERROR, SET_NEW_CONSTRUCTION_FROM_FILE_DATA } from \"./includes/constants\";\nimport { SAVE_SOLUTION, CLEAR_SOLUTION } from \"./includes/constants\";\nimport { SHOW_CANVAS } from \"./includes/constants\";\nconst initialState = {\n  rodsRows: [],\n  nodesRows: [],\n  changingRodIndex: null,\n  changingRodInputRow: {\n    area: \"\",\n    isAreaCorrect: true,\n    length: \"\",\n    isLengthCorrect: true,\n    modulus: \"\",\n    isModulusCorrect: true,\n    sigma: \"\",\n    isSigmaCorrect: true,\n    distLoad: \"\",\n    isDistLoadCorrect: true\n  },\n  newRodInputRow: {\n    area: \"\",\n    isAreaCorrect: true,\n    length: \"\",\n    isLengthCorrect: true,\n    modulus: \"\",\n    isModulusCorrect: true,\n    sigma: \"\",\n    isSigmaCorrect: true,\n    distLoad: \"\",\n    isDistLoadCorrect: true\n  },\n  newNodeInputRow: {\n    nodeNumber: \"\",\n    isNodeNumberCorrect: true,\n    nodeForce: \"\",\n    isNodeForceCorrect: true\n  },\n  changingNodeIndex: null,\n  changingNodeInputRow: {\n    nodeNumber: \"\",\n    isNodeNumberCorrect: true,\n    nodeForce: \"\",\n    isNodeForceCorrect: true\n  },\n  leftSupport: {\n    nodeNumber: null,\n    isChecked: false\n  },\n  rightSupport: {\n    nodeNumber: null,\n    isChecked: false\n  },\n  isError: false,\n  errorMessage: \"Конструкция не введена\",\n  isReadyForSave: false,\n  objWithSolutionFunctions: null,\n  isCanvasShown: false\n};\n\nconst rodsAndNodesReducer = (state = initialState, action) => {\n  let value = action.value;\n  let isCorrect = true;\n\n  switch (action.type) {\n    case NEW_ROD_AREA_CHANGED:\n      if (isNaN(Number(value)) || Number(value) <= 0 && value.length !== 0) {\n        isCorrect = false;\n      }\n\n      return { ...state,\n        newRodInputRow: { ...state.newRodInputRow,\n          area: value,\n          isAreaCorrect: isCorrect\n        }\n      };\n\n    case NEW_ROD_LENGTH_CHANGED:\n      if (isNaN(Number(value)) || Number(value) <= 0 && value.length !== 0) {\n        isCorrect = false;\n      }\n\n      return { ...state,\n        newRodInputRow: { ...state.newRodInputRow,\n          length: value,\n          isLengthCorrect: isCorrect\n        }\n      };\n\n    case NEW_ROD_MODULUS_CHANGED:\n      if (isNaN(Number(value)) || Number(value) <= 0 && value.length !== 0) {\n        isCorrect = false;\n      }\n\n      return { ...state,\n        newRodInputRow: { ...state.newRodInputRow,\n          modulus: value,\n          isModulusCorrect: isCorrect\n        }\n      };\n\n    case NEW_ROD_SIGMA_CHANGED:\n      if (isNaN(Number(value)) || Number(value) <= 0 && value.length !== 0) {\n        isCorrect = false;\n      }\n\n      return { ...state,\n        newRodInputRow: { ...state.newRodInputRow,\n          sigma: value,\n          isSigmaCorrect: isCorrect\n        }\n      };\n\n    case NEW_ROD_DISTLOAD_CHANGED:\n      if (isNaN(Number(value))) {\n        isCorrect = false;\n      }\n\n      return { ...state,\n        newRodInputRow: { ...state.newRodInputRow,\n          distLoad: value,\n          isDistLoadCorrect: isCorrect\n        }\n      };\n\n    case ADD_NEW_ROD:\n      if (state.newRodInputRow.area.length !== 0 && state.newRodInputRow.isAreaCorrect && state.newRodInputRow.length.length !== 0 && state.newRodInputRow.isLengthCorrect && state.newRodInputRow.modulus.length !== 0 && state.newRodInputRow.isModulusCorrect && state.newRodInputRow.sigma.length !== 0 && state.newRodInputRow.isSigmaCorrect && state.newRodInputRow.distLoad.length !== 0 && state.newRodInputRow.isDistLoadCorrect) {\n        const newObj = { ...state,\n          rodsRows: [...state.rodsRows, {\n            index: state.rodsRows.length + 1,\n            area: Number(state.newRodInputRow.area),\n            length: Number(state.newRodInputRow.length),\n            modulus: Number(state.newRodInputRow.modulus),\n            sigma: Number(state.newRodInputRow.sigma),\n            distLoad: Number(state.newRodInputRow.distLoad),\n            reactKey: uuidv4()\n          }],\n          newRodInputRow: {\n            area: \"\",\n            isAreaCorrect: true,\n            length: \"\",\n            isLengthCorrect: true,\n            modulus: \"\",\n            isModulusCorrect: true,\n            sigma: \"\",\n            isSigmaCorrect: true,\n            distLoad: \"\",\n            isDistLoadCorrect: true\n          }\n        };\n        return newObj;\n      } else {\n        return { ...state,\n          newRodInputRow: { ...state.newRodInputRow,\n            isAreaCorrect: state.newRodInputRow.area.length !== 0 && state.newRodInputRow.isAreaCorrect,\n            isLengthCorrect: state.newRodInputRow.length.length !== 0 && state.newRodInputRow.isLengthCorrect,\n            isModulusCorrect: state.newRodInputRow.modulus.length !== 0 && state.newRodInputRow.isModulusCorrect,\n            isSigmaCorrect: state.newRodInputRow.sigma.length !== 0 && state.newRodInputRow.isSigmaCorrect,\n            isDistLoadCorrect: state.newRodInputRow.distLoad.length !== 0 && state.newRodInputRow.isDistLoadCorrect\n          }\n        };\n      }\n\n    case CHANGE_ROD:\n      return { ...state,\n        changingRodIndex: action.index,\n        changingRodInputRow: { ...state.changingRodInputRow,\n          area: state.rodsRows[action.index - 1].area,\n          length: state.rodsRows[action.index - 1].length,\n          modulus: state.rodsRows[action.index - 1].modulus,\n          sigma: state.rodsRows[action.index - 1].sigma,\n          distLoad: state.rodsRows[action.index - 1].distLoad\n        }\n      };\n\n    case CHANGING_ROD_AREA_CHANGED:\n      if (isNaN(Number(value)) || Number(value) <= 0) {\n        isCorrect = false;\n      }\n\n      return { ...state,\n        changingRodInputRow: { ...state.changingRodInputRow,\n          area: value,\n          isAreaCorrect: isCorrect\n        }\n      };\n\n    case CHANGING_ROD_LENGTH_CHANGED:\n      if (isNaN(Number(value)) || Number(value) <= 0 && value.length !== 0) {\n        isCorrect = false;\n      }\n\n      return { ...state,\n        changingRodInputRow: { ...state.changingRodInputRow,\n          length: value,\n          isLengthCorrect: isCorrect\n        }\n      };\n\n    case CHANGING_ROD_MODULUS_CHANGED:\n      if (isNaN(Number(value)) || Number(value) <= 0 && value.length !== 0) {\n        isCorrect = false;\n      }\n\n      return { ...state,\n        changingRodInputRow: { ...state.changingRodInputRow,\n          modulus: value,\n          isModulusCorrect: isCorrect\n        }\n      };\n\n    case CHANGING_ROD_SIGMA_CHANGED:\n      if (isNaN(Number(value)) || Number(value) <= 0 && value.length !== 0) {\n        isCorrect = false;\n      }\n\n      return { ...state,\n        changingRodInputRow: { ...state.changingRodInputRow,\n          sigma: value,\n          isSigmaCorrect: isCorrect\n        }\n      };\n\n    case CHANGING_ROD_DISTLOAD_CHANGED:\n      if (isNaN(Number(value))) {\n        isCorrect = false;\n      }\n\n      return { ...state,\n        changingRodInputRow: { ...state.changingRodInputRow,\n          distLoad: value,\n          isDistLoadCorrect: isCorrect\n        }\n      };\n\n    case CHANGING_ROD_SUBMIT:\n      {\n        if (state.changingRodInputRow.area.length !== 0 && state.changingRodInputRow.isAreaCorrect && state.changingRodInputRow.length.length !== 0 && state.changingRodInputRow.isLengthCorrect && state.changingRodInputRow.modulus.length !== 0 && state.changingRodInputRow.isModulusCorrect && state.changingRodInputRow.sigma.length !== 0 && state.changingRodInputRow.isSigmaCorrect && state.changingRodInputRow.distLoad.length !== 0 && state.changingRodInputRow.isDistLoadCorrect) {\n          const changedRodData = {\n            index: state.changingRodIndex,\n            area: Number(state.changingRodInputRow.area),\n            length: Number(state.changingRodInputRow.length),\n            modulus: Number(state.changingRodInputRow.modulus),\n            sigma: Number(state.changingRodInputRow.sigma),\n            distLoad: Number(state.changingRodInputRow.distLoad)\n          };\n          let changedRodsRows = JSON.parse(JSON.stringify(state.rodsRows));\n          changedRodsRows.splice(state.changingRodIndex - 1, 1, changedRodData);\n          const newObj = { ...state,\n            rodsRows: changedRodsRows,\n            changingRodIndex: null,\n            changingRodInputRow: {\n              area: \"\",\n              isAreaCorrect: true,\n              length: \"\",\n              isLengthCorrect: true,\n              modulus: \"\",\n              isModulusCorrect: true,\n              sigma: \"\",\n              isSigmaCorrect: true,\n              distLoad: \"\",\n              isDistLoadCorrect: true\n            }\n          };\n          return newObj;\n        } else {\n          return { ...state,\n            changingRodInputRow: { ...state.changingRodInputRow,\n              isAreaCorrect: state.changingRodInputRow.area.length !== 0 && state.changingRodInputRow.isAreaCorrect,\n              isLengthCorrect: state.changingRodInputRow.length.length !== 0 && state.changingRodInputRow.isLengthCorrect,\n              isModulusCorrect: state.changingRodInputRow.modulus.length !== 0 && state.changingRodInputRow.isModulusCorrect,\n              isSigmaCorrect: state.changingRodInputRow.sigma.length !== 0 && state.changingRodInputRow.isSigmaCorrect,\n              isDistLoadCorrect: state.changingRodInputRow.distLoad.length !== 0 && state.changingRodInputRow.isDistLoadCorrect\n            }\n          };\n        }\n      }\n\n    case REMOVE_ROD_ROW:\n      let filteredRodsRows = [...state.rodsRows];\n      filteredRodsRows.splice(action.index - 1, 1);\n      filteredRodsRows.forEach((rodRow, index) => {\n        rodRow.index = index + 1;\n      });\n      return { ...state,\n        rodsRows: filteredRodsRows,\n        isReadyForSave: filteredRodsRows.length > 0\n      };\n\n    case ADD_NODE_ROW:\n      if (state.newNodeInputRow.nodeNumber.length !== 0 && state.newNodeInputRow.isNodeNumberCorrect && state.newNodeInputRow.nodeForce.length !== 0 && state.newNodeInputRow.isNodeForceCorrect) {\n        const newNodeData = {\n          nodeNumber: Number(state.newNodeInputRow.nodeNumber),\n          nodeForce: Number(state.newNodeInputRow.nodeForce),\n          reactKey: uuidv4()\n        };\n        return { ...state,\n          nodesRows: [...state.nodesRows, newNodeData],\n          newNodeInputRow: {\n            nodeNumber: \"\",\n            isNodeNumberCorrect: true,\n            nodeForce: \"\",\n            isNodeForceCorrect: true\n          }\n        };\n      } else {\n        return { ...state,\n          newNodeInputRow: { ...state.newNodeInputRow,\n            isNodeNumberCorrect: state.newNodeInputRow.nodeNumber.length !== 0 && state.newNodeInputRow.isNodeNumberCorrect,\n            isNodeForceCorrect: state.newNodeInputRow.nodeForce.length !== 0 && state.newNodeInputRow.isNodeForceCorrect\n          }\n        };\n      }\n\n    case NEW_NODE_NUMBER_CHANGED:\n      {\n        if (isNaN(Number(value)) || Number(value) <= 0 && value.length !== 0) {\n          isCorrect = false;\n        }\n\n        return { ...state,\n          newNodeInputRow: { ...state.newNodeInputRow,\n            nodeNumber: value,\n            isNodeNumberCorrect: isCorrect\n          }\n        };\n      }\n\n    case NEW_NODE_FORCE_CHANGED:\n      {\n        if (isNaN(Number(value)) || value.length === 0) {\n          isCorrect = false;\n        }\n\n        return { ...state,\n          newNodeInputRow: { ...state.newNodeInputRow,\n            nodeForce: value,\n            isNodeForceCorrect: isCorrect\n          }\n        };\n      }\n\n    case CHANGE_NODE:\n      return { ...state,\n        changingNodeIndex: action.index,\n        changingNodeInputRow: { ...state.changingNodeInputRow,\n          nodeNumber: state.nodesRows[action.index].nodeNumber,\n          nodeForce: state.nodesRows[action.index].nodeForce\n        }\n      };\n\n    case CHANGING_NODE_NUMBER_CHANGED:\n      if (isNaN(Number(value)) || Number(value) <= 0 && value.length !== 0) {\n        isCorrect = false;\n      }\n\n      return { ...state,\n        changingNodeInputRow: { ...state.changingNodeInputRow,\n          nodeNumber: value,\n          isNodeNumberCorrect: isCorrect\n        }\n      };\n\n    case CHANGING_NODE_FORCE_CHANGED:\n      if (isNaN(Number(value)) || value.length === 0) {\n        isCorrect = false;\n      }\n\n      return { ...state,\n        changingNodeInputRow: { ...state.changingNodeInputRow,\n          nodeForce: value,\n          isNodeForceCorrect: isCorrect\n        }\n      };\n\n    case CHANGING_NODE_SUBMIT:\n      if (state.changingNodeInputRow.nodeNumber.length !== 0 && state.changingNodeInputRow.isNodeNumberCorrect && state.changingNodeInputRow.nodeForce.length !== 0 && state.changingNodeInputRow.isNodeForceCorrect) {\n        const changedNodeData = {\n          nodeNumber: Number(state.changingNodeInputRow.nodeNumber),\n          nodeForce: Number(state.changingNodeInputRow.nodeForce),\n          reactKey: uuidv4()\n        };\n        let changedNodesRows = JSON.parse(JSON.stringify(state.nodesRows));\n        changedNodesRows.splice(state.changingNodeIndex, 1, changedNodeData);\n        return { ...state,\n          nodesRows: changedNodesRows,\n          changingNodeIndex: null,\n          changingNodeInputRow: {\n            nodeNumber: \"\",\n            isNodeNumberCorrect: true,\n            nodeForce: \"\",\n            isNodeForceCorrect: true\n          }\n        };\n      } else {\n        return { ...state,\n          newNodeInputRow: { ...state.newNodeInputRow,\n            isNodeNumberCorrect: state.newNodeInputRow.nodeNumber.length !== 0 && state.newNodeInputRow.isNodeNumberCorrect,\n            isNodeForceCorrect: state.newNodeInputRow.nodeForce.length !== 0 && state.newNodeInputRow.isNodeForceCorrect\n          }\n        };\n      }\n\n    case REMOVE_NODE_ROW:\n      let filteredNodesRows = [...state.nodesRows];\n      filteredNodesRows.splice(action.index, 1);\n      return { ...state,\n        nodesRows: filteredNodesRows\n      };\n\n    case CHANGE_LEFT_SUPPORT:\n      if (state.rodsRows.length !== 0) {\n        return { ...state,\n          leftSupport: {\n            nodeNumber: action.isChecked ? 1 : null,\n            isChecked: action.isChecked\n          }\n        };\n      }\n\n      return { ...state,\n        leftSupport: {\n          nodeNumber: null,\n          isChecked: action.isChecked\n        }\n      };\n\n    case CHANGE_RIGHT_SUPPORT:\n      if (state.rodsRows.length !== 0) {\n        return { ...state,\n          rightSupport: {\n            nodeNumber: action.isChecked ? state.rodsRows.length + 1 : null,\n            isChecked: action.isChecked\n          }\n        };\n      }\n\n      return { ...state,\n        rightSupport: {\n          nodeNumber: null,\n          isChecked: action.isChecked\n        }\n      };\n\n    case CHECK_FOR_ERROR:\n      if (!(state.leftSupport.isChecked || state.rightSupport.isChecked)) {\n        return { ...state,\n          isError: true,\n          isCanvasShown: false,\n          errorMessage: \"В конструкции должна быть хотя бы одна заделка\",\n          isReadyForSave: false\n        };\n      } else if (state.changingRodIndex !== null) {\n        return { ...state,\n          isError: true,\n          isCanvasShown: false,\n          errorMessage: \"Закончите изменение стержня\",\n          isReadyForSave: false\n        };\n      } else if (state.rodsRows.length < 1) {\n        return { ...state,\n          isError: true,\n          isCanvasShown: false,\n          errorMessage: \"В конструкции отсутствуют стержни\",\n          isReadyForSave: false\n        };\n      } else if (state.rodsRows.length === 0 && state.nodesRows.length !== 0 || state.rodsRows.length >= 1 && Math.max(...state.nodesRows.map(node => node.nodeNumber)) > state.rodsRows.length + 1) {\n        return { ...state,\n          isError: true,\n          isCanvasShown: false,\n          errorMessage: `Узел ${Math.max(...state.nodesRows.map(node => node.nodeNumber))} не существует в конструкции`,\n          isReadyForSave: false\n        };\n      } else {\n        return { ...state,\n          isError: false,\n          isCanvasShown: true,\n          errorMessage: \"\",\n          isReadyForSave: true\n        };\n      }\n\n    case SET_NEW_CONSTRUCTION_FROM_FILE_DATA:\n      {\n        return { ...action.newConstructionObj\n        };\n      }\n\n    case SAVE_SOLUTION:\n      return { ...state,\n        objWithSolutionFunctions: action.solution\n      };\n\n    case CLEAR_SOLUTION:\n      return { ...state,\n        objWithSolutionFunctions: null\n      };\n\n    case SHOW_CANVAS:\n      return { ...state,\n        isCanvasShown: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default rodsAndNodesReducer;\nexport const addNewRod = () => ({\n  type: ADD_NEW_ROD\n});\nexport const newRodAreaChanged = value => ({\n  type: NEW_ROD_AREA_CHANGED,\n  value\n});\nexport const newRodLengthChanged = value => ({\n  type: NEW_ROD_LENGTH_CHANGED,\n  value\n});\nexport const newRodModulusChanged = value => ({\n  type: NEW_ROD_MODULUS_CHANGED,\n  value\n});\nexport const newRodSigmaChanged = value => ({\n  type: NEW_ROD_SIGMA_CHANGED,\n  value\n});\nexport const newRodDistLoadChanged = value => ({\n  type: NEW_ROD_DISTLOAD_CHANGED,\n  value\n});\nexport const changeRod = index => ({\n  type: CHANGE_ROD,\n  index\n});\nexport const changingRodAreaChanged = value => ({\n  type: CHANGING_ROD_AREA_CHANGED,\n  value\n});\nexport const changingRodLengthChanged = value => ({\n  type: CHANGING_ROD_LENGTH_CHANGED,\n  value\n});\nexport const changingRodModulusChanged = value => ({\n  type: CHANGING_ROD_MODULUS_CHANGED,\n  value\n});\nexport const changingRodSigmaChanged = value => ({\n  type: CHANGING_ROD_SIGMA_CHANGED,\n  value\n});\nexport const changingRodDistLoadChanged = value => ({\n  type: CHANGING_ROD_DISTLOAD_CHANGED,\n  value\n});\nexport const changingRodSubmit = () => ({\n  type: CHANGING_ROD_SUBMIT\n});\nexport const removeRodRow = index => ({\n  type: REMOVE_ROD_ROW,\n  index\n});\nexport const addNodeRow = () => ({\n  type: ADD_NODE_ROW\n});\nexport const removeNodeRow = index => ({\n  type: REMOVE_NODE_ROW,\n  index\n});\nexport const changeNode = index => ({\n  type: CHANGE_NODE,\n  index\n});\nexport const newNodeNumberChanged = value => ({\n  type: NEW_NODE_NUMBER_CHANGED,\n  value\n});\nexport const newNodeForceChanged = value => ({\n  type: NEW_NODE_FORCE_CHANGED,\n  value\n});\nexport const changingNodeNumberChanged = value => ({\n  type: CHANGING_NODE_NUMBER_CHANGED,\n  value\n});\nexport const changingNodeForceChanged = value => ({\n  type: CHANGING_NODE_FORCE_CHANGED,\n  value\n});\nexport const changingNodeSubmit = () => ({\n  type: CHANGING_NODE_SUBMIT\n});\nexport const changeLeftSupport = isChecked => ({\n  type: CHANGE_LEFT_SUPPORT,\n  isChecked\n});\nexport const changeRightSupport = isChecked => ({\n  type: CHANGE_RIGHT_SUPPORT,\n  isChecked\n});\nexport const checkForError = () => ({\n  type: CHECK_FOR_ERROR\n});\nexport const downloadConstruction = () => (dispatch, getState) => {\n  dispatch(checkForError());\n\n  if (getState().rodsAndNodes.isReadyForSave) {\n    const state = getState().rodsAndNodes;\n    const objForDownload = {\n      rods: state.rodsRows.map(rod => {\n        return [rod.area, rod.length, rod.modulus, rod.sigma, rod.distLoad];\n      }),\n      nodes: state.nodesRows.map(node => [node.nodeNumber, node.nodeForce]),\n      left: state.leftSupport.nodeNumber ? true : false,\n      right: state.rightSupport.nodeNumber ? true : false\n    };\n    let a = document.createElement(\"a\");\n    a.setAttribute(\"download\", \"construction.json\");\n    a.href = \"data:text/plain;charset=utf-8,\" + encodeURIComponent(JSON.stringify(objForDownload, null, \"\\t\"));\n    a.click();\n  }\n};\nexport const setNewConstructionFromFileData = newConstructionObj => ({\n  type: SET_NEW_CONSTRUCTION_FROM_FILE_DATA,\n  newConstructionObj\n});\nexport const showFileReadingError = message => ({\n  type: SHOW_CONSTRUCTION_FROM_FILE_ERROR,\n  message\n});\nexport const handleFileOpening = inputRef => (dispatch, getState) => {\n  const reader = new FileReader();\n\n  reader.onload = () => {\n    let data = JSON.parse(reader.result);\n    let newConstructionObj = {};\n    newConstructionObj.rodsRows = data.rods.map((rodData, index) => {\n      return {\n        index: index + 1,\n        area: rodData[0],\n        length: rodData[1],\n        modulus: rodData[2],\n        sigma: rodData[3],\n        distLoad: rodData[4],\n        reactKey: uuidv4()\n      };\n    });\n    newConstructionObj.nodesRows = data.nodes.map((nodeData, index) => {\n      return {\n        nodeNumber: nodeData[0],\n        nodeForce: nodeData[1],\n        reactKey: uuidv4()\n      };\n    });\n    newConstructionObj.leftSupport = {\n      nodeNumber: data.left ? 1 : null,\n      isChecked: data.left\n    };\n    newConstructionObj.rightSupport = {\n      nodeNumber: data.right ? newConstructionObj.rodsRows.length + 1 : null,\n      isChecked: data.right\n    };\n    newConstructionObj.changingRodIndex = null;\n    newConstructionObj.changingRodInputRow = {\n      area: \"\",\n      isAreaCorrect: true,\n      length: \"\",\n      isLengthCorrect: true,\n      modulus: \"\",\n      isModulusCorrect: true,\n      sigma: \"\",\n      isSigmaCorrect: true,\n      distLoad: \"\",\n      isDistLoadCorrect: true\n    };\n    newConstructionObj.newRodInputRow = {\n      area: \"\",\n      isAreaCorrect: true,\n      length: \"\",\n      isLengthCorrect: true,\n      modulus: \"\",\n      isModulusCorrect: true,\n      sigma: \"\",\n      isSigmaCorrect: true,\n      distLoad: \"\",\n      isDistLoadCorrect: true\n    };\n    newConstructionObj.newNodeInputRow = {\n      nodeNumber: \"\",\n      isNodeNumberCorrect: true,\n      nodeForce: \"\",\n      isNodeForceCorrect: true\n    };\n    newConstructionObj.changingNodeIndex = null;\n    newConstructionObj.changingNodeInputRow = {\n      nodeNumber: \"\",\n      isNodeNumberCorrect: true,\n      nodeForce: \"\",\n      isNodeForceCorrect: true\n    };\n    newConstructionObj.isError = false;\n    newConstructionObj.errorMessage = \"\";\n    newConstructionObj.isReadyForSave = true;\n    newConstructionObj.objWithSolutionFunctions = null;\n    dispatch(setNewConstructionFromFileData(newConstructionObj));\n  };\n\n  reader.readAsText(inputRef.current.files[0]);\n};\nexport const saveSolution = solutionObj => ({\n  type: SAVE_SOLUTION,\n  solution: solutionObj\n});\nexport const clearSolution = () => ({\n  type: CLEAR_SOLUTION\n});\nexport const showCanvas = () => ({\n  type: SHOW_CANVAS\n});","map":{"version":3,"sources":["C:/Users/glush/Desktop/react-sapr-main/src/reducers/reducer.js"],"names":["v4","uuidv4","ADD_NEW_ROD","NEW_ROD_AREA_CHANGED","NEW_ROD_LENGTH_CHANGED","NEW_ROD_MODULUS_CHANGED","NEW_ROD_SIGMA_CHANGED","NEW_ROD_DISTLOAD_CHANGED","CHANGE_ROD","CHANGING_ROD_AREA_CHANGED","CHANGING_ROD_LENGTH_CHANGED","CHANGING_ROD_MODULUS_CHANGED","CHANGING_ROD_SIGMA_CHANGED","CHANGING_ROD_DISTLOAD_CHANGED","CHANGING_ROD_SUBMIT","REMOVE_ROD_ROW","ADD_NODE_ROW","NEW_NODE_NUMBER_CHANGED","NEW_NODE_FORCE_CHANGED","CHANGE_NODE","REMOVE_NODE_ROW","CHANGING_NODE_NUMBER_CHANGED","CHANGING_NODE_FORCE_CHANGED","CHANGING_NODE_SUBMIT","CHANGE_LEFT_SUPPORT","CHANGE_RIGHT_SUPPORT","CHECK_FOR_ERROR","SHOW_CONSTRUCTION_FROM_FILE_ERROR","SET_NEW_CONSTRUCTION_FROM_FILE_DATA","SAVE_SOLUTION","CLEAR_SOLUTION","SHOW_CANVAS","initialState","rodsRows","nodesRows","changingRodIndex","changingRodInputRow","area","isAreaCorrect","length","isLengthCorrect","modulus","isModulusCorrect","sigma","isSigmaCorrect","distLoad","isDistLoadCorrect","newRodInputRow","newNodeInputRow","nodeNumber","isNodeNumberCorrect","nodeForce","isNodeForceCorrect","changingNodeIndex","changingNodeInputRow","leftSupport","isChecked","rightSupport","isError","errorMessage","isReadyForSave","objWithSolutionFunctions","isCanvasShown","rodsAndNodesReducer","state","action","value","isCorrect","type","isNaN","Number","newObj","index","reactKey","changedRodData","changedRodsRows","JSON","parse","stringify","splice","filteredRodsRows","forEach","rodRow","newNodeData","changedNodeData","changedNodesRows","filteredNodesRows","Math","max","map","node","newConstructionObj","solution","addNewRod","newRodAreaChanged","newRodLengthChanged","newRodModulusChanged","newRodSigmaChanged","newRodDistLoadChanged","changeRod","changingRodAreaChanged","changingRodLengthChanged","changingRodModulusChanged","changingRodSigmaChanged","changingRodDistLoadChanged","changingRodSubmit","removeRodRow","addNodeRow","removeNodeRow","changeNode","newNodeNumberChanged","newNodeForceChanged","changingNodeNumberChanged","changingNodeForceChanged","changingNodeSubmit","changeLeftSupport","changeRightSupport","checkForError","downloadConstruction","dispatch","getState","rodsAndNodes","objForDownload","rods","rod","nodes","left","right","a","document","createElement","setAttribute","href","encodeURIComponent","click","setNewConstructionFromFileData","showFileReadingError","message","handleFileOpening","inputRef","reader","FileReader","onload","data","result","rodData","nodeData","readAsText","current","files","saveSolution","solutionObj","clearSolution","showCanvas"],"mappings":"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","sourcesContent":["import { v4 as uuidv4 } from \"uuid\";\n\nimport {\n    ADD_NEW_ROD,\n    NEW_ROD_AREA_CHANGED,\n    NEW_ROD_LENGTH_CHANGED,\n    NEW_ROD_MODULUS_CHANGED,\n    NEW_ROD_SIGMA_CHANGED,\n    NEW_ROD_DISTLOAD_CHANGED,\n    CHANGE_ROD,\n    CHANGING_ROD_AREA_CHANGED,\n    CHANGING_ROD_LENGTH_CHANGED,\n    CHANGING_ROD_MODULUS_CHANGED,\n    CHANGING_ROD_SIGMA_CHANGED,\n    CHANGING_ROD_DISTLOAD_CHANGED,\n    CHANGING_ROD_SUBMIT,\n    REMOVE_ROD_ROW,\n} from \"./includes/constants\";\n\n\nimport {\n    ADD_NODE_ROW,\n    NEW_NODE_NUMBER_CHANGED,\n    NEW_NODE_FORCE_CHANGED,\n    CHANGE_NODE,\n    REMOVE_NODE_ROW,\n    CHANGING_NODE_NUMBER_CHANGED,\n    CHANGING_NODE_FORCE_CHANGED,\n    CHANGING_NODE_SUBMIT,\n} from \"./includes/constants\";\n\nimport {\n    CHANGE_LEFT_SUPPORT,\n    CHANGE_RIGHT_SUPPORT\n} from \"./includes/constants\";\n\nimport {\n    CHECK_FOR_ERROR,\n    SHOW_CONSTRUCTION_FROM_FILE_ERROR,\n    SET_NEW_CONSTRUCTION_FROM_FILE_DATA\n} from \"./includes/constants\";\n\nimport {\n    SAVE_SOLUTION,\n    CLEAR_SOLUTION\n} from \"./includes/constants\";\n\nimport {\n    SHOW_CANVAS\n} from \"./includes/constants\";\n\n\nconst initialState = {\n    rodsRows: [],\n    nodesRows: [],\n    changingRodIndex: null,\n    changingRodInputRow: {\n        area: \"\",\n        isAreaCorrect: true,\n        length: \"\",\n        isLengthCorrect: true,\n        modulus: \"\",\n        isModulusCorrect: true,\n        sigma: \"\",\n        isSigmaCorrect: true,\n        distLoad: \"\",\n        isDistLoadCorrect: true,\n    },\n    newRodInputRow: {\n        area: \"\",\n        isAreaCorrect: true,\n        length: \"\",\n        isLengthCorrect: true,\n        modulus: \"\",\n        isModulusCorrect: true,\n        sigma: \"\",\n        isSigmaCorrect: true,\n        distLoad: \"\",\n        isDistLoadCorrect: true,\n    },\n    newNodeInputRow: {\n        nodeNumber: \"\",\n        isNodeNumberCorrect: true,\n        nodeForce: \"\",\n        isNodeForceCorrect: true,\n    },\n    changingNodeIndex: null,\n    changingNodeInputRow: {\n        nodeNumber: \"\",\n        isNodeNumberCorrect: true,\n        nodeForce: \"\",\n        isNodeForceCorrect: true,\n    },\n    leftSupport: {\n        nodeNumber: null,\n        isChecked: false,\n    },\n    rightSupport: {\n        nodeNumber: null,\n        isChecked: false,\n    },\n    isError: false,\n    errorMessage: \"Конструкция не введена\",\n    isReadyForSave: false,\n    objWithSolutionFunctions: null,\n    isCanvasShown: false\n};\n\nconst rodsAndNodesReducer = (state = initialState, action) => {\n    let value = action.value;\n    let isCorrect = true;\n\n    switch (action.type) {\n        case NEW_ROD_AREA_CHANGED:\n            if (\n                isNaN(Number(value)) ||\n                (Number(value) <= 0 && value.length !== 0)\n            ) {\n                isCorrect = false;\n            }\n            return {\n                ...state,\n                newRodInputRow: {\n                    ...state.newRodInputRow,\n                    area: value,\n                    isAreaCorrect: isCorrect,\n                },\n            };\n        case NEW_ROD_LENGTH_CHANGED:\n            if (\n                isNaN(Number(value)) ||\n                (Number(value) <= 0 && value.length !== 0)\n            ) {\n                isCorrect = false;\n            }\n            return {\n                ...state,\n                newRodInputRow: {\n                    ...state.newRodInputRow,\n                    length: value,\n                    isLengthCorrect: isCorrect,\n                },\n            };\n        case NEW_ROD_MODULUS_CHANGED:\n            if (\n                isNaN(Number(value)) ||\n                (Number(value) <= 0 && value.length !== 0)\n            ) {\n                isCorrect = false;\n            }\n            return {\n                ...state,\n                newRodInputRow: {\n                    ...state.newRodInputRow,\n                    modulus: value,\n                    isModulusCorrect: isCorrect,\n                },\n            };\n        case NEW_ROD_SIGMA_CHANGED:\n            if (\n                isNaN(Number(value)) ||\n                (Number(value) <= 0 && value.length !== 0)\n            ) {\n                isCorrect = false;\n            }\n            return {\n                ...state,\n                newRodInputRow: {\n                    ...state.newRodInputRow,\n                    sigma: value,\n                    isSigmaCorrect: isCorrect,\n                },\n            };\n        case NEW_ROD_DISTLOAD_CHANGED:\n            if (isNaN(Number(value))) {\n                isCorrect = false;\n            }\n            return {\n                ...state,\n                newRodInputRow: {\n                    ...state.newRodInputRow,\n                    distLoad: value,\n                    isDistLoadCorrect: isCorrect,\n                },\n            };\n        case ADD_NEW_ROD:\n            if (\n                state.newRodInputRow.area.length !== 0 &&\n                state.newRodInputRow.isAreaCorrect &&\n                state.newRodInputRow.length.length !== 0 &&\n                state.newRodInputRow.isLengthCorrect &&\n                state.newRodInputRow.modulus.length !== 0 &&\n                state.newRodInputRow.isModulusCorrect &&\n                state.newRodInputRow.sigma.length !== 0 &&\n                state.newRodInputRow.isSigmaCorrect &&\n                state.newRodInputRow.distLoad.length !== 0 &&\n                state.newRodInputRow.isDistLoadCorrect\n            ) {\n                const newObj = {\n                    ...state,\n                    rodsRows: [\n                        ...state.rodsRows,\n                        {\n                            index: state.rodsRows.length + 1,\n                            area: Number(state.newRodInputRow.area),\n                            length: Number(state.newRodInputRow.length),\n                            modulus: Number(state.newRodInputRow.modulus),\n                            sigma: Number(state.newRodInputRow.sigma),\n                            distLoad: Number(state.newRodInputRow.distLoad),\n                            reactKey: uuidv4(),\n                        },\n                    ],\n                    newRodInputRow: {\n                        area: \"\",\n                        isAreaCorrect: true,\n                        length: \"\",\n                        isLengthCorrect: true,\n                        modulus: \"\",\n                        isModulusCorrect: true,\n                        sigma: \"\",\n                        isSigmaCorrect: true,\n                        distLoad: \"\",\n                        isDistLoadCorrect: true,\n                    },\n                };\n                return newObj;\n            } else {\n                return {\n                    ...state,\n                    newRodInputRow: {\n                        ...state.newRodInputRow,\n                        isAreaCorrect:\n                            state.newRodInputRow.area.length !== 0 &&\n                            state.newRodInputRow.isAreaCorrect,\n                        isLengthCorrect:\n                            state.newRodInputRow.length.length !== 0 &&\n                            state.newRodInputRow.isLengthCorrect,\n                        isModulusCorrect:\n                            state.newRodInputRow.modulus.length !== 0 &&\n                            state.newRodInputRow.isModulusCorrect,\n                        isSigmaCorrect:\n                            state.newRodInputRow.sigma.length !== 0 &&\n                            state.newRodInputRow.isSigmaCorrect,\n                        isDistLoadCorrect:\n                            state.newRodInputRow.distLoad.length !== 0 &&\n                            state.newRodInputRow.isDistLoadCorrect,\n                    },\n                };\n            }\n        case CHANGE_ROD:\n            return {\n                ...state,\n                changingRodIndex: action.index,\n                changingRodInputRow: {\n                    ...state.changingRodInputRow,\n                    area: state.rodsRows[action.index - 1].area,\n                    length: state.rodsRows[action.index - 1].length,\n                    modulus: state.rodsRows[action.index - 1].modulus,\n                    sigma: state.rodsRows[action.index - 1].sigma,\n                    distLoad: state.rodsRows[action.index - 1].distLoad,\n                },\n            };\n        case CHANGING_ROD_AREA_CHANGED:\n            if (isNaN(Number(value)) || Number(value) <= 0) {\n                isCorrect = false;\n            }\n            return {\n                ...state,\n                changingRodInputRow: {\n                    ...state.changingRodInputRow,\n                    area: value,\n                    isAreaCorrect: isCorrect,\n                },\n            };\n        case CHANGING_ROD_LENGTH_CHANGED:\n            if (\n                isNaN(Number(value)) ||\n                (Number(value) <= 0 && value.length !== 0)\n            ) {\n                isCorrect = false;\n            }\n            return {\n                ...state,\n                changingRodInputRow: {\n                    ...state.changingRodInputRow,\n                    length: value,\n                    isLengthCorrect: isCorrect,\n                },\n            };\n        case CHANGING_ROD_MODULUS_CHANGED:\n            if (\n                isNaN(Number(value)) ||\n                (Number(value) <= 0 && value.length !== 0)\n            ) {\n                isCorrect = false;\n            }\n            return {\n                ...state,\n                changingRodInputRow: {\n                    ...state.changingRodInputRow,\n                    modulus: value,\n                    isModulusCorrect: isCorrect,\n                },\n            };\n        case CHANGING_ROD_SIGMA_CHANGED:\n            if (\n                isNaN(Number(value)) ||\n                (Number(value) <= 0 && value.length !== 0)\n            ) {\n                isCorrect = false;\n            }\n            return {\n                ...state,\n                changingRodInputRow: {\n                    ...state.changingRodInputRow,\n                    sigma: value,\n                    isSigmaCorrect: isCorrect,\n                },\n            };\n        case CHANGING_ROD_DISTLOAD_CHANGED:\n            if (isNaN(Number(value))) {\n                isCorrect = false;\n            }\n            return {\n                ...state,\n                changingRodInputRow: {\n                    ...state.changingRodInputRow,\n                    distLoad: value,\n                    isDistLoadCorrect: isCorrect,\n                },\n            };\n        case CHANGING_ROD_SUBMIT: {\n            if (\n                state.changingRodInputRow.area.length !== 0 &&\n                state.changingRodInputRow.isAreaCorrect &&\n                state.changingRodInputRow.length.length !== 0 &&\n                state.changingRodInputRow.isLengthCorrect &&\n                state.changingRodInputRow.modulus.length !== 0 &&\n                state.changingRodInputRow.isModulusCorrect &&\n                state.changingRodInputRow.sigma.length !== 0 &&\n                state.changingRodInputRow.isSigmaCorrect &&\n                state.changingRodInputRow.distLoad.length !== 0 &&\n                state.changingRodInputRow.isDistLoadCorrect\n            ) {\n                const changedRodData = {\n                    index: state.changingRodIndex,\n                    area: Number(state.changingRodInputRow.area),\n                    length: Number(state.changingRodInputRow.length),\n                    modulus: Number(state.changingRodInputRow.modulus),\n                    sigma: Number(state.changingRodInputRow.sigma),\n                    distLoad: Number(state.changingRodInputRow.distLoad),\n                };\n                let changedRodsRows = JSON.parse(\n                    JSON.stringify(state.rodsRows)\n                );\n                changedRodsRows.splice(\n                    state.changingRodIndex - 1,\n                    1,\n                    changedRodData\n                );\n\n                const newObj = {\n                    ...state,\n                    rodsRows: changedRodsRows,\n                    changingRodIndex: null,\n                    changingRodInputRow: {\n                        area: \"\",\n                        isAreaCorrect: true,\n                        length: \"\",\n                        isLengthCorrect: true,\n                        modulus: \"\",\n                        isModulusCorrect: true,\n                        sigma: \"\",\n                        isSigmaCorrect: true,\n                        distLoad: \"\",\n                        isDistLoadCorrect: true,\n                    },\n                };\n                return newObj;\n            } else {\n                return {\n                    ...state,\n                    changingRodInputRow: {\n                        ...state.changingRodInputRow,\n                        isAreaCorrect:\n                            state.changingRodInputRow.area.length !== 0 &&\n                            state.changingRodInputRow.isAreaCorrect,\n                        isLengthCorrect:\n                            state.changingRodInputRow.length.length !== 0 &&\n                            state.changingRodInputRow.isLengthCorrect,\n                        isModulusCorrect:\n                            state.changingRodInputRow.modulus.length !== 0 &&\n                            state.changingRodInputRow.isModulusCorrect,\n                        isSigmaCorrect:\n                            state.changingRodInputRow.sigma.length !== 0 &&\n                            state.changingRodInputRow.isSigmaCorrect,\n                        isDistLoadCorrect:\n                            state.changingRodInputRow.distLoad.length !== 0 &&\n                            state.changingRodInputRow.isDistLoadCorrect,\n                    },\n                };\n            }\n        }\n        case REMOVE_ROD_ROW:\n            let filteredRodsRows = [...state.rodsRows];\n            filteredRodsRows.splice(action.index - 1, 1);\n            filteredRodsRows.forEach((rodRow, index) => {\n                rodRow.index = index + 1;\n            });\n\n            return {\n                ...state,\n                rodsRows: filteredRodsRows,\n                isReadyForSave: filteredRodsRows.length > 0,\n            };\n        case ADD_NODE_ROW:\n            if (\n                state.newNodeInputRow.nodeNumber.length !== 0 &&\n                state.newNodeInputRow.isNodeNumberCorrect &&\n                state.newNodeInputRow.nodeForce.length !== 0 &&\n                state.newNodeInputRow.isNodeForceCorrect\n            ) {\n                const newNodeData = {\n                    nodeNumber: Number(state.newNodeInputRow.nodeNumber),\n                    nodeForce: Number(state.newNodeInputRow.nodeForce),\n                    reactKey: uuidv4(),\n                };\n                return {\n                    ...state,\n                    nodesRows: [...state.nodesRows, newNodeData],\n                    newNodeInputRow: {\n                        nodeNumber: \"\",\n                        isNodeNumberCorrect: true,\n                        nodeForce: \"\",\n                        isNodeForceCorrect: true,\n                    },\n                };\n            } else {\n                return {\n                    ...state,\n                    newNodeInputRow: {\n                        ...state.newNodeInputRow,\n                        isNodeNumberCorrect:\n                            state.newNodeInputRow.nodeNumber.length !== 0 &&\n                            state.newNodeInputRow.isNodeNumberCorrect,\n                        isNodeForceCorrect:\n                            state.newNodeInputRow.nodeForce.length !== 0 &&\n                            state.newNodeInputRow.isNodeForceCorrect,\n                    },\n                };\n            }\n        case NEW_NODE_NUMBER_CHANGED: {\n            if (\n                isNaN(Number(value)) ||\n                (Number(value) <= 0 && value.length !== 0)\n            ) {\n                isCorrect = false;\n            }\n            return {\n                ...state,\n                newNodeInputRow: {\n                    ...state.newNodeInputRow,\n                    nodeNumber: value,\n                    isNodeNumberCorrect: isCorrect,\n                },\n            };\n        }\n        case NEW_NODE_FORCE_CHANGED: {\n            if (isNaN(Number(value)) || value.length === 0) {\n                isCorrect = false;\n            }\n            return {\n                ...state,\n                newNodeInputRow: {\n                    ...state.newNodeInputRow,\n                    nodeForce: value,\n                    isNodeForceCorrect: isCorrect,\n                },\n            };\n        }\n        case CHANGE_NODE:\n            return {\n                ...state,\n                changingNodeIndex: action.index,\n                changingNodeInputRow: {\n                    ...state.changingNodeInputRow,\n                    nodeNumber: state.nodesRows[action.index].nodeNumber,\n                    nodeForce: state.nodesRows[action.index].nodeForce,\n                },\n            };\n        case CHANGING_NODE_NUMBER_CHANGED:\n            if (\n                isNaN(Number(value)) ||\n                (Number(value) <= 0 && value.length !== 0)\n            ) {\n                isCorrect = false;\n            }\n            return {\n                ...state,\n                changingNodeInputRow: {\n                    ...state.changingNodeInputRow,\n                    nodeNumber: value,\n                    isNodeNumberCorrect: isCorrect,\n                },\n            };\n        case CHANGING_NODE_FORCE_CHANGED:\n            if (isNaN(Number(value)) || value.length === 0) {\n                isCorrect = false;\n            }\n            return {\n                ...state,\n                changingNodeInputRow: {\n                    ...state.changingNodeInputRow,\n                    nodeForce: value,\n                    isNodeForceCorrect: isCorrect,\n                },\n            };\n        case CHANGING_NODE_SUBMIT:\n            if (\n                state.changingNodeInputRow.nodeNumber.length !== 0 &&\n                state.changingNodeInputRow.isNodeNumberCorrect &&\n                state.changingNodeInputRow.nodeForce.length !== 0 &&\n                state.changingNodeInputRow.isNodeForceCorrect\n            ) {\n                const changedNodeData = {\n                    nodeNumber: Number(state.changingNodeInputRow.nodeNumber),\n                    nodeForce: Number(state.changingNodeInputRow.nodeForce),\n                    reactKey: uuidv4(),\n                };\n                let changedNodesRows = JSON.parse(\n                    JSON.stringify(state.nodesRows)\n                );\n                changedNodesRows.splice(\n                    state.changingNodeIndex,\n                    1,\n                    changedNodeData\n                );\n                return {\n                    ...state,\n                    nodesRows: changedNodesRows,\n                    changingNodeIndex: null,\n                    changingNodeInputRow: {\n                        nodeNumber: \"\",\n                        isNodeNumberCorrect: true,\n                        nodeForce: \"\",\n                        isNodeForceCorrect: true,\n                    },\n                };\n            } else {\n                return {\n                    ...state,\n                    newNodeInputRow: {\n                        ...state.newNodeInputRow,\n                        isNodeNumberCorrect:\n                            state.newNodeInputRow.nodeNumber.length !== 0 &&\n                            state.newNodeInputRow.isNodeNumberCorrect,\n                        isNodeForceCorrect:\n                            state.newNodeInputRow.nodeForce.length !== 0 &&\n                            state.newNodeInputRow.isNodeForceCorrect,\n                    },\n                };\n            }\n        case REMOVE_NODE_ROW:\n            let filteredNodesRows = [...state.nodesRows];\n            filteredNodesRows.splice(action.index, 1);\n            return {\n                ...state,\n                nodesRows: filteredNodesRows,\n            };\n\n        case CHANGE_LEFT_SUPPORT:\n            if (state.rodsRows.length !== 0) {\n                return {\n                    ...state,\n                    leftSupport: {\n                        nodeNumber: action.isChecked ? 1 : null,\n                        isChecked: action.isChecked,\n                    },\n                };\n            }\n            return {\n                ...state,\n                leftSupport: {\n                    nodeNumber: null,\n                    isChecked: action.isChecked,\n                },\n            };\n        case CHANGE_RIGHT_SUPPORT:\n            if (state.rodsRows.length !== 0) {\n                return {\n                    ...state,\n                    rightSupport: {\n                        nodeNumber: action.isChecked\n                            ? state.rodsRows.length + 1\n                            : null,\n                        isChecked: action.isChecked,\n                    },\n                };\n            }\n            return {\n                ...state,\n                rightSupport: {\n                    nodeNumber: null,\n                    isChecked: action.isChecked,\n                },\n            };\n        case CHECK_FOR_ERROR:\n            if (\n                !(state.leftSupport.isChecked || state.rightSupport.isChecked)\n            ) {\n                return {\n                    ...state,\n                    isError: true,\n                    isCanvasShown: false,\n                    errorMessage:\n                        \"В конструкции должна быть хотя бы одна заделка\",\n                    isReadyForSave: false,\n                };\n            } else if (state.changingRodIndex !== null) {\n                return {\n                    ...state,\n                    isError: true,\n                    isCanvasShown: false,\n                    errorMessage: \"Закончите изменение стержня\",\n                    isReadyForSave: false,\n                };\n            } else if (state.rodsRows.length < 1) {\n                return {\n                    ...state,\n                    isError: true,\n                    isCanvasShown: false,\n                    errorMessage: \"В конструкции отсутствуют стержни\",\n                    isReadyForSave: false,\n                };\n            } else if (\n                (state.rodsRows.length === 0 && state.nodesRows.length !== 0) ||\n                (state.rodsRows.length >= 1 &&\n                    Math.max(\n                        ...state.nodesRows.map((node) => node.nodeNumber)\n                    ) >\n                        state.rodsRows.length + 1)\n            ) {\n                return {\n                    ...state,\n                    isError: true,\n                    isCanvasShown: false,\n                    errorMessage: `Узел ${Math.max(\n                        ...state.nodesRows.map((node) => node.nodeNumber)\n                    )} не существует в конструкции`,\n                    isReadyForSave: false,\n                };\n            } else {\n                return {\n                    ...state,\n                    isError: false,\n                    isCanvasShown: true,\n                    errorMessage: \"\",\n                    isReadyForSave: true,\n                };\n            }\n        case SET_NEW_CONSTRUCTION_FROM_FILE_DATA: {\n            return {\n                ...action.newConstructionObj,\n            };\n        }\n        case SAVE_SOLUTION:\n            return {\n                ...state,\n                objWithSolutionFunctions: action.solution,\n            };\n        case CLEAR_SOLUTION:\n            return {\n                ...state,\n                objWithSolutionFunctions: null,\n            };\n        case SHOW_CANVAS :\n            return {\n                ...state,\n                isCanvasShown: true\n            }\n        default:\n            return state;\n    }\n};\n\nexport default rodsAndNodesReducer;\n\nexport const addNewRod = () => ({ type: ADD_NEW_ROD });\nexport const newRodAreaChanged = (value) => ({\n    type: NEW_ROD_AREA_CHANGED,\n    value,\n});\nexport const newRodLengthChanged = (value) => ({\n    type: NEW_ROD_LENGTH_CHANGED,\n    value,\n});\nexport const newRodModulusChanged = (value) => ({\n    type: NEW_ROD_MODULUS_CHANGED,\n    value,\n});\nexport const newRodSigmaChanged = (value) => ({\n    type: NEW_ROD_SIGMA_CHANGED,\n    value,\n});\nexport const newRodDistLoadChanged = (value) => ({\n    type: NEW_ROD_DISTLOAD_CHANGED,\n    value,\n});\n\nexport const changeRod = (index) => ({\n    type: CHANGE_ROD,\n    index,\n});\nexport const changingRodAreaChanged = (value) => ({\n    type: CHANGING_ROD_AREA_CHANGED,\n    value,\n});\nexport const changingRodLengthChanged = (value) => ({\n    type: CHANGING_ROD_LENGTH_CHANGED,\n    value,\n});\nexport const changingRodModulusChanged = (value) => ({\n    type: CHANGING_ROD_MODULUS_CHANGED,\n    value,\n});\nexport const changingRodSigmaChanged = (value) => ({\n    type: CHANGING_ROD_SIGMA_CHANGED,\n    value,\n});\nexport const changingRodDistLoadChanged = (value) => ({\n    type: CHANGING_ROD_DISTLOAD_CHANGED,\n    value,\n});\n\nexport const changingRodSubmit = () => ({\n    type: CHANGING_ROD_SUBMIT,\n});\n\nexport const removeRodRow = (index) => ({\n    type: REMOVE_ROD_ROW,\n    index,\n});\n\nexport const addNodeRow = () => ({\n    type: ADD_NODE_ROW,\n});\n\nexport const removeNodeRow = (index) => ({\n    type: REMOVE_NODE_ROW,\n    index,\n});\n\nexport const changeNode = (index) => ({\n    type: CHANGE_NODE,\n    index,\n});\n\nexport const newNodeNumberChanged = (value) => ({\n    type: NEW_NODE_NUMBER_CHANGED,\n    value,\n});\n\nexport const newNodeForceChanged = (value) => ({\n    type: NEW_NODE_FORCE_CHANGED,\n    value,\n});\n\nexport const changingNodeNumberChanged = (value) => ({\n    type: CHANGING_NODE_NUMBER_CHANGED,\n    value,\n});\n\nexport const changingNodeForceChanged = (value) => ({\n    type: CHANGING_NODE_FORCE_CHANGED,\n    value,\n});\n\nexport const changingNodeSubmit = () => ({\n    type: CHANGING_NODE_SUBMIT,\n});\n\nexport const changeLeftSupport = (isChecked) => ({\n    type: CHANGE_LEFT_SUPPORT,\n    isChecked,\n});\n\nexport const changeRightSupport = (isChecked) => ({\n    type: CHANGE_RIGHT_SUPPORT,\n    isChecked,\n});\n\nexport const checkForError = () => ({ type: CHECK_FOR_ERROR });\n\nexport const downloadConstruction = () => (dispatch, getState) => {\n    dispatch(checkForError());\n    if (getState().rodsAndNodes.isReadyForSave) {\n        const state = getState().rodsAndNodes;\n        const objForDownload = {\n            rods: state.rodsRows.map((rod) => {\n                return [\n                    rod.area,\n                    rod.length,\n                    rod.modulus,\n                    rod.sigma,\n                    rod.distLoad,\n                ];\n            }),\n            nodes: state.nodesRows.map((node) => [\n                node.nodeNumber,\n                node.nodeForce,\n            ]),\n            left: state.leftSupport.nodeNumber ? true : false,\n            right: state.rightSupport.nodeNumber ? true : false,\n        };\n        let a = document.createElement(\"a\");\n        a.setAttribute(\"download\", \"construction.json\");\n        a.href =\n            \"data:text/plain;charset=utf-8,\" +\n            encodeURIComponent(JSON.stringify(objForDownload, null, \"\\t\"));\n        a.click();\n    }\n};\n\nexport const setNewConstructionFromFileData = (newConstructionObj) => ({\n    type: SET_NEW_CONSTRUCTION_FROM_FILE_DATA,\n    newConstructionObj,\n});\n\nexport const showFileReadingError = (message) => ({\n    type: SHOW_CONSTRUCTION_FROM_FILE_ERROR,\n    message,\n});\n\nexport const handleFileOpening = (inputRef) => (dispatch, getState) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n        let data = JSON.parse(reader.result);\n        let newConstructionObj = {};\n        newConstructionObj.rodsRows = data.rods.map((rodData, index) => {\n            return {\n                index: index + 1,\n                area: rodData[0],\n                length: rodData[1],\n                modulus: rodData[2],\n                sigma: rodData[3],\n                distLoad: rodData[4],\n                reactKey: uuidv4(),\n            };\n        });\n        newConstructionObj.nodesRows = data.nodes.map((nodeData, index) => {\n            return {\n                nodeNumber: nodeData[0],\n                nodeForce: nodeData[1],\n                reactKey: uuidv4(),\n            };\n        });\n        newConstructionObj.leftSupport = {\n            nodeNumber: data.left ? 1 : null,\n            isChecked: data.left,\n        };\n        newConstructionObj.rightSupport = {\n            nodeNumber: data.right\n                ? newConstructionObj.rodsRows.length + 1\n                : null,\n            isChecked: data.right,\n        };\n        newConstructionObj.changingRodIndex = null;\n        newConstructionObj.changingRodInputRow = {\n            area: \"\",\n            isAreaCorrect: true,\n            length: \"\",\n            isLengthCorrect: true,\n            modulus: \"\",\n            isModulusCorrect: true,\n            sigma: \"\",\n            isSigmaCorrect: true,\n            distLoad: \"\",\n            isDistLoadCorrect: true,\n        };\n        newConstructionObj.newRodInputRow = {\n            area: \"\",\n            isAreaCorrect: true,\n            length: \"\",\n            isLengthCorrect: true,\n            modulus: \"\",\n            isModulusCorrect: true,\n            sigma: \"\",\n            isSigmaCorrect: true,\n            distLoad: \"\",\n            isDistLoadCorrect: true,\n        };\n        newConstructionObj.newNodeInputRow = {\n            nodeNumber: \"\",\n            isNodeNumberCorrect: true,\n            nodeForce: \"\",\n            isNodeForceCorrect: true,\n        };\n        newConstructionObj.changingNodeIndex = null;\n        newConstructionObj.changingNodeInputRow = {\n            nodeNumber: \"\",\n            isNodeNumberCorrect: true,\n            nodeForce: \"\",\n            isNodeForceCorrect: true,\n        };\n        newConstructionObj.isError = false;\n        newConstructionObj.errorMessage = \"\";\n        newConstructionObj.isReadyForSave = true;\n        newConstructionObj.objWithSolutionFunctions = null;\n        dispatch(setNewConstructionFromFileData(newConstructionObj));\n    };\n    reader.readAsText(inputRef.current.files[0]);\n};\n\nexport const saveSolution = (solutionObj) => ({\n    type: SAVE_SOLUTION,\n    solution: solutionObj,\n});\n\nexport const clearSolution = () => ({\n    type: CLEAR_SOLUTION,\n});\n\nexport const showCanvas = () => ({\n    type: SHOW_CANVAS\n})\n"]},"metadata":{},"sourceType":"module"}