{"ast":null,"code":"import { v4 as uuidv4 } from \"uuid\";\nimport { setNewConstructionFromFileData } from \"../reducer\";\nexport const SET_NEW_CONSTRUCTION_FROM_FILE_DATA = \"SET_NEW_CONSTRUCTION_FROM_FILE_DATA\";\nexport const handleFileOpening = inputRef => (dispatch, getState) => {\n  const reader = new FileReader();\n\n  reader.onload = () => {\n    let data = JSON.parse(reader.result);\n    let newConstructionObj = {};\n    newConstructionObj.rodsRows = data.rods.map((rodData, index) => {\n      return {\n        index: index + 1,\n        area: rodData[0],\n        length: rodData[1],\n        modulus: rodData[2],\n        sigma: rodData[3],\n        distLoad: rodData[4],\n        reactKey: uuidv4()\n      };\n    });\n    newConstructionObj.nodesRows = data.nodes.map((nodeData, index) => {\n      return {\n        nodeNumber: nodeData[0],\n        nodeForce: nodeData[1],\n        reactKey: uuidv4()\n      };\n    });\n    newConstructionObj.leftSupport = {\n      nodeNumber: data.left ? 1 : null,\n      isChecked: data.left\n    };\n    newConstructionObj.rightSupport = {\n      nodeNumber: data.right ? newConstructionObj.rodsRows.length + 1 : null,\n      isChecked: data.right\n    };\n    newConstructionObj.changingRodIndex = null;\n    newConstructionObj.changingRodInputRow = {\n      area: \"\",\n      isAreaCorrect: true,\n      length: \"\",\n      isLengthCorrect: true,\n      modulus: \"\",\n      isModulusCorrect: true,\n      sigma: \"\",\n      isSigmaCorrect: true,\n      distLoad: \"\",\n      isDistLoadCorrect: true\n    };\n    newConstructionObj.newRodInputRow = {\n      area: \"\",\n      isAreaCorrect: true,\n      length: \"\",\n      isLengthCorrect: true,\n      modulus: \"\",\n      isModulusCorrect: true,\n      sigma: \"\",\n      isSigmaCorrect: true,\n      distLoad: \"\",\n      isDistLoadCorrect: true\n    };\n    newConstructionObj.newNodeInputRow = {\n      nodeNumber: \"\",\n      isNodeNumberCorrect: true,\n      nodeForce: \"\",\n      isNodeForceCorrect: true\n    };\n    newConstructionObj.changingNodeIndex = null;\n    newConstructionObj.changingNodeInputRow = {\n      nodeNumber: \"\",\n      isNodeNumberCorrect: true,\n      nodeForce: \"\",\n      isNodeForceCorrect: true\n    };\n    newConstructionObj.isError = false;\n    newConstructionObj.errorMessage = \"\";\n    newConstructionObj.isReadyForSave = true;\n    newConstructionObj.objWithSolutionFunctions = null;\n    dispatch(setNewConstructionFromFileData(newConstructionObj));\n  };\n\n  reader.readAsText(inputRef.current.files[0]);\n};","map":{"version":3,"sources":["C:/Users/glush/Desktop/react-sapr-main/src/reducers/includes/file_actions.js"],"names":["v4","uuidv4","setNewConstructionFromFileData","SET_NEW_CONSTRUCTION_FROM_FILE_DATA","handleFileOpening","inputRef","dispatch","getState","reader","FileReader","onload","data","JSON","parse","result","newConstructionObj","rodsRows","rods","map","rodData","index","area","length","modulus","sigma","distLoad","reactKey","nodesRows","nodes","nodeData","nodeNumber","nodeForce","leftSupport","left","isChecked","rightSupport","right","changingRodIndex","changingRodInputRow","isAreaCorrect","isLengthCorrect","isModulusCorrect","isSigmaCorrect","isDistLoadCorrect","newRodInputRow","newNodeInputRow","isNodeNumberCorrect","isNodeForceCorrect","changingNodeIndex","changingNodeInputRow","isError","errorMessage","isReadyForSave","objWithSolutionFunctions","readAsText","current","files"],"mappings":"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","sourcesContent":["import {v4 as uuidv4} from \"uuid\";\r\nimport {setNewConstructionFromFileData} from \"../reducer\";\r\n\r\nexport const SET_NEW_CONSTRUCTION_FROM_FILE_DATA = \"SET_NEW_CONSTRUCTION_FROM_FILE_DATA\";\r\n\r\nexport const handleFileOpening = (inputRef) => (dispatch, getState) => {\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n        let data = JSON.parse(reader.result);\r\n        let newConstructionObj = {};\r\n        newConstructionObj.rodsRows = data.rods.map((rodData, index) => {\r\n            return {\r\n                index: index + 1,\r\n                area: rodData[0],\r\n                length: rodData[1],\r\n                modulus: rodData[2],\r\n                sigma: rodData[3],\r\n                distLoad: rodData[4],\r\n                reactKey: uuidv4(),\r\n            };\r\n        });\r\n        newConstructionObj.nodesRows = data.nodes.map((nodeData, index) => {\r\n            return {\r\n                nodeNumber: nodeData[0],\r\n                nodeForce: nodeData[1],\r\n                reactKey: uuidv4(),\r\n            };\r\n        });\r\n        newConstructionObj.leftSupport = {\r\n            nodeNumber: data.left ? 1 : null,\r\n            isChecked: data.left,\r\n        };\r\n        newConstructionObj.rightSupport = {\r\n            nodeNumber: data.right\r\n                ? newConstructionObj.rodsRows.length + 1\r\n                : null,\r\n            isChecked: data.right,\r\n        };\r\n        newConstructionObj.changingRodIndex = null;\r\n        newConstructionObj.changingRodInputRow = {\r\n            area: \"\",\r\n            isAreaCorrect: true,\r\n            length: \"\",\r\n            isLengthCorrect: true,\r\n            modulus: \"\",\r\n            isModulusCorrect: true,\r\n            sigma: \"\",\r\n            isSigmaCorrect: true,\r\n            distLoad: \"\",\r\n            isDistLoadCorrect: true,\r\n        };\r\n        newConstructionObj.newRodInputRow = {\r\n            area: \"\",\r\n            isAreaCorrect: true,\r\n            length: \"\",\r\n            isLengthCorrect: true,\r\n            modulus: \"\",\r\n            isModulusCorrect: true,\r\n            sigma: \"\",\r\n            isSigmaCorrect: true,\r\n            distLoad: \"\",\r\n            isDistLoadCorrect: true,\r\n        };\r\n        newConstructionObj.newNodeInputRow = {\r\n            nodeNumber: \"\",\r\n            isNodeNumberCorrect: true,\r\n            nodeForce: \"\",\r\n            isNodeForceCorrect: true,\r\n        };\r\n        newConstructionObj.changingNodeIndex = null;\r\n        newConstructionObj.changingNodeInputRow = {\r\n            nodeNumber: \"\",\r\n            isNodeNumberCorrect: true,\r\n            nodeForce: \"\",\r\n            isNodeForceCorrect: true,\r\n        };\r\n        newConstructionObj.isError = false;\r\n        newConstructionObj.errorMessage = \"\";\r\n        newConstructionObj.isReadyForSave = true;\r\n        newConstructionObj.objWithSolutionFunctions = null;\r\n        dispatch(setNewConstructionFromFileData(newConstructionObj));\r\n    };\r\n    reader.readAsText(inputRef.current.files[0]);\r\n};"]},"metadata":{},"sourceType":"module"}