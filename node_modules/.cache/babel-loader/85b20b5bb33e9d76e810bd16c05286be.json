{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\glush\\\\Desktop\\\\react-sapr-main\\\\src\\\\components\\\\Preprocessor\\\\Preprocessor.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport { addNewRod, newRodAreaChanged, newRodLengthChanged, newRodModulusChanged, newRodSigmaChanged, newRodDistLoadChanged, changeRod, changingRodAreaChanged, changingRodLengthChanged, changingRodModulusChanged, changingRodSigmaChanged, changingRodDistLoadChanged, changingRodSubmit, removeRodRow, addNodeRow, newNodeNumberChanged, newNodeForceChanged, removeNodeRow, changeNode, changingNodeNumberChanged, changingNodeForceChanged, changingNodeSubmit, changeLeftSupport, changeRightSupport, checkForError, downloadConstruction, handleFileOpening, clearSolution, showCanvas } from \"../../reducers/reducer\";\nimport ConstructionCanvas from \"./ConstructionCanvas\";\nimport \"./Preprocessor.scss\";\n\nfunction Preprocessor(props) {\n  _s();\n\n  const openFileInputRef = useRef(null);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"preprocessor__body\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"preprocessor__rods\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"preprocessor__title\"\n  }, \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0432 \\u0442\\u0430\\u0431\\u043B\\u0438\\u0446\\u0443 \\u043F\\u0430\\u0440\\u0430\\u043C\\u0435\\u0442\\u0440\\u044B \\u0441\\u0442\\u0435\\u0440\\u0436\\u043D\\u0435\\u0439\"), /*#__PURE__*/React.createElement(\"table\", {\n    class: \"preprocessor__rods-table\"\n  }, /*#__PURE__*/React.createElement(\"thead\", null, /*#__PURE__*/React.createElement(\"tr\", null, /*#__PURE__*/React.createElement(\"th\", null, \"\\u0421\\u0442\\u0435\\u0440\\u0436\\u0435\\u043D\\u044C\"), /*#__PURE__*/React.createElement(\"th\", null, \"A(\\u043F\\u043B\\u043E\\u0449\\u0430\\u0434\\u044C)\"), /*#__PURE__*/React.createElement(\"th\", null, \"L(\\u0434\\u043B\\u0438\\u043D\\u0430)\"), /*#__PURE__*/React.createElement(\"th\", null, \"E(\\u043C\\u043E\\u0434.\\u0443\\u043F\\u0440)\"), /*#__PURE__*/React.createElement(\"th\", null, \"\\u03C3(\\u0434\\u043E\\u043F.\\u043D\\u0430\\u043F\\u0440)\"), /*#__PURE__*/React.createElement(\"th\", null, \"q(\\u0440\\u0430\\u0441\\u043F\\u0440.\\u043D\\u0430\\u0433)\"))), /*#__PURE__*/React.createElement(\"tbody\", null, props.rodsRows.map(rodRow => {\n    if (rodRow.index === props.changingRodIndex) {\n      return /*#__PURE__*/React.createElement(\"tr\", null, /*#__PURE__*/React.createElement(\"td\", null, props.changingRodIndex), /*#__PURE__*/React.createElement(\"td\", null, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        value: props.changingRodInputRow.area,\n        onChange: e => props.changingRodAreaChanged(e.target.value),\n        className: `table-input ${props.changingRodInputRow.isAreaCorrect ? \"\" : \"input-error\"}`\n      })), /*#__PURE__*/React.createElement(\"td\", null, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        value: props.changingRodInputRow.length,\n        onChange: e => props.changingRodLengthChanged(e.target.value),\n        className: `table-input ${props.changingRodInputRow.isLengthCorrect ? \"\" : \"input-error\"}`\n      })), /*#__PURE__*/React.createElement(\"td\", null, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        value: props.changingRodInputRow.modulus,\n        onChange: e => props.changingRodModulusChanged(e.target.value),\n        className: `table-input ${props.changingRodInputRow.isModulusCorrect ? \"\" : \"input-error\"}`\n      })), /*#__PURE__*/React.createElement(\"td\", null, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        value: props.changingRodInputRow.sigma,\n        onChange: e => props.changingRodSigmaChanged(e.target.value),\n        className: `table-input ${props.changingRodInputRow.isSigmaCorrect ? \"\" : \"input-error\"}`\n      })), /*#__PURE__*/React.createElement(\"td\", null, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        value: props.changingRodInputRow.distLoad,\n        onChange: e => props.changingRodDistLoadChanged(e.target.value),\n        className: `table-input ${props.changingRodInputRow.isDistLoadCorrect ? \"\" : \"input-error\"}`\n      })), /*#__PURE__*/React.createElement(\"td\", null, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => {\n          props.changingRodSubmit();\n          props.clearSolution();\n        }\n      }, \"\\u2713\")));\n    }\n\n    return /*#__PURE__*/React.createElement(\"tr\", {\n      key: rodRow.reactKey\n    }, /*#__PURE__*/React.createElement(\"td\", null, rodRow.index), /*#__PURE__*/React.createElement(\"td\", null, rodRow.area), /*#__PURE__*/React.createElement(\"td\", null, rodRow.length), /*#__PURE__*/React.createElement(\"td\", null, rodRow.modulus), /*#__PURE__*/React.createElement(\"td\", null, rodRow.sigma), /*#__PURE__*/React.createElement(\"td\", null, rodRow.distLoad), /*#__PURE__*/React.createElement(\"td\", {\n      className: \"preprocessor__rods-row-buttons\"\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => props.changeRod(rodRow.index)\n    }, \"\\u0418\\u0437\\u043C\\u0435\\u043D\\u0438\\u0442\\u044C\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => {\n        props.removeRodRow(rodRow.index);\n        props.changeLeftSupport(props.leftSupport.isChecked);\n        props.changeRightSupport(props.rightSupport.isChecked);\n        props.checkForError();\n        props.clearSolution();\n      }\n    }, \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\")));\n  }), /*#__PURE__*/React.createElement(\"tr\", null, /*#__PURE__*/React.createElement(\"td\", null, props.rodsRows.length + 1), /*#__PURE__*/React.createElement(\"td\", null, /*#__PURE__*/React.createElement(\"input\", {\n    className: `table-input ${props.newRodInputRow.isAreaCorrect ? \"\" : \"input-error\"}`,\n    type: \"text\",\n    value: props.newRodInputRow.area,\n    onChange: e => {\n      props.newRodAreaChanged(e.target.value);\n    }\n  })), /*#__PURE__*/React.createElement(\"td\", null, /*#__PURE__*/React.createElement(\"input\", {\n    className: `table-input ${props.newRodInputRow.isLengthCorrect ? \"\" : \"input-error\"}`,\n    type: \"text\",\n    value: props.newRodInputRow.length,\n    onChange: e => {\n      props.newRodLengthChanged(e.target.value);\n    }\n  })), /*#__PURE__*/React.createElement(\"td\", null, /*#__PURE__*/React.createElement(\"input\", {\n    className: `table-input ${props.newRodInputRow.isModulusCorrect ? \"\" : \"input-error\"}`,\n    type: \"text\",\n    value: props.newRodInputRow.modulus,\n    onChange: e => {\n      props.newRodModulusChanged(e.target.value);\n    }\n  })), /*#__PURE__*/React.createElement(\"td\", null, /*#__PURE__*/React.createElement(\"input\", {\n    className: `table-input ${props.newRodInputRow.isSigmaCorrect ? \"\" : \"input-error\"}`,\n    type: \"text\",\n    value: props.newRodInputRow.sigma,\n    onChange: e => {\n      props.newRodSigmaChanged(e.target.value);\n    }\n  })), /*#__PURE__*/React.createElement(\"td\", null, /*#__PURE__*/React.createElement(\"input\", {\n    className: `table-input ${props.newRodInputRow.isDistLoadCorrect ? \"\" : \"input-error\"}`,\n    type: \"text\",\n    value: props.newRodInputRow.distLoad,\n    onChange: e => {\n      props.newRodDistLoadChanged(e.target.value);\n    }\n  })), /*#__PURE__*/React.createElement(\"td\", {\n    className: \"preprocessor__rods-add-rod-button-td\"\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"preprocessor__rods-add-rod-button\",\n    onClick: () => {\n      props.addRod();\n      props.changeLeftSupport(props.leftSupport.isChecked);\n      props.changeRightSupport(props.rightSupport.isChecked);\n      props.checkForError();\n      props.clearSolution();\n    }\n  }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0441\\u0442\\u0435\\u0440\\u0436\\u0435\\u043D\\u044C\")))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"preprocessor__nodes\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"preprocessor__title\"\n  }, \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0432 \\u0442\\u0430\\u0431\\u043B\\u0438\\u0446\\u0443 \\u043F\\u0430\\u0440\\u0430\\u043C\\u0435\\u0442\\u0440\\u044B \\u0443\\u0437\\u043B\\u043E\\u0432. \\u0415\\u0441\\u043B\\u0438 \\u0432\\u044B \\u0432\\u0432\\u0435\\u0434\\u0435\\u0442\\u0435 \\u043D\\u043E\\u043C\\u0435\\u0440 \\u0443\\u0437\\u043B\\u0430, \\u043E\\u0442\\u0441\\u0443\\u0442\\u0441\\u0442\\u0432\\u0443\\u044E\\u0449\\u0438\\u0439 \\u0432 \\u043A\\u043E\\u043D\\u0441\\u0442\\u0440\\u0443\\u043A\\u0446\\u0438\\u0438, \\u0442\\u043E \\u0432\\u043E\\u0437\\u043D\\u0438\\u043A\\u043D\\u0435\\u0442 \\u043E\\u0448\\u0438\\u0431\\u043A\\u0430\"), /*#__PURE__*/React.createElement(\"table\", {\n    className: \"preprocessor__nodes-table\"\n  }, /*#__PURE__*/React.createElement(\"thead\", null, /*#__PURE__*/React.createElement(\"tr\", null, /*#__PURE__*/React.createElement(\"th\", null, \"\\u0423\\u0437\\u0435\\u043B\"), /*#__PURE__*/React.createElement(\"th\", null, \"\\u0421\\u043E\\u0441\\u0440\\u0435\\u0434\\u043E\\u0442\\u043E\\u0447\\u0435\\u043D\\u043D\\u0430\\u044F \\u043D\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430\"))), /*#__PURE__*/React.createElement(\"tbody\", null, props.nodesRows.map((nodeRow, index) => {\n    if (index === props.changingNodeIndex) {\n      return /*#__PURE__*/React.createElement(\"tr\", null, /*#__PURE__*/React.createElement(\"td\", null, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        value: props.changingNodeInputRow.nodeNumber,\n        onChange: e => props.changingNodeNumberChanged(e.target.value),\n        className: `table-input ${props.changingNodeInputRow.isNodeNumberCorrect ? \"\" : \"input-error\"}`\n      })), /*#__PURE__*/React.createElement(\"td\", null, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        value: props.changingNodeInputRow.nodeForce,\n        onChange: e => props.changingNodeForceChanged(e.target.value),\n        className: `table-input ${props.changingNodeInputRow.isNodeForceCorrect ? \"\" : \"input-error\"}`\n      })), /*#__PURE__*/React.createElement(\"td\", null, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => {\n          props.changingNodeSubmit();\n          props.checkForError();\n          props.clearSolution();\n        }\n      }, \"\\u2713\")));\n    }\n\n    return /*#__PURE__*/React.createElement(\"tr\", null, /*#__PURE__*/React.createElement(\"td\", null, nodeRow.nodeNumber), /*#__PURE__*/React.createElement(\"td\", null, nodeRow.nodeForce), /*#__PURE__*/React.createElement(\"td\", {\n      className: \"preprocessor__nodes-button-td\"\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => {\n        props.changeNode(index);\n        props.checkForError();\n        props.clearSolution();\n      }\n    }, \"\\u0418\\u0437\\u043C\\u0435\\u043D\\u0438\\u0442\\u044C\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => {\n        props.removeNodeRow(index);\n        props.checkForError();\n        props.clearSolution();\n      }\n    }, \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\")));\n  }), /*#__PURE__*/React.createElement(\"tr\", null, /*#__PURE__*/React.createElement(\"td\", null, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: props.newNodeInputRow.nodeNumber,\n    onChange: e => props.newNodeNumberChanged(e.target.value),\n    className: `table-input ${props.newNodeInputRow.isNodeNumberCorrect ? \"\" : \"input-error\"}`\n  })), /*#__PURE__*/React.createElement(\"td\", null, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: props.newNodeInputRow.nodeForce,\n    onChange: e => props.newNodeForceChanged(e.target.value),\n    className: `table-input ${props.newNodeInputRow.isNodeForceCorrect ? \"\" : \"input-error\"}`\n  })), /*#__PURE__*/React.createElement(\"td\", {\n    className: \"preprocessor__nodes-button-td\"\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      props.addNodeRow();\n      props.checkForError();\n    }\n  }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0443\\u0437\\u0435\\u043B\")))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"preprocessor__rods-interface\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"preprocessor__rods-supports\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"\\u041F\\u0440\\u0438\\u0441\\u0443\\u0442\\u0441\\u0442\\u0432\\u0443\\u0435\\u0442 \\u043B\\u0435\\u0432\\u0430\\u044F \\u043E\\u043F\\u043E\\u0440\\u0430\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\" // className={styles.scale}\n    ,\n    checked: props.leftSupport.isChecked,\n    onChange: e => {\n      props.changeLeftSupport(e.target.checked);\n      props.clearSolution();\n      props.checkForError();\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", null, \"\\u041F\\u0440\\u0438\\u0441\\u0443\\u0442\\u0441\\u0442\\u0432\\u0443\\u0435\\u0442 \\u043F\\u0440\\u0430\\u0432\\u0430\\u044F \\u043E\\u043F\\u043E\\u0440\\u0430\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    checked: props.rightSupport.isChecked,\n    onChange: e => {\n      props.changeRightSupport(e.target.checked);\n      props.clearSolution();\n      props.checkForError();\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"preprocessor__rods-buttons\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"button\", {\n    disabled: !props.isReadyForSave,\n    onClick: props.downloadConstruction\n  }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C \\u0444\\u0430\\u0439\\u043B \\u043A\\u043E\\u043D\\u0441\\u0442\\u0440\\u0443\\u043A\\u0446\\u0438\\u0438\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"preprocessor__rods-openfile\"\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"openfile\"\n  }, \"\\u041E\\u0442\\u043A\\u0440\\u044B\\u0442\\u044C \\u043A\\u043E\\u043D\\u0441\\u0442\\u0440\\u0443\\u043A\\u0446\\u0438\\u044E\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"openfile\",\n    type: \"file\",\n    accept: \".json\",\n    ref: openFileInputRef,\n    onFocus: () => {\n      openFileInputRef.current.value = null;\n    },\n    onChange: () => {\n      props.handleFileOpening(openFileInputRef);\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"button\", {\n    // disabled={!props.isReadyForSave}\n    onClick: () => {\n      if (props.errorMessage.length > 0 || !props.isReadyForSave) {\n        alert(props.errorMessage);\n      } else {\n        props.showCanvas();\n      }\n    }\n  }, \"\\u0417\\u0430\\u043F\\u0443\\u0441\\u0442\\u0438\\u0442\\u044C \\u043E\\u0442\\u0440\\u0438\\u0441\\u043E\\u0432\\u043A\\u0443\")))), props.isCanvasShown ? /*#__PURE__*/React.createElement(ConstructionCanvas, {\n    data: props\n  }) : null);\n}\n\n_s(Preprocessor, \"Hgv6guwPe8biz9trcYEwWTrEfTE=\");\n\n_c = Preprocessor;\n\nconst mapStateToProps = state => {\n  return {\n    rodsRows: state.rodsAndNodes.rodsRows,\n    newRodInputRow: state.rodsAndNodes.newRodInputRow,\n    changingRodIndex: state.rodsAndNodes.changingRodIndex,\n    changingRodInputRow: state.rodsAndNodes.changingRodInputRow,\n    nodesRows: state.rodsAndNodes.nodesRows,\n    newNodeInputRow: state.rodsAndNodes.newNodeInputRow,\n    changingNodeIndex: state.rodsAndNodes.changingNodeIndex,\n    changingNodeInputRow: state.rodsAndNodes.changingNodeInputRow,\n    leftSupport: state.rodsAndNodes.leftSupport,\n    rightSupport: state.rodsAndNodes.rightSupport,\n    isError: state.rodsAndNodes.isError,\n    errorMessage: state.rodsAndNodes.errorMessage,\n    isReadyForSave: state.rodsAndNodes.isReadyForSave,\n    isCanvasShown: state.rodsAndNodes.isCanvasShown\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addRod: () => dispatch(addNewRod()),\n    newRodAreaChanged: value => {\n      dispatch(newRodAreaChanged(value));\n    },\n    newRodLengthChanged: value => dispatch(newRodLengthChanged(value)),\n    newRodModulusChanged: value => dispatch(newRodModulusChanged(value)),\n    newRodSigmaChanged: value => dispatch(newRodSigmaChanged(value)),\n    newRodDistLoadChanged: value => dispatch(newRodDistLoadChanged(value)),\n    changeRod: index => dispatch(changeRod(index)),\n    changingRodAreaChanged: value => dispatch(changingRodAreaChanged(value)),\n    changingRodLengthChanged: value => dispatch(changingRodLengthChanged(value)),\n    changingRodModulusChanged: value => dispatch(changingRodModulusChanged(value)),\n    changingRodSigmaChanged: value => dispatch(changingRodSigmaChanged(value)),\n    changingRodDistLoadChanged: value => dispatch(changingRodDistLoadChanged(value)),\n    changingRodSubmit: () => dispatch(changingRodSubmit()),\n    removeRodRow: index => dispatch(removeRodRow(index)),\n    addNodeRow: () => dispatch(addNodeRow()),\n    removeNodeRow: index => dispatch(removeNodeRow(index)),\n    changeNode: index => dispatch(changeNode(index)),\n    newNodeNumberChanged: value => dispatch(newNodeNumberChanged(value)),\n    newNodeForceChanged: value => dispatch(newNodeForceChanged(value)),\n    changingNodeNumberChanged: value => dispatch(changingNodeNumberChanged(value)),\n    changingNodeForceChanged: value => dispatch(changingNodeForceChanged(value)),\n    changingNodeSubmit: () => dispatch(changingNodeSubmit()),\n    changeLeftSupport: isChecked => dispatch(changeLeftSupport(isChecked)),\n    changeRightSupport: isChecked => dispatch(changeRightSupport(isChecked)),\n    checkForError: () => dispatch(checkForError()),\n    downloadConstruction: () => dispatch(downloadConstruction()),\n    handleFileOpening: inputRef => dispatch(handleFileOpening(inputRef)),\n    clearSolution: () => dispatch(clearSolution()),\n    showCanvas: () => dispatch(showCanvas())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Preprocessor);\n\nvar _c;\n\n$RefreshReg$(_c, \"Preprocessor\");","map":{"version":3,"sources":["C:/Users/glush/Desktop/react-sapr-main/src/components/Preprocessor/Preprocessor.js"],"names":["React","useRef","connect","addNewRod","newRodAreaChanged","newRodLengthChanged","newRodModulusChanged","newRodSigmaChanged","newRodDistLoadChanged","changeRod","changingRodAreaChanged","changingRodLengthChanged","changingRodModulusChanged","changingRodSigmaChanged","changingRodDistLoadChanged","changingRodSubmit","removeRodRow","addNodeRow","newNodeNumberChanged","newNodeForceChanged","removeNodeRow","changeNode","changingNodeNumberChanged","changingNodeForceChanged","changingNodeSubmit","changeLeftSupport","changeRightSupport","checkForError","downloadConstruction","handleFileOpening","clearSolution","showCanvas","ConstructionCanvas","Preprocessor","props","openFileInputRef","rodsRows","map","rodRow","index","changingRodIndex","changingRodInputRow","area","e","target","value","isAreaCorrect","length","isLengthCorrect","modulus","isModulusCorrect","sigma","isSigmaCorrect","distLoad","isDistLoadCorrect","reactKey","leftSupport","isChecked","rightSupport","newRodInputRow","addRod","nodesRows","nodeRow","changingNodeIndex","changingNodeInputRow","nodeNumber","isNodeNumberCorrect","nodeForce","isNodeForceCorrect","newNodeInputRow","checked","isReadyForSave","current","errorMessage","alert","isCanvasShown","mapStateToProps","state","rodsAndNodes","isError","mapDispatchToProps","dispatch","inputRef"],"mappings":"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","sourcesContent":["import React, { useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n    addNewRod,\n    newRodAreaChanged,\n    newRodLengthChanged,\n    newRodModulusChanged,\n    newRodSigmaChanged,\n    newRodDistLoadChanged,\n    changeRod,\n    changingRodAreaChanged,\n    changingRodLengthChanged,\n    changingRodModulusChanged,\n    changingRodSigmaChanged,\n    changingRodDistLoadChanged,\n    changingRodSubmit,\n    removeRodRow,\n    addNodeRow,\n    newNodeNumberChanged,\n    newNodeForceChanged,\n    removeNodeRow,\n    changeNode,\n    changingNodeNumberChanged,\n    changingNodeForceChanged,\n    changingNodeSubmit,\n    changeLeftSupport,\n    changeRightSupport,\n    checkForError,\n    downloadConstruction,\n    handleFileOpening,\n    clearSolution,\n    showCanvas,\n} from \"../../reducers/reducer\";\nimport ConstructionCanvas from \"./ConstructionCanvas\";\nimport \"./Preprocessor.scss\";\n\nfunction Preprocessor(props) {\n    const openFileInputRef = useRef(null);\n    return (\n        <div className=\"preprocessor__body\">\n            <div className=\"preprocessor__rods\">\n                <div className=\"preprocessor__title\">Введите в таблицу параметры стержней</div>\n                <table class=\"preprocessor__rods-table\">\n                    <thead>\n                        <tr>\n                            <th>Стержень</th>\n                            <th>A(площадь)</th>\n                            <th>L(длина)</th>\n                            <th>E(мод.упр)</th>\n                            <th>σ(доп.напр)</th>\n                            <th>q(распр.наг)</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {props.rodsRows.map((rodRow) => {\n                            if (rodRow.index === props.changingRodIndex) {\n                                return (\n                                    <tr>\n                                        <td>{props.changingRodIndex}</td>\n                                        <td>\n                                            <input\n                                                type=\"text\"\n                                                value={\n                                                    props.changingRodInputRow\n                                                        .area\n                                                }\n                                                onChange={(e) =>\n                                                    props.changingRodAreaChanged(\n                                                        e.target.value\n                                                    )\n                                                }\n                                                className={`table-input ${\n                                                    props.changingRodInputRow\n                                                        .isAreaCorrect\n                                                        ? \"\"\n                                                        : \"input-error\"\n                                                }`}\n                                            />\n                                        </td>\n                                        <td>\n                                            <input\n                                                type=\"text\"\n                                                value={\n                                                    props.changingRodInputRow\n                                                        .length\n                                                }\n                                                onChange={(e) =>\n                                                    props.changingRodLengthChanged(\n                                                        e.target.value\n                                                    )\n                                                }\n                                                className={`table-input ${\n                                                    props.changingRodInputRow\n                                                        .isLengthCorrect\n                                                        ? \"\"\n                                                        : \"input-error\"\n                                                }`}\n                                            />\n                                        </td>\n                                        <td>\n                                            <input\n                                                type=\"text\"\n                                                value={\n                                                    props.changingRodInputRow\n                                                        .modulus\n                                                }\n                                                onChange={(e) =>\n                                                    props.changingRodModulusChanged(\n                                                        e.target.value\n                                                    )\n                                                }\n                                                className={`table-input ${\n                                                    props.changingRodInputRow\n                                                        .isModulusCorrect\n                                                        ? \"\"\n                                                        : \"input-error\"\n                                                }`}\n                                            />\n                                        </td>\n                                        <td>\n                                            <input\n                                                type=\"text\"\n                                                value={\n                                                    props.changingRodInputRow\n                                                        .sigma\n                                                }\n                                                onChange={(e) =>\n                                                    props.changingRodSigmaChanged(\n                                                        e.target.value\n                                                    )\n                                                }\n                                                className={`table-input ${\n                                                    props.changingRodInputRow\n                                                        .isSigmaCorrect\n                                                        ? \"\"\n                                                        : \"input-error\"\n                                                }`}\n                                            />\n                                        </td>\n                                        <td>\n                                            <input\n                                                type=\"text\"\n                                                value={\n                                                    props.changingRodInputRow\n                                                        .distLoad\n                                                }\n                                                onChange={(e) =>\n                                                    props.changingRodDistLoadChanged(\n                                                        e.target.value\n                                                    )\n                                                }\n                                                className={`table-input ${\n                                                    props.changingRodInputRow\n                                                        .isDistLoadCorrect\n                                                        ? \"\"\n                                                        : \"input-error\"\n                                                }`}\n                                            />\n                                        </td>\n                                        <td\n                                        // className={styles.rodRowButtons}\n                                        >\n                                            <button\n                                                onClick={() => {\n                                                    props.changingRodSubmit();\n                                                    props.clearSolution();\n                                                }}>\n                                                ✓\n                                            </button>\n                                        </td>\n                                    </tr>\n                                );\n                            }\n                            return (\n                                <tr key={rodRow.reactKey}>\n                                    <td>{rodRow.index}</td>\n                                    <td>{rodRow.area}</td>\n                                    <td>{rodRow.length}</td>\n                                    <td>{rodRow.modulus}</td>\n                                    <td>{rodRow.sigma}</td>\n                                    <td>{rodRow.distLoad}</td>\n                                    <td className=\"preprocessor__rods-row-buttons\">\n                                        <button\n                                            onClick={() =>\n                                                props.changeRod(rodRow.index)\n                                            }>\n                                            Изменить\n                                        </button>\n                                        <button\n                                            onClick={() => {\n                                                props.removeRodRow(\n                                                    rodRow.index\n                                                );\n                                                props.changeLeftSupport(\n                                                    props.leftSupport.isChecked\n                                                );\n                                                props.changeRightSupport(\n                                                    props.rightSupport.isChecked\n                                                );\n                                                props.checkForError();\n                                                props.clearSolution();\n                                            }}>\n                                            Удалить\n                                        </button>\n                                    </td>\n                                </tr>\n                            );\n                        })}\n                        <tr>\n                            <td>{props.rodsRows.length + 1}</td>\n                            <td>\n                                <input\n                                    className={`table-input ${\n                                        props.newRodInputRow.isAreaCorrect\n                                            ? \"\"\n                                            : \"input-error\"\n                                    }`}\n                                    type=\"text\"\n                                    value={props.newRodInputRow.area}\n                                    onChange={(e) => {\n                                        props.newRodAreaChanged(e.target.value);\n                                    }}\n                                />\n                            </td>\n                            <td>\n                                <input\n                                    className={`table-input ${\n                                        props.newRodInputRow.isLengthCorrect\n                                            ? \"\"\n                                            : \"input-error\"\n                                    }`}\n                                    type=\"text\"\n                                    value={props.newRodInputRow.length}\n                                    onChange={(e) => {\n                                        props.newRodLengthChanged(\n                                            e.target.value\n                                        );\n                                    }}\n                                />\n                            </td>\n                            <td>\n                                <input\n                                    className={`table-input ${\n                                        props.newRodInputRow.isModulusCorrect\n                                            ? \"\"\n                                            : \"input-error\"\n                                    }`}\n                                    type=\"text\"\n                                    value={props.newRodInputRow.modulus}\n                                    onChange={(e) => {\n                                        props.newRodModulusChanged(\n                                            e.target.value\n                                        );\n                                    }}\n                                />\n                            </td>\n                            <td>\n                                <input\n                                    className={`table-input ${\n                                        props.newRodInputRow.isSigmaCorrect\n                                            ? \"\"\n                                            : \"input-error\"\n                                    }`}\n                                    type=\"text\"\n                                    value={props.newRodInputRow.sigma}\n                                    onChange={(e) => {\n                                        props.newRodSigmaChanged(\n                                            e.target.value\n                                        );\n                                    }}\n                                />\n                            </td>\n                            <td>\n                                <input\n                                    className={`table-input ${\n                                        props.newRodInputRow.isDistLoadCorrect\n                                            ? \"\"\n                                            : \"input-error\"\n                                    }`}\n                                    type=\"text\"\n                                    value={props.newRodInputRow.distLoad}\n                                    onChange={(e) => {\n                                        props.newRodDistLoadChanged(\n                                            e.target.value\n                                        );\n                                    }}\n                                />\n                            </td>\n                            <td className=\"preprocessor__rods-add-rod-button-td\">\n                                <button\n                                    className=\"preprocessor__rods-add-rod-button\"\n                                    onClick={() => {\n                                        props.addRod();\n                                        props.changeLeftSupport(\n                                            props.leftSupport.isChecked\n                                        );\n                                        props.changeRightSupport(\n                                            props.rightSupport.isChecked\n                                        );\n                                        props.checkForError();\n                                        props.clearSolution();\n                                    }}>\n                                    Добавить стержень\n                                </button>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div className=\"preprocessor__nodes\">\n            <div className=\"preprocessor__title\">Введите в таблицу параметры узлов. Если вы введете номер узла, отсутствующий в конструкции, то возникнет ошибка</div>\n                <table className=\"preprocessor__nodes-table\">\n                    <thead>\n                        <tr>\n                            <th>Узел</th>\n                            <th>Сосредоточенная нагрузка</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {props.nodesRows.map((nodeRow, index) => {\n                            if (index === props.changingNodeIndex) {\n                                return (\n                                    <tr>\n                                        <td>\n                                            <input\n                                                type=\"text\"\n                                                value={\n                                                    props.changingNodeInputRow\n                                                        .nodeNumber\n                                                }\n                                                onChange={(e) =>\n                                                    props.changingNodeNumberChanged(\n                                                        e.target.value\n                                                    )\n                                                }\n                                                className={`table-input ${\n                                                    props.changingNodeInputRow\n                                                        .isNodeNumberCorrect\n                                                        ? \"\"\n                                                        : \"input-error\"\n                                                }`}\n                                            />\n                                        </td>\n                                        <td>\n                                            <input\n                                                type=\"text\"\n                                                value={\n                                                    props.changingNodeInputRow\n                                                        .nodeForce\n                                                }\n                                                onChange={(e) =>\n                                                    props.changingNodeForceChanged(\n                                                        e.target.value\n                                                    )\n                                                }\n                                                className={`table-input ${\n                                                    props.changingNodeInputRow\n                                                        .isNodeForceCorrect\n                                                        ? \"\"\n                                                        : \"input-error\"\n                                                }`}\n                                            />\n                                        </td>\n                                        <td\n                                        // className={styles.rodRowButtons}\n                                        >\n                                            <button\n                                                onClick={() => {\n                                                    props.changingNodeSubmit();\n                                                    props.checkForError();\n                                                    props.clearSolution();\n                                                }}>\n                                                ✓\n                                            </button>\n                                        </td>\n                                    </tr>\n                                );\n                            }\n                            return (\n                                <tr>\n                                    <td>{nodeRow.nodeNumber}</td>\n                                    <td>{nodeRow.nodeForce}</td>\n                                    <td className=\"preprocessor__nodes-button-td\">\n                                        <button\n                                            onClick={() => {\n                                                props.changeNode(index);\n                                                props.checkForError();\n                                                props.clearSolution();\n                                            }}>\n                                            Изменить\n                                        </button>\n                                        <button\n                                            onClick={() => {\n                                                props.removeNodeRow(index);\n                                                props.checkForError();\n                                                props.clearSolution();\n                                            }}>\n                                            Удалить\n                                        </button>\n                                    </td>\n                                </tr>\n                            );\n                        })}\n                        <tr>\n                            <td>\n                                <input\n                                    type=\"text\"\n                                    value={props.newNodeInputRow.nodeNumber}\n                                    onChange={(e) =>\n                                        props.newNodeNumberChanged(\n                                            e.target.value\n                                        )\n                                    }\n                                    className={`table-input ${\n                                        props.newNodeInputRow\n                                            .isNodeNumberCorrect\n                                            ? \"\"\n                                            : \"input-error\"\n                                    }`}\n                                />\n                            </td>\n                            <td>\n                                <input\n                                    type=\"text\"\n                                    value={props.newNodeInputRow.nodeForce}\n                                    onChange={(e) =>\n                                        props.newNodeForceChanged(\n                                            e.target.value\n                                        )\n                                    }\n                                    className={`table-input ${\n                                        props.newNodeInputRow.isNodeForceCorrect\n                                            ? \"\"\n                                            : \"input-error\"\n                                    }`}\n                                />\n                            </td>\n                            <td className=\"preprocessor__nodes-button-td\">\n                                <button\n                                    onClick={() => {\n                                        props.addNodeRow();\n                                        props.checkForError();\n                                    }}>\n                                    Добавить узел\n                                </button>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div className=\"preprocessor__rods-interface\">\n                <div className=\"preprocessor__rods-supports\">\n                    <div>\n                        Присутствует левая опора\n                        <input\n                            type=\"checkbox\"\n                            // className={styles.scale}\n                            checked={props.leftSupport.isChecked}\n                            onChange={(e) => {\n                                props.changeLeftSupport(e.target.checked);\n                                props.clearSolution();\n                                props.checkForError();\n                            }}\n                        />\n                    </div>\n                    <div>\n                        Присутствует правая опора\n                        <input\n                            type=\"checkbox\"\n                            checked={props.rightSupport.isChecked}\n                            onChange={(e) => {\n                                props.changeRightSupport(e.target.checked);\n                                props.clearSolution();\n                                props.checkForError();\n                            }}\n                        />\n                    </div>\n                </div>\n                <div className=\"preprocessor__rods-buttons\">\n                    <div>\n                        <button\n                            disabled={!props.isReadyForSave}\n                            onClick={props.downloadConstruction}>\n                            Сохранить файл конструкции\n                        </button>\n                    </div>\n                    <div className=\"preprocessor__rods-openfile\">\n                        <label htmlFor=\"openfile\">Открыть конструкцию</label>\n                        <input\n                            id=\"openfile\"\n                            type=\"file\"\n                            accept=\".json\"\n                            ref={openFileInputRef}\n                            onFocus={() => {\n                                openFileInputRef.current.value = null;\n                            }}\n                            onChange={() => {\n                                props.handleFileOpening(openFileInputRef);\n                            }}\n                        />\n                    </div>\n                    <div>\n                        <button\n                            // disabled={!props.isReadyForSave}\n                            onClick={() => {\n                                if (\n                                    props.errorMessage.length > 0 ||\n                                    !props.isReadyForSave\n                                ) {\n                                    alert(props.errorMessage);\n                                } else {\n                                    props.showCanvas();\n                                }\n                            }}>\n                            Запустить отрисовку\n                        </button>\n                    </div>\n                </div>\n            </div>\n            {props.isCanvasShown ? <ConstructionCanvas data={props} /> : null}\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        rodsRows: state.rodsAndNodes.rodsRows,\n        newRodInputRow: state.rodsAndNodes.newRodInputRow,\n        changingRodIndex: state.rodsAndNodes.changingRodIndex,\n        changingRodInputRow: state.rodsAndNodes.changingRodInputRow,\n\n        nodesRows: state.rodsAndNodes.nodesRows,\n        newNodeInputRow: state.rodsAndNodes.newNodeInputRow,\n        changingNodeIndex: state.rodsAndNodes.changingNodeIndex,\n        changingNodeInputRow: state.rodsAndNodes.changingNodeInputRow,\n\n        leftSupport: state.rodsAndNodes.leftSupport,\n        rightSupport: state.rodsAndNodes.rightSupport,\n\n        isError: state.rodsAndNodes.isError,\n        errorMessage: state.rodsAndNodes.errorMessage,\n        isReadyForSave: state.rodsAndNodes.isReadyForSave,\n        isCanvasShown: state.rodsAndNodes.isCanvasShown,\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addRod: () => dispatch(addNewRod()),\n        newRodAreaChanged: (value) => {\n            dispatch(newRodAreaChanged(value));\n        },\n        newRodLengthChanged: (value) => dispatch(newRodLengthChanged(value)),\n        newRodModulusChanged: (value) => dispatch(newRodModulusChanged(value)),\n        newRodSigmaChanged: (value) => dispatch(newRodSigmaChanged(value)),\n        newRodDistLoadChanged: (value) =>\n            dispatch(newRodDistLoadChanged(value)),\n        changeRod: (index) => dispatch(changeRod(index)),\n        changingRodAreaChanged: (value) =>\n            dispatch(changingRodAreaChanged(value)),\n        changingRodLengthChanged: (value) =>\n            dispatch(changingRodLengthChanged(value)),\n        changingRodModulusChanged: (value) =>\n            dispatch(changingRodModulusChanged(value)),\n        changingRodSigmaChanged: (value) =>\n            dispatch(changingRodSigmaChanged(value)),\n        changingRodDistLoadChanged: (value) =>\n            dispatch(changingRodDistLoadChanged(value)),\n        changingRodSubmit: () => dispatch(changingRodSubmit()),\n        removeRodRow: (index) => dispatch(removeRodRow(index)),\n\n        addNodeRow: () => dispatch(addNodeRow()),\n        removeNodeRow: (index) => dispatch(removeNodeRow(index)),\n        changeNode: (index) => dispatch(changeNode(index)),\n        newNodeNumberChanged: (value) => dispatch(newNodeNumberChanged(value)),\n        newNodeForceChanged: (value) => dispatch(newNodeForceChanged(value)),\n        changingNodeNumberChanged: (value) =>\n            dispatch(changingNodeNumberChanged(value)),\n        changingNodeForceChanged: (value) =>\n            dispatch(changingNodeForceChanged(value)),\n        changingNodeSubmit: () => dispatch(changingNodeSubmit()),\n        changeLeftSupport: (isChecked) =>\n            dispatch(changeLeftSupport(isChecked)),\n        changeRightSupport: (isChecked) =>\n            dispatch(changeRightSupport(isChecked)),\n        checkForError: () => dispatch(checkForError()),\n        downloadConstruction: () => dispatch(downloadConstruction()),\n        handleFileOpening: (inputRef) => dispatch(handleFileOpening(inputRef)),\n        clearSolution: () => dispatch(clearSolution()),\n        showCanvas: () => dispatch(showCanvas()),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Preprocessor);\n"]},"metadata":{},"sourceType":"module"}