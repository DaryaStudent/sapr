{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\glush\\\\Desktop\\\\react-sapr-main\\\\src\\\\components\\\\PostProcessor\\\\PostProcessor.js\";\nimport \"./PostProcessor.scss\";\nimport { VictoryChart, VictoryArea } from \"victory\";\nimport { connect } from \"react-redux\";\nimport { fixTail } from \"./../Processor/calculate\";\nimport PostProcessorTable from \"./PostProcessorTable\";\n\nfunction PostProcessor(props) {\n  if (!props.objWithSolutionFunctions) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-processor error\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Error: no result data.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this);\n  }\n\n  const rodsLengths = props.rodsRows.map(stem => stem.length);\n  const rodsSigmas = props.rodsRows.map(stem => stem.sigma);\n  const NxPlotData = [];\n  let xPosForNxPlot = 0;\n  rodsLengths.forEach((rodLength, index) => {\n    const dotsPerStern = 10;\n    const step = rodLength / dotsPerStern;\n    let currentSternXPos = 0;\n\n    for (let i = 0; i < dotsPerStern; i++) {\n      NxPlotData.push({\n        x: xPosForNxPlot + currentSternXPos,\n        y: fixTail(props.objWithSolutionFunctions.N[index](currentSternXPos)),\n        y0: 0\n      });\n      currentSternXPos += step;\n\n      if (i === dotsPerStern - 1) {\n        NxPlotData.push({\n          x: xPosForNxPlot + currentSternXPos,\n          y: fixTail(props.objWithSolutionFunctions.N[index](currentSternXPos)),\n          y0: 0\n        });\n      }\n    }\n\n    xPosForNxPlot += rodLength;\n  });\n  console.log(NxPlotData);\n  const UxPlotData = [];\n  let xPosForUxPlot = 0;\n  rodsLengths.forEach((rodLength, index) => {\n    const dotsPerStern = 10;\n    const step = rodLength / dotsPerStern;\n    let currentSternXPos = 0;\n\n    for (let i = 0; i < dotsPerStern; i++) {\n      UxPlotData.push({\n        x: xPosForUxPlot + currentSternXPos,\n        y: fixTail(props.objWithSolutionFunctions.U[index](currentSternXPos)),\n        y0: 0\n      });\n      currentSternXPos += step;\n\n      if (i === dotsPerStern - 1) {\n        UxPlotData.push({\n          x: xPosForUxPlot + currentSternXPos,\n          y: fixTail(props.objWithSolutionFunctions.U[index](currentSternXPos)),\n          y0: 0\n        });\n      }\n    }\n\n    xPosForUxPlot += rodLength;\n  });\n  const SxPlotData = [];\n  let xPosForSxPlot = 0;\n  rodsLengths.forEach((rodLength, index) => {\n    const dotsPerStern = 10;\n    const step = rodLength / dotsPerStern;\n    let currentSternXPos = 0;\n\n    for (let i = 0; i < dotsPerStern; i++) {\n      SxPlotData.push({\n        x: xPosForSxPlot + currentSternXPos,\n        y: fixTail(props.objWithSolutionFunctions.S[index](currentSternXPos)),\n        y0: 0\n      });\n      currentSternXPos += step;\n\n      if (i === dotsPerStern - 1) {\n        SxPlotData.push({\n          x: xPosForSxPlot + currentSternXPos,\n          y: fixTail(props.objWithSolutionFunctions.S[index](currentSternXPos)),\n          y0: 0\n        });\n      }\n    }\n\n    xPosForSxPlot += rodLength;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"post-processor\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"plots\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"plot\",\n        children: [/*#__PURE__*/_jsxDEV(VictoryChart, {\n          children: /*#__PURE__*/_jsxDEV(VictoryArea, {\n            data: NxPlotData,\n            style: {\n              data: {\n                fill: \"#808080\",\n                fillOpacity: 0.9\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"exact-values\",\n          children: \"N\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"plot\",\n        children: [/*#__PURE__*/_jsxDEV(VictoryChart, {\n          children: /*#__PURE__*/_jsxDEV(VictoryArea, {\n            data: UxPlotData,\n            style: {\n              data: {\n                fill: \"#808080\",\n                fillOpacity: 0.9\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"exact-values\",\n          children: \"U\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"plot\",\n        children: [/*#__PURE__*/_jsxDEV(VictoryChart, {\n          children: /*#__PURE__*/_jsxDEV(VictoryArea, {\n            data: SxPlotData,\n            style: {\n              data: {\n                fill: \"#808080\",\n                fillOpacity: 0.9\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"exact-values\",\n          children: \"\\u03C3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PostProcessorTable, {\n      rodsSigmas: rodsSigmas,\n      rodsLengths: rodsLengths,\n      objWithSolutionFunctions: props.objWithSolutionFunctions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 9\n  }, this);\n}\n\n_c = PostProcessor;\n\nconst mapStateToProps = state => {\n  return {\n    isConstructionComputed: state.rodsAndVortexs.objWithSolutionFunctions,\n    rodsRows: state.rodsAndVortexs.rodsRows,\n    nodesRows: state.rodsAndVortexs.nodesRows,\n    leftSupport: state.rodsAndVortexs.leftSupport,\n    rightSupport: state.rodsAndVortexs.rightSupport,\n    objWithSolutionFunctions: state.rodsAndVortexs.objWithSolutionFunctions\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostProcessor);\n\nvar _c;\n\n$RefreshReg$(_c, \"PostProcessor\");","map":{"version":3,"sources":["C:/Users/glush/Desktop/react-sapr-main/src/components/PostProcessor/PostProcessor.js"],"names":["VictoryChart","VictoryArea","connect","fixTail","PostProcessorTable","PostProcessor","props","objWithSolutionFunctions","rodsLengths","rodsRows","map","stem","length","rodsSigmas","sigma","NxPlotData","xPosForNxPlot","forEach","rodLength","index","dotsPerStern","step","currentSternXPos","i","push","x","y","N","y0","console","log","UxPlotData","xPosForUxPlot","U","SxPlotData","xPosForSxPlot","S","data","fill","fillOpacity","mapStateToProps","state","isConstructionComputed","rodsAndVortexs","nodesRows","leftSupport","rightSupport","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import \"./PostProcessor.scss\";\nimport { VictoryChart, VictoryArea } from \"victory\";\nimport { connect } from \"react-redux\";\nimport { fixTail } from \"./../Processor/calculate\";\nimport PostProcessorTable from \"./PostProcessorTable\";\n\nfunction PostProcessor(props) {\n\n    if (!props.objWithSolutionFunctions) {\n        return (\n            <div className=\"post-processor error\">\n                <div>Error: no result data.</div>\n            </div>\n        );\n    }\n\n    const rodsLengths = props.rodsRows.map((stem) => stem.length);\n    const rodsSigmas = props.rodsRows.map((stem) => stem.sigma);\n    const NxPlotData = [];\n    let xPosForNxPlot = 0;\n    rodsLengths.forEach((rodLength, index) => {\n        const dotsPerStern = 10;\n        const step = rodLength / dotsPerStern;\n        let currentSternXPos = 0;\n        for (let i = 0; i < dotsPerStern; i++) {\n            NxPlotData.push({\n                x: xPosForNxPlot + currentSternXPos,\n                y: fixTail(\n                    props.objWithSolutionFunctions.N[index](currentSternXPos)\n                ),\n                y0: 0,\n            });\n            currentSternXPos += step;\n            if (i === dotsPerStern - 1) {\n                NxPlotData.push({\n                    x: xPosForNxPlot + currentSternXPos,\n                    y: fixTail(\n                        props.objWithSolutionFunctions.N[index](currentSternXPos)\n                    ),\n                    y0: 0,\n                });\n            }\n        }\n        xPosForNxPlot += rodLength;\n    });\n\n    console.log(NxPlotData);\n\n    const UxPlotData = [];\n    let xPosForUxPlot = 0;\n    rodsLengths.forEach((rodLength, index) => {\n        const dotsPerStern = 10;\n        const step = rodLength / dotsPerStern;\n        let currentSternXPos = 0;\n        for (let i = 0; i < dotsPerStern; i++) {\n            UxPlotData.push({\n                x: xPosForUxPlot + currentSternXPos,\n                y: fixTail(\n                    props.objWithSolutionFunctions.U[index](currentSternXPos)\n                ),\n                y0: 0,\n            });\n            currentSternXPos += step;\n            if (i === dotsPerStern - 1) {\n                UxPlotData.push({\n                    x: xPosForUxPlot + currentSternXPos,\n                    y: fixTail(\n                        props.objWithSolutionFunctions.U[index](currentSternXPos)\n                    ),\n                    y0: 0,\n                });\n            }\n        }\n        xPosForUxPlot += rodLength;\n    });\n\n    const SxPlotData = [];\n    let xPosForSxPlot = 0;\n    rodsLengths.forEach((rodLength, index) => {\n        const dotsPerStern = 10;\n        const step = rodLength / dotsPerStern;\n        let currentSternXPos = 0;\n        for (let i = 0; i < dotsPerStern; i++) {\n            SxPlotData.push({\n                x: xPosForSxPlot + currentSternXPos,\n                y: fixTail(\n                    props.objWithSolutionFunctions.S[index](currentSternXPos)\n                ),\n                y0: 0,\n            });\n            currentSternXPos += step;\n            if (i === dotsPerStern - 1) {\n                SxPlotData.push({\n                    x: xPosForSxPlot + currentSternXPos,\n                    y: fixTail(\n                        props.objWithSolutionFunctions.S[index](currentSternXPos)\n                    ),\n                    y0: 0,\n                });\n            }\n        }\n        xPosForSxPlot += rodLength;\n    });\n\n\n    return (\n        <div className=\"post-processor\">\n            <div className=\"plots\">\n                <div className=\"plot\">\n                    <VictoryChart>\n                        <VictoryArea\n                            data={NxPlotData}\n                            style={{\n                                data: { fill: \"#808080\", fillOpacity: 0.9 },\n                            }}\n                        />\n                    </VictoryChart>\n                    <div className=\"exact-values\">\n                        N\n                        </div>\n                </div>\n                <div className=\"plot\">\n                    <VictoryChart >\n                        <VictoryArea\n                            data={UxPlotData}\n                            style={{\n                                data: { fill: \"#808080\", fillOpacity: 0.9 },\n                            }}\n                        />\n                    </VictoryChart>\n                    <div className=\"exact-values\">\n                        U\n                    </div>\n                </div>\n                <div className=\"plot\">\n                    <VictoryChart>\n                        <VictoryArea\n                            data={SxPlotData}\n                            style={{\n                                data: { fill: \"#808080\", fillOpacity: 0.9 },\n                            }}\n                        />\n                    </VictoryChart>\n                    <div className=\"exact-values\">\n                        σ\n                       </div>\n                </div>\n            </div>\n            <PostProcessorTable\n                rodsSigmas={rodsSigmas}\n                rodsLengths={rodsLengths}\n                objWithSolutionFunctions={props.objWithSolutionFunctions}\n            />\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isConstructionComputed: state.rodsAndVortexs.objWithSolutionFunctions,\n        rodsRows: state.rodsAndVortexs.rodsRows,\n        nodesRows: state.rodsAndVortexs.nodesRows,\n        leftSupport: state.rodsAndVortexs.leftSupport,\n        rightSupport: state.rodsAndVortexs.rightSupport,\n        objWithSolutionFunctions: state.rodsAndVortexs.objWithSolutionFunctions,\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostProcessor);\n"]},"metadata":{},"sourceType":"module"}