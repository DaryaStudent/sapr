{"ast":null,"code":"import { v4 as uuidv4 } from \"uuid\";\n\nconst rodsAndNodesReducer = (state = initialState, action) => {\n  let value = action.value;\n  let isCorrect = true;\n\n  switch (action.type) {\n    case NEW_ROD_AREA_CHANGED:\n      if (isNaN(Number(value)) || Number(value) <= 0 && value.length !== 0) {\n        isCorrect = false;\n      }\n\n      return { ...state,\n        newRodInputRow: { ...state.newRodInputRow,\n          area: value,\n          isAreaCorrect: isCorrect\n        }\n      };\n\n    case NEW_ROD_LENGTH_CHANGED:\n      if (isNaN(Number(value)) || Number(value) <= 0 && value.length !== 0) {\n        isCorrect = false;\n      }\n\n      return { ...state,\n        newRodInputRow: { ...state.newRodInputRow,\n          length: value,\n          isLengthCorrect: isCorrect\n        }\n      };\n\n    case NEW_ROD_MODULUS_CHANGED:\n      if (isNaN(Number(value)) || Number(value) <= 0 && value.length !== 0) {\n        isCorrect = false;\n      }\n\n      return { ...state,\n        newRodInputRow: { ...state.newRodInputRow,\n          modulus: value,\n          isModulusCorrect: isCorrect\n        }\n      };\n\n    case NEW_ROD_SIGMA_CHANGED:\n      if (isNaN(Number(value)) || Number(value) <= 0 && value.length !== 0) {\n        isCorrect = false;\n      }\n\n      return { ...state,\n        newRodInputRow: { ...state.newRodInputRow,\n          sigma: value,\n          isSigmaCorrect: isCorrect\n        }\n      };\n\n    case NEW_ROD_DISTLOAD_CHANGED:\n      if (isNaN(Number(value))) {\n        isCorrect = false;\n      }\n\n      return { ...state,\n        newRodInputRow: { ...state.newRodInputRow,\n          distLoad: value,\n          isDistLoadCorrect: isCorrect\n        }\n      };\n\n    case ADD_NEW_ROD:\n      if (state.newRodInputRow.area.length !== 0 && state.newRodInputRow.isAreaCorrect && state.newRodInputRow.length.length !== 0 && state.newRodInputRow.isLengthCorrect && state.newRodInputRow.modulus.length !== 0 && state.newRodInputRow.isModulusCorrect && state.newRodInputRow.sigma.length !== 0 && state.newRodInputRow.isSigmaCorrect && state.newRodInputRow.distLoad.length !== 0 && state.newRodInputRow.isDistLoadCorrect) {\n        const newObj = { ...state,\n          rodsRows: [...state.rodsRows, {\n            index: state.rodsRows.length + 1,\n            area: Number(state.newRodInputRow.area),\n            length: Number(state.newRodInputRow.length),\n            modulus: Number(state.newRodInputRow.modulus),\n            sigma: Number(state.newRodInputRow.sigma),\n            distLoad: Number(state.newRodInputRow.distLoad),\n            reactKey: uuidv4()\n          }],\n          newRodInputRow: {\n            area: \"\",\n            isAreaCorrect: true,\n            length: \"\",\n            isLengthCorrect: true,\n            modulus: \"\",\n            isModulusCorrect: true,\n            sigma: \"\",\n            isSigmaCorrect: true,\n            distLoad: \"\",\n            isDistLoadCorrect: true\n          }\n        };\n        return newObj;\n      } else {\n        return { ...state,\n          newRodInputRow: { ...state.newRodInputRow,\n            isAreaCorrect: state.newRodInputRow.area.length !== 0 && state.newRodInputRow.isAreaCorrect,\n            isLengthCorrect: state.newRodInputRow.length.length !== 0 && state.newRodInputRow.isLengthCorrect,\n            isModulusCorrect: state.newRodInputRow.modulus.length !== 0 && state.newRodInputRow.isModulusCorrect,\n            isSigmaCorrect: state.newRodInputRow.sigma.length !== 0 && state.newRodInputRow.isSigmaCorrect,\n            isDistLoadCorrect: state.newRodInputRow.distLoad.length !== 0 && state.newRodInputRow.isDistLoadCorrect\n          }\n        };\n      }\n\n    case CHANGE_ROD:\n      return { ...state,\n        changingRodIndex: action.index,\n        changingRodInputRow: { ...state.changingRodInputRow,\n          area: state.rodsRows[action.index - 1].area,\n          length: state.rodsRows[action.index - 1].length,\n          modulus: state.rodsRows[action.index - 1].modulus,\n          sigma: state.rodsRows[action.index - 1].sigma,\n          distLoad: state.rodsRows[action.index - 1].distLoad\n        }\n      };\n\n    case CHANGING_ROD_AREA_CHANGED:\n      if (isNaN(Number(value)) || Number(value) <= 0) {\n        isCorrect = false;\n      }\n\n      return { ...state,\n        changingRodInputRow: { ...state.changingRodInputRow,\n          area: value,\n          isAreaCorrect: isCorrect\n        }\n      };\n\n    case CHANGING_ROD_LENGTH_CHANGED:\n      if (isNaN(Number(value)) || Number(value) <= 0 && value.length !== 0) {\n        isCorrect = false;\n      }\n\n      return { ...state,\n        changingRodInputRow: { ...state.changingRodInputRow,\n          length: value,\n          isLengthCorrect: isCorrect\n        }\n      };\n\n    case CHANGING_ROD_MODULUS_CHANGED:\n      if (isNaN(Number(value)) || Number(value) <= 0 && value.length !== 0) {\n        isCorrect = false;\n      }\n\n      return { ...state,\n        changingRodInputRow: { ...state.changingRodInputRow,\n          modulus: value,\n          isModulusCorrect: isCorrect\n        }\n      };\n\n    case CHANGING_ROD_SIGMA_CHANGED:\n      if (isNaN(Number(value)) || Number(value) <= 0 && value.length !== 0) {\n        isCorrect = false;\n      }\n\n      return { ...state,\n        changingRodInputRow: { ...state.changingRodInputRow,\n          sigma: value,\n          isSigmaCorrect: isCorrect\n        }\n      };\n\n    case CHANGING_ROD_DISTLOAD_CHANGED:\n      if (isNaN(Number(value))) {\n        isCorrect = false;\n      }\n\n      return { ...state,\n        changingRodInputRow: { ...state.changingRodInputRow,\n          distLoad: value,\n          isDistLoadCorrect: isCorrect\n        }\n      };\n\n    case CHANGING_ROD_SUBMIT:\n      {\n        if (state.changingRodInputRow.area.length !== 0 && state.changingRodInputRow.isAreaCorrect && state.changingRodInputRow.length.length !== 0 && state.changingRodInputRow.isLengthCorrect && state.changingRodInputRow.modulus.length !== 0 && state.changingRodInputRow.isModulusCorrect && state.changingRodInputRow.sigma.length !== 0 && state.changingRodInputRow.isSigmaCorrect && state.changingRodInputRow.distLoad.length !== 0 && state.changingRodInputRow.isDistLoadCorrect) {\n          const changedRodData = {\n            index: state.changingRodIndex,\n            area: Number(state.changingRodInputRow.area),\n            length: Number(state.changingRodInputRow.length),\n            modulus: Number(state.changingRodInputRow.modulus),\n            sigma: Number(state.changingRodInputRow.sigma),\n            distLoad: Number(state.changingRodInputRow.distLoad)\n          };\n          let changedRodsRows = JSON.parse(JSON.stringify(state.rodsRows));\n          changedRodsRows.splice(state.changingRodIndex - 1, 1, changedRodData);\n          const newObj = { ...state,\n            rodsRows: changedRodsRows,\n            changingRodIndex: null,\n            changingRodInputRow: {\n              area: \"\",\n              isAreaCorrect: true,\n              length: \"\",\n              isLengthCorrect: true,\n              modulus: \"\",\n              isModulusCorrect: true,\n              sigma: \"\",\n              isSigmaCorrect: true,\n              distLoad: \"\",\n              isDistLoadCorrect: true\n            }\n          };\n          return newObj;\n        } else {\n          return { ...state,\n            changingRodInputRow: { ...state.changingRodInputRow,\n              isAreaCorrect: state.changingRodInputRow.area.length !== 0 && state.changingRodInputRow.isAreaCorrect,\n              isLengthCorrect: state.changingRodInputRow.length.length !== 0 && state.changingRodInputRow.isLengthCorrect,\n              isModulusCorrect: state.changingRodInputRow.modulus.length !== 0 && state.changingRodInputRow.isModulusCorrect,\n              isSigmaCorrect: state.changingRodInputRow.sigma.length !== 0 && state.changingRodInputRow.isSigmaCorrect,\n              isDistLoadCorrect: state.changingRodInputRow.distLoad.length !== 0 && state.changingRodInputRow.isDistLoadCorrect\n            }\n          };\n        }\n      }\n\n    case REMOVE_ROD_ROW:\n      let filteredRodsRows = [...state.rodsRows];\n      filteredRodsRows.splice(action.index - 1, 1);\n      filteredRodsRows.forEach((rodRow, index) => {\n        rodRow.index = index + 1;\n      });\n      return { ...state,\n        rodsRows: filteredRodsRows,\n        isReadyForSave: filteredRodsRows.length > 0\n      };\n\n    case ADD_NODE_ROW:\n      if (state.newNodeInputRow.nodeNumber.length !== 0 && state.newNodeInputRow.isNodeNumberCorrect && state.newNodeInputRow.nodeForce.length !== 0 && state.newNodeInputRow.isNodeForceCorrect) {\n        const newNodeData = {\n          nodeNumber: Number(state.newNodeInputRow.nodeNumber),\n          nodeForce: Number(state.newNodeInputRow.nodeForce),\n          reactKey: uuidv4()\n        };\n        return { ...state,\n          nodesRows: [...state.nodesRows, newNodeData],\n          newNodeInputRow: {\n            nodeNumber: \"\",\n            isNodeNumberCorrect: true,\n            nodeForce: \"\",\n            isNodeForceCorrect: true\n          }\n        };\n      } else {\n        return { ...state,\n          newNodeInputRow: { ...state.newNodeInputRow,\n            isNodeNumberCorrect: state.newNodeInputRow.nodeNumber.length !== 0 && state.newNodeInputRow.isNodeNumberCorrect,\n            isNodeForceCorrect: state.newNodeInputRow.nodeForce.length !== 0 && state.newNodeInputRow.isNodeForceCorrect\n          }\n        };\n      }\n\n    case NEW_NODE_NUMBER_CHANGED:\n      {\n        if (isNaN(Number(value)) || Number(value) <= 0 && value.length !== 0) {\n          isCorrect = false;\n        }\n\n        return { ...state,\n          newNodeInputRow: { ...state.newNodeInputRow,\n            nodeNumber: value,\n            isNodeNumberCorrect: isCorrect\n          }\n        };\n      }\n\n    case NEW_NODE_FORCE_CHANGED:\n      {\n        if (isNaN(Number(value)) || value.length === 0) {\n          isCorrect = false;\n        }\n\n        return { ...state,\n          newNodeInputRow: { ...state.newNodeInputRow,\n            nodeForce: value,\n            isNodeForceCorrect: isCorrect\n          }\n        };\n      }\n\n    case CHANGE_NODE:\n      return { ...state,\n        changingNodeIndex: action.index,\n        changingNodeInputRow: { ...state.changingNodeInputRow,\n          nodeNumber: state.nodesRows[action.index].nodeNumber,\n          nodeForce: state.nodesRows[action.index].nodeForce\n        }\n      };\n\n    case CHANGING_NODE_NUMBER_CHANGED:\n      if (isNaN(Number(value)) || Number(value) <= 0 && value.length !== 0) {\n        isCorrect = false;\n      }\n\n      return { ...state,\n        changingNodeInputRow: { ...state.changingNodeInputRow,\n          nodeNumber: value,\n          isNodeNumberCorrect: isCorrect\n        }\n      };\n\n    case CHANGING_NODE_FORCE_CHANGED:\n      if (isNaN(Number(value)) || value.length === 0) {\n        isCorrect = false;\n      }\n\n      return { ...state,\n        changingNodeInputRow: { ...state.changingNodeInputRow,\n          nodeForce: value,\n          isNodeForceCorrect: isCorrect\n        }\n      };\n\n    case CHANGING_NODE_SUBMIT:\n      if (state.changingNodeInputRow.nodeNumber.length !== 0 && state.changingNodeInputRow.isNodeNumberCorrect && state.changingNodeInputRow.nodeForce.length !== 0 && state.changingNodeInputRow.isNodeForceCorrect) {\n        const changedNodeData = {\n          nodeNumber: Number(state.changingNodeInputRow.nodeNumber),\n          nodeForce: Number(state.changingNodeInputRow.nodeForce),\n          reactKey: uuidv4()\n        };\n        let changedNodesRows = JSON.parse(JSON.stringify(state.nodesRows));\n        changedNodesRows.splice(state.changingNodeIndex, 1, changedNodeData);\n        return { ...state,\n          nodesRows: changedNodesRows,\n          changingNodeIndex: null,\n          changingNodeInputRow: {\n            nodeNumber: \"\",\n            isNodeNumberCorrect: true,\n            nodeForce: \"\",\n            isNodeForceCorrect: true\n          }\n        };\n      } else {\n        return { ...state,\n          newNodeInputRow: { ...state.newNodeInputRow,\n            isNodeNumberCorrect: state.newNodeInputRow.nodeNumber.length !== 0 && state.newNodeInputRow.isNodeNumberCorrect,\n            isNodeForceCorrect: state.newNodeInputRow.nodeForce.length !== 0 && state.newNodeInputRow.isNodeForceCorrect\n          }\n        };\n      }\n\n    case REMOVE_NODE_ROW:\n      let filteredNodesRows = [...state.nodesRows];\n      filteredNodesRows.splice(action.index, 1);\n      return { ...state,\n        nodesRows: filteredNodesRows\n      };\n\n    case CHANGE_LEFT_SUPPORT:\n      if (state.rodsRows.length !== 0) {\n        return { ...state,\n          leftSupport: {\n            nodeNumber: action.isChecked ? 1 : null,\n            isChecked: action.isChecked\n          }\n        };\n      }\n\n      return { ...state,\n        leftSupport: {\n          nodeNumber: null,\n          isChecked: action.isChecked\n        }\n      };\n\n    case CHANGE_RIGHT_SUPPORT:\n      if (state.rodsRows.length !== 0) {\n        return { ...state,\n          rightSupport: {\n            nodeNumber: action.isChecked ? state.rodsRows.length + 1 : null,\n            isChecked: action.isChecked\n          }\n        };\n      }\n\n      return { ...state,\n        rightSupport: {\n          nodeNumber: null,\n          isChecked: action.isChecked\n        }\n      };\n\n    case CHECK_FOR_ERROR:\n      if (!(state.leftSupport.isChecked || state.rightSupport.isChecked)) {\n        return { ...state,\n          isError: true,\n          isCanvasShown: false,\n          errorMessage: \"В конструкции должна быть хотя бы одна заделка\",\n          isReadyForSave: false\n        };\n      } else if (state.changingRodIndex !== null) {\n        return { ...state,\n          isError: true,\n          isCanvasShown: false,\n          errorMessage: \"Закончите изменение стержня\",\n          isReadyForSave: false\n        };\n      } else if (state.rodsRows.length < 1) {\n        return { ...state,\n          isError: true,\n          isCanvasShown: false,\n          errorMessage: \"В конструкции отсутствуют стержни\",\n          isReadyForSave: false\n        };\n      } else if (state.rodsRows.length === 0 && state.nodesRows.length !== 0 || state.rodsRows.length >= 1 && Math.max(...state.nodesRows.map(node => node.nodeNumber)) > state.rodsRows.length + 1) {\n        return { ...state,\n          isError: true,\n          isCanvasShown: false,\n          errorMessage: `Узел ${Math.max(...state.nodesRows.map(node => node.nodeNumber))} не существует в конструкции`,\n          isReadyForSave: false\n        };\n      } else {\n        return { ...state,\n          isError: false,\n          isCanvasShown: true,\n          errorMessage: \"\",\n          isReadyForSave: true\n        };\n      }\n\n    case SET_NEW_CONSTRUCTION_FROM_FILE_DATA:\n      {\n        return { ...action.newConstructionObj\n        };\n      }\n\n    case SAVE_SOLUTION:\n      return { ...state,\n        objWithSolutionFunctions: action.solution\n      };\n\n    case CLEAR_SOLUTION:\n      return { ...state,\n        objWithSolutionFunctions: null\n      };\n\n    case SHOW_CANVAS:\n      return { ...state,\n        isCanvasShown: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default rodsAndNodesReducer;\nconst CHANGE_LEFT_SUPPORT = \"CHANGE_LEFT_SUPPORT\";\nconst CHANGE_RIGHT_SUPPORT = \"CHANGE_RIGHT_SUPPORT\";\nexport const addNewRod = () => ({\n  type: ADD_NEW_ROD\n});\nexport const newRodAreaChanged = value => ({\n  type: NEW_ROD_AREA_CHANGED,\n  value\n});\nexport const newRodLengthChanged = value => ({\n  type: NEW_ROD_LENGTH_CHANGED,\n  value\n});\nexport const newRodModulusChanged = value => ({\n  type: NEW_ROD_MODULUS_CHANGED,\n  value\n});\nexport const newRodSigmaChanged = value => ({\n  type: NEW_ROD_SIGMA_CHANGED,\n  value\n});\nconst CHANGING_NODE_NUMBER_CHANGED = \"CHANGING_NODE_NUMBER_CHANGED\";\nconst CHANGING_NODE_FORCE_CHANGED = \"CHANGING_NODE_FORCE_CHANGED\";\nconst CHANGING_NODE_SUBMIT = \"CHANGING_NODE_SUBMIT\";\nexport const newRodDistLoadChanged = value => ({\n  type: NEW_ROD_DISTLOAD_CHANGED,\n  value\n});\nexport const changeRod = index => ({\n  type: CHANGE_ROD,\n  index\n});\nexport const changingRodAreaChanged = value => ({\n  type: CHANGING_ROD_AREA_CHANGED,\n  value\n});\nexport const changingRodLengthChanged = value => ({\n  type: CHANGING_ROD_LENGTH_CHANGED,\n  value\n});\nexport const changingRodModulusChanged = value => ({\n  type: CHANGING_ROD_MODULUS_CHANGED,\n  value\n});\nexport const changingRodSigmaChanged = value => ({\n  type: CHANGING_ROD_SIGMA_CHANGED,\n  value\n});\nexport const changingRodDistLoadChanged = value => ({\n  type: CHANGING_ROD_DISTLOAD_CHANGED,\n  value\n});\nexport const changingRodSubmit = () => ({\n  type: CHANGING_ROD_SUBMIT\n});\nexport const removeRodRow = index => ({\n  type: REMOVE_ROD_ROW,\n  index\n});\nexport const addNodeRow = () => ({\n  type: ADD_NODE_ROW\n});\nexport const removeNodeRow = index => ({\n  type: REMOVE_NODE_ROW,\n  index\n});\nexport const changeNode = index => ({\n  type: CHANGE_NODE,\n  index\n});\nexport const newNodeNumberChanged = value => ({\n  type: NEW_NODE_NUMBER_CHANGED,\n  value\n});\nexport const newNodeForceChanged = value => ({\n  type: NEW_NODE_FORCE_CHANGED,\n  value\n});\nexport const changingNodeNumberChanged = value => ({\n  type: CHANGING_NODE_NUMBER_CHANGED,\n  value\n});\nexport const changingNodeForceChanged = value => ({\n  type: CHANGING_NODE_FORCE_CHANGED,\n  value\n});\nexport const changingNodeSubmit = () => ({\n  type: CHANGING_NODE_SUBMIT\n});\nexport const changeLeftSupport = isChecked => ({\n  type: CHANGE_LEFT_SUPPORT,\n  isChecked\n});\nexport const changeRightSupport = isChecked => ({\n  type: CHANGE_RIGHT_SUPPORT,\n  isChecked\n});\nexport const checkForError = () => ({\n  type: CHECK_FOR_ERROR\n});\nexport const downloadConstruction = () => (dispatch, getState) => {\n  dispatch(checkForError());\n\n  if (getState().rodsAndNodes.isReadyForSave) {\n    const state = getState().rodsAndNodes;\n    const objForDownload = {\n      rods: state.rodsRows.map(rod => {\n        return [rod.area, rod.length, rod.modulus, rod.sigma, rod.distLoad];\n      }),\n      nodes: state.nodesRows.map(node => [node.nodeNumber, node.nodeForce]),\n      left: state.leftSupport.nodeNumber ? true : false,\n      right: state.rightSupport.nodeNumber ? true : false\n    };\n    let a = document.createElement(\"a\");\n    a.setAttribute(\"download\", \"construction.json\");\n    a.href = \"data:text/plain;charset=utf-8,\" + encodeURIComponent(JSON.stringify(objForDownload, null, \"\\t\"));\n    a.click();\n  }\n};\nexport const setNewConstructionFromFileData = newConstructionObj => ({\n  type: SET_NEW_CONSTRUCTION_FROM_FILE_DATA,\n  newConstructionObj\n});\nexport const showFileReadingError = message => ({\n  type: SHOW_CONSTRUCTION_FROM_FILE_ERROR,\n  message\n});\nconst CHANGE_ROD = \"CHANGE_ROD\";\nconst CHANGING_ROD_AREA_CHANGED = \"CHANGING_ROD_AREA_CHANGED\";\nconst CHANGING_ROD_LENGTH_CHANGED = \"CHANGING_ROD_LENGTH_CHANGED\";\nconst CHANGING_ROD_MODULUS_CHANGED = \"CHANGING_ROD_MODULUS_CHANGED\";\nconst CHANGING_ROD_SIGMA_CHANGED = \"CHANGING_ROD_SIGMA_CHANGED\";\nconst CHANGING_ROD_DISTLOAD_CHANGED = \"CHANGING_ROD_DISTLOAD_CHANGED\";\nconst CHANGING_ROD_SUBMIT = \"CHANGING_ROD_SUBMIT\";\nexport const handleFileOpening = inputRef => (dispatch, getState) => {\n  const reader = new FileReader();\n\n  reader.onload = () => {\n    let data = JSON.parse(reader.result);\n    let newConstructionObj = {};\n    newConstructionObj.rodsRows = data.rods.map((rodData, index) => {\n      return {\n        index: index + 1,\n        area: rodData[0],\n        length: rodData[1],\n        modulus: rodData[2],\n        sigma: rodData[3],\n        distLoad: rodData[4],\n        reactKey: uuidv4()\n      };\n    });\n    newConstructionObj.nodesRows = data.nodes.map((nodeData, index) => {\n      return {\n        nodeNumber: nodeData[0],\n        nodeForce: nodeData[1],\n        reactKey: uuidv4()\n      };\n    });\n    newConstructionObj.leftSupport = {\n      nodeNumber: data.left ? 1 : null,\n      isChecked: data.left\n    };\n    newConstructionObj.rightSupport = {\n      nodeNumber: data.right ? newConstructionObj.rodsRows.length + 1 : null,\n      isChecked: data.right\n    };\n    newConstructionObj.changingRodIndex = null;\n    newConstructionObj.changingRodInputRow = {\n      area: \"\",\n      isAreaCorrect: true,\n      length: \"\",\n      isLengthCorrect: true,\n      modulus: \"\",\n      isModulusCorrect: true,\n      sigma: \"\",\n      isSigmaCorrect: true,\n      distLoad: \"\",\n      isDistLoadCorrect: true\n    };\n    newConstructionObj.newRodInputRow = {\n      area: \"\",\n      isAreaCorrect: true,\n      length: \"\",\n      isLengthCorrect: true,\n      modulus: \"\",\n      isModulusCorrect: true,\n      sigma: \"\",\n      isSigmaCorrect: true,\n      distLoad: \"\",\n      isDistLoadCorrect: true\n    };\n    newConstructionObj.newNodeInputRow = {\n      nodeNumber: \"\",\n      isNodeNumberCorrect: true,\n      nodeForce: \"\",\n      isNodeForceCorrect: true\n    };\n    newConstructionObj.changingNodeIndex = null;\n    newConstructionObj.changingNodeInputRow = {\n      nodeNumber: \"\",\n      isNodeNumberCorrect: true,\n      nodeForce: \"\",\n      isNodeForceCorrect: true\n    };\n    newConstructionObj.isError = false;\n    newConstructionObj.errorMessage = \"\";\n    newConstructionObj.isReadyForSave = true;\n    newConstructionObj.objWithSolutionFunctions = null;\n    dispatch(setNewConstructionFromFileData(newConstructionObj));\n  };\n\n  reader.readAsText(inputRef.current.files[0]);\n};\nexport const saveSolution = solutionObj => ({\n  type: SAVE_SOLUTION,\n  solution: solutionObj\n});\nconst ADD_NEW_ROD = \"ADD_NEW_ROD\";\nconst NEW_ROD_AREA_CHANGED = \"NEW_ROD_AREA_CHANGED\";\nconst NEW_ROD_LENGTH_CHANGED = \"NEW_ROD_LENGTH_CHANGED\";\nconst NEW_ROD_MODULUS_CHANGED = \"NEW_ROD_MODULUS_CHANGED\";\nconst NEW_ROD_SIGMA_CHANGED = \"NEW_ROD_SIGMA_CHANGED\";\nconst NEW_ROD_DISTLOAD_CHANGED = \"NEW_ROD_DISTLOAD_CHANGED\";\nexport const clearSolution = () => ({\n  type: CLEAR_SOLUTION\n});\nexport const showCanvas = () => ({\n  type: SHOW_CANVAS\n});\nconst REMOVE_ROD_ROW = \"REMOVE_ROD_ROW\";\nconst ADD_NODE_ROW = \"ADD_NODE_ROW\";\nconst NEW_NODE_NUMBER_CHANGED = \"NEW_NODE_NUMBER_CHANGED\";\nconst NEW_NODE_FORCE_CHANGED = \"NEW_NODE_FORCE_CHANGED\";\nconst CHANGE_NODE = \"CHANGE_NODE\";\nconst REMOVE_NODE_ROW = \"REMOVE_NODE_ROW\";\nconst CHECK_FOR_ERROR = \"CHECK_FOR_ERROR\";\nconst SHOW_CONSTRUCTION_FROM_FILE_ERROR = \"SHOW_CONSTRUCTION_FROM_FILE_ERROR\";\nconst SET_NEW_CONSTRUCTION_FROM_FILE_DATA = \"SET_NEW_CONSTRUCTION_FROM_FILE_DATA\";\nconst SAVE_SOLUTION = \"SAVE_SOLUTION\";\nconst CLEAR_SOLUTION = \"CLEAR_SOLUTION\";\nconst SHOW_CANVAS = \"SHOW_CANVAS\";\nconst initialState = {\n  rodsRows: [],\n  nodesRows: [],\n  changingRodIndex: null,\n  newRodInputRow: {\n    area: \"\",\n    isAreaCorrect: true,\n    length: \"\",\n    isLengthCorrect: true,\n    modulus: \"\",\n    isModulusCorrect: true,\n    sigma: \"\",\n    isSigmaCorrect: true,\n    distLoad: \"\",\n    isDistLoadCorrect: true\n  },\n  changingRodInputRow: {\n    area: \"\",\n    isAreaCorrect: true,\n    length: \"\",\n    isLengthCorrect: true,\n    modulus: \"\",\n    isModulusCorrect: true,\n    sigma: \"\",\n    isSigmaCorrect: true,\n    distLoad: \"\",\n    isDistLoadCorrect: true\n  },\n  changingNodeInputRow: {\n    nodeNumber: \"\",\n    isNodeNumberCorrect: true,\n    nodeForce: \"\",\n    isNodeForceCorrect: true\n  },\n  newNodeInputRow: {\n    nodeNumber: \"\",\n    isNodeNumberCorrect: true,\n    nodeForce: \"\",\n    isNodeForceCorrect: true\n  },\n  changingNodeIndex: null,\n  leftSupport: {\n    nodeNumber: null,\n    isChecked: false\n  },\n  rightSupport: {\n    nodeNumber: null,\n    isChecked: false\n  },\n  isError: false,\n  errorMessage: \"Конструкция не введена\",\n  isReadyForSave: false,\n  objWithSolutionFunctions: null,\n  isCanvasShown: false\n};","map":{"version":3,"sources":["C:/Users/glush/Desktop/react-sapr-main/src/reducers/reducer.js"],"names":["v4","uuidv4","rodsAndNodesReducer","state","initialState","action","value","isCorrect","type","NEW_ROD_AREA_CHANGED","isNaN","Number","length","newRodInputRow","area","isAreaCorrect","NEW_ROD_LENGTH_CHANGED","isLengthCorrect","NEW_ROD_MODULUS_CHANGED","modulus","isModulusCorrect","NEW_ROD_SIGMA_CHANGED","sigma","isSigmaCorrect","NEW_ROD_DISTLOAD_CHANGED","distLoad","isDistLoadCorrect","ADD_NEW_ROD","newObj","rodsRows","index","reactKey","CHANGE_ROD","changingRodIndex","changingRodInputRow","CHANGING_ROD_AREA_CHANGED","CHANGING_ROD_LENGTH_CHANGED","CHANGING_ROD_MODULUS_CHANGED","CHANGING_ROD_SIGMA_CHANGED","CHANGING_ROD_DISTLOAD_CHANGED","CHANGING_ROD_SUBMIT","changedRodData","changedRodsRows","JSON","parse","stringify","splice","REMOVE_ROD_ROW","filteredRodsRows","forEach","rodRow","isReadyForSave","ADD_NODE_ROW","newNodeInputRow","nodeNumber","isNodeNumberCorrect","nodeForce","isNodeForceCorrect","newNodeData","nodesRows","NEW_NODE_NUMBER_CHANGED","NEW_NODE_FORCE_CHANGED","CHANGE_NODE","changingNodeIndex","changingNodeInputRow","CHANGING_NODE_NUMBER_CHANGED","CHANGING_NODE_FORCE_CHANGED","CHANGING_NODE_SUBMIT","changedNodeData","changedNodesRows","REMOVE_NODE_ROW","filteredNodesRows","CHANGE_LEFT_SUPPORT","leftSupport","isChecked","CHANGE_RIGHT_SUPPORT","rightSupport","CHECK_FOR_ERROR","isError","isCanvasShown","errorMessage","Math","max","map","node","SET_NEW_CONSTRUCTION_FROM_FILE_DATA","newConstructionObj","SAVE_SOLUTION","objWithSolutionFunctions","solution","CLEAR_SOLUTION","SHOW_CANVAS","addNewRod","newRodAreaChanged","newRodLengthChanged","newRodModulusChanged","newRodSigmaChanged","newRodDistLoadChanged","changeRod","changingRodAreaChanged","changingRodLengthChanged","changingRodModulusChanged","changingRodSigmaChanged","changingRodDistLoadChanged","changingRodSubmit","removeRodRow","addNodeRow","removeNodeRow","changeNode","newNodeNumberChanged","newNodeForceChanged","changingNodeNumberChanged","changingNodeForceChanged","changingNodeSubmit","changeLeftSupport","changeRightSupport","checkForError","downloadConstruction","dispatch","getState","rodsAndNodes","objForDownload","rods","rod","nodes","left","right","a","document","createElement","setAttribute","href","encodeURIComponent","click","setNewConstructionFromFileData","showFileReadingError","message","SHOW_CONSTRUCTION_FROM_FILE_ERROR","handleFileOpening","inputRef","reader","FileReader","onload","data","result","rodData","nodeData","readAsText","current","files","saveSolution","solutionObj","clearSolution","showCanvas"],"mappings":"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","sourcesContent":["import { v4 as uuidv4 } from \"uuid\";\n\nconst rodsAndNodesReducer = (state = initialState, action) => {\n    let value = action.value;\n    let isCorrect = true;\n\n    switch (action.type) {\n        case NEW_ROD_AREA_CHANGED:\n            if (\n                isNaN(Number(value)) ||\n                (Number(value) <= 0 && value.length !== 0)\n            ) {\n                isCorrect = false;\n            }\n            return {\n                ...state,\n                newRodInputRow: {\n                    ...state.newRodInputRow,\n                    area: value,\n                    isAreaCorrect: isCorrect,\n                },\n            };\n        case NEW_ROD_LENGTH_CHANGED:\n            if (\n                isNaN(Number(value)) ||\n                (Number(value) <= 0 && value.length !== 0)\n            ) {\n                isCorrect = false;\n            }\n            return {\n                ...state,\n                newRodInputRow: {\n                    ...state.newRodInputRow,\n                    length: value,\n                    isLengthCorrect: isCorrect,\n                },\n            };\n        case NEW_ROD_MODULUS_CHANGED:\n            if (\n                isNaN(Number(value)) ||\n                (Number(value) <= 0 && value.length !== 0)\n            ) {\n                isCorrect = false;\n            }\n            return {\n                ...state,\n                newRodInputRow: {\n                    ...state.newRodInputRow,\n                    modulus: value,\n                    isModulusCorrect: isCorrect,\n                },\n            };\n        case NEW_ROD_SIGMA_CHANGED:\n            if (\n                isNaN(Number(value)) ||\n                (Number(value) <= 0 && value.length !== 0)\n            ) {\n                isCorrect = false;\n            }\n            return {\n                ...state,\n                newRodInputRow: {\n                    ...state.newRodInputRow,\n                    sigma: value,\n                    isSigmaCorrect: isCorrect,\n                },\n            };\n        case NEW_ROD_DISTLOAD_CHANGED:\n            if (isNaN(Number(value))) {\n                isCorrect = false;\n            }\n            return {\n                ...state,\n                newRodInputRow: {\n                    ...state.newRodInputRow,\n                    distLoad: value,\n                    isDistLoadCorrect: isCorrect,\n                },\n            };\n        case ADD_NEW_ROD:\n            if (\n                state.newRodInputRow.area.length !== 0 &&\n                state.newRodInputRow.isAreaCorrect &&\n                state.newRodInputRow.length.length !== 0 &&\n                state.newRodInputRow.isLengthCorrect &&\n                state.newRodInputRow.modulus.length !== 0 &&\n                state.newRodInputRow.isModulusCorrect &&\n                state.newRodInputRow.sigma.length !== 0 &&\n                state.newRodInputRow.isSigmaCorrect &&\n                state.newRodInputRow.distLoad.length !== 0 &&\n                state.newRodInputRow.isDistLoadCorrect\n            ) {\n                const newObj = {\n                    ...state,\n                    rodsRows: [\n                        ...state.rodsRows,\n                        {\n                            index: state.rodsRows.length + 1,\n                            area: Number(state.newRodInputRow.area),\n                            length: Number(state.newRodInputRow.length),\n                            modulus: Number(state.newRodInputRow.modulus),\n                            sigma: Number(state.newRodInputRow.sigma),\n                            distLoad: Number(state.newRodInputRow.distLoad),\n                            reactKey: uuidv4(),\n                        },\n                    ],\n                    newRodInputRow: {\n                        area: \"\",\n                        isAreaCorrect: true,\n                        length: \"\",\n                        isLengthCorrect: true,\n                        modulus: \"\",\n                        isModulusCorrect: true,\n                        sigma: \"\",\n                        isSigmaCorrect: true,\n                        distLoad: \"\",\n                        isDistLoadCorrect: true,\n                    },\n                };\n                return newObj;\n            } else {\n                return {\n                    ...state,\n                    newRodInputRow: {\n                        ...state.newRodInputRow,\n                        isAreaCorrect:\n                            state.newRodInputRow.area.length !== 0 &&\n                            state.newRodInputRow.isAreaCorrect,\n                        isLengthCorrect:\n                            state.newRodInputRow.length.length !== 0 &&\n                            state.newRodInputRow.isLengthCorrect,\n                        isModulusCorrect:\n                            state.newRodInputRow.modulus.length !== 0 &&\n                            state.newRodInputRow.isModulusCorrect,\n                        isSigmaCorrect:\n                            state.newRodInputRow.sigma.length !== 0 &&\n                            state.newRodInputRow.isSigmaCorrect,\n                        isDistLoadCorrect:\n                            state.newRodInputRow.distLoad.length !== 0 &&\n                            state.newRodInputRow.isDistLoadCorrect,\n                    },\n                };\n            }\n        case CHANGE_ROD:\n            return {\n                ...state,\n                changingRodIndex: action.index,\n                changingRodInputRow: {\n                    ...state.changingRodInputRow,\n                    area: state.rodsRows[action.index - 1].area,\n                    length: state.rodsRows[action.index - 1].length,\n                    modulus: state.rodsRows[action.index - 1].modulus,\n                    sigma: state.rodsRows[action.index - 1].sigma,\n                    distLoad: state.rodsRows[action.index - 1].distLoad,\n                },\n            };\n        case CHANGING_ROD_AREA_CHANGED:\n            if (isNaN(Number(value)) || Number(value) <= 0) {\n                isCorrect = false;\n            }\n            return {\n                ...state,\n                changingRodInputRow: {\n                    ...state.changingRodInputRow,\n                    area: value,\n                    isAreaCorrect: isCorrect,\n                },\n            };\n        case CHANGING_ROD_LENGTH_CHANGED:\n            if (\n                isNaN(Number(value)) ||\n                (Number(value) <= 0 && value.length !== 0)\n            ) {\n                isCorrect = false;\n            }\n            return {\n                ...state,\n                changingRodInputRow: {\n                    ...state.changingRodInputRow,\n                    length: value,\n                    isLengthCorrect: isCorrect,\n                },\n            };\n        case CHANGING_ROD_MODULUS_CHANGED:\n            if (\n                isNaN(Number(value)) ||\n                (Number(value) <= 0 && value.length !== 0)\n            ) {\n                isCorrect = false;\n            }\n            return {\n                ...state,\n                changingRodInputRow: {\n                    ...state.changingRodInputRow,\n                    modulus: value,\n                    isModulusCorrect: isCorrect,\n                },\n            };\n        case CHANGING_ROD_SIGMA_CHANGED:\n            if (\n                isNaN(Number(value)) ||\n                (Number(value) <= 0 && value.length !== 0)\n            ) {\n                isCorrect = false;\n            }\n            return {\n                ...state,\n                changingRodInputRow: {\n                    ...state.changingRodInputRow,\n                    sigma: value,\n                    isSigmaCorrect: isCorrect,\n                },\n            };\n        case CHANGING_ROD_DISTLOAD_CHANGED:\n            if (isNaN(Number(value))) {\n                isCorrect = false;\n            }\n            return {\n                ...state,\n                changingRodInputRow: {\n                    ...state.changingRodInputRow,\n                    distLoad: value,\n                    isDistLoadCorrect: isCorrect,\n                },\n            };\n        case CHANGING_ROD_SUBMIT: {\n            if (\n                state.changingRodInputRow.area.length !== 0 &&\n                state.changingRodInputRow.isAreaCorrect &&\n                state.changingRodInputRow.length.length !== 0 &&\n                state.changingRodInputRow.isLengthCorrect &&\n                state.changingRodInputRow.modulus.length !== 0 &&\n                state.changingRodInputRow.isModulusCorrect &&\n                state.changingRodInputRow.sigma.length !== 0 &&\n                state.changingRodInputRow.isSigmaCorrect &&\n                state.changingRodInputRow.distLoad.length !== 0 &&\n                state.changingRodInputRow.isDistLoadCorrect\n            ) {\n                const changedRodData = {\n                    index: state.changingRodIndex,\n                    area: Number(state.changingRodInputRow.area),\n                    length: Number(state.changingRodInputRow.length),\n                    modulus: Number(state.changingRodInputRow.modulus),\n                    sigma: Number(state.changingRodInputRow.sigma),\n                    distLoad: Number(state.changingRodInputRow.distLoad),\n                };\n                let changedRodsRows = JSON.parse(\n                    JSON.stringify(state.rodsRows)\n                );\n                changedRodsRows.splice(\n                    state.changingRodIndex - 1,\n                    1,\n                    changedRodData\n                );\n\n                const newObj = {\n                    ...state,\n                    rodsRows: changedRodsRows,\n                    changingRodIndex: null,\n                    changingRodInputRow: {\n                        area: \"\",\n                        isAreaCorrect: true,\n                        length: \"\",\n                        isLengthCorrect: true,\n                        modulus: \"\",\n                        isModulusCorrect: true,\n                        sigma: \"\",\n                        isSigmaCorrect: true,\n                        distLoad: \"\",\n                        isDistLoadCorrect: true,\n                    },\n                };\n                return newObj;\n            } else {\n                return {\n                    ...state,\n                    changingRodInputRow: {\n                        ...state.changingRodInputRow,\n                        isAreaCorrect:\n                            state.changingRodInputRow.area.length !== 0 &&\n                            state.changingRodInputRow.isAreaCorrect,\n                        isLengthCorrect:\n                            state.changingRodInputRow.length.length !== 0 &&\n                            state.changingRodInputRow.isLengthCorrect,\n                        isModulusCorrect:\n                            state.changingRodInputRow.modulus.length !== 0 &&\n                            state.changingRodInputRow.isModulusCorrect,\n                        isSigmaCorrect:\n                            state.changingRodInputRow.sigma.length !== 0 &&\n                            state.changingRodInputRow.isSigmaCorrect,\n                        isDistLoadCorrect:\n                            state.changingRodInputRow.distLoad.length !== 0 &&\n                            state.changingRodInputRow.isDistLoadCorrect,\n                    },\n                };\n            }\n        }\n        case REMOVE_ROD_ROW:\n            let filteredRodsRows = [...state.rodsRows];\n            filteredRodsRows.splice(action.index - 1, 1);\n            filteredRodsRows.forEach((rodRow, index) => {\n                rodRow.index = index + 1;\n            });\n\n            return {\n                ...state,\n                rodsRows: filteredRodsRows,\n                isReadyForSave: filteredRodsRows.length > 0,\n            };\n        case ADD_NODE_ROW:\n            if (\n                state.newNodeInputRow.nodeNumber.length !== 0 &&\n                state.newNodeInputRow.isNodeNumberCorrect &&\n                state.newNodeInputRow.nodeForce.length !== 0 &&\n                state.newNodeInputRow.isNodeForceCorrect\n            ) {\n                const newNodeData = {\n                    nodeNumber: Number(state.newNodeInputRow.nodeNumber),\n                    nodeForce: Number(state.newNodeInputRow.nodeForce),\n                    reactKey: uuidv4(),\n                };\n                return {\n                    ...state,\n                    nodesRows: [...state.nodesRows, newNodeData],\n                    newNodeInputRow: {\n                        nodeNumber: \"\",\n                        isNodeNumberCorrect: true,\n                        nodeForce: \"\",\n                        isNodeForceCorrect: true,\n                    },\n                };\n            } else {\n                return {\n                    ...state,\n                    newNodeInputRow: {\n                        ...state.newNodeInputRow,\n                        isNodeNumberCorrect:\n                            state.newNodeInputRow.nodeNumber.length !== 0 &&\n                            state.newNodeInputRow.isNodeNumberCorrect,\n                        isNodeForceCorrect:\n                            state.newNodeInputRow.nodeForce.length !== 0 &&\n                            state.newNodeInputRow.isNodeForceCorrect,\n                    },\n                };\n            }\n        case NEW_NODE_NUMBER_CHANGED: {\n            if (\n                isNaN(Number(value)) ||\n                (Number(value) <= 0 && value.length !== 0)\n            ) {\n                isCorrect = false;\n            }\n            return {\n                ...state,\n                newNodeInputRow: {\n                    ...state.newNodeInputRow,\n                    nodeNumber: value,\n                    isNodeNumberCorrect: isCorrect,\n                },\n            };\n        }\n        case NEW_NODE_FORCE_CHANGED: {\n            if (isNaN(Number(value)) || value.length === 0) {\n                isCorrect = false;\n            }\n            return {\n                ...state,\n                newNodeInputRow: {\n                    ...state.newNodeInputRow,\n                    nodeForce: value,\n                    isNodeForceCorrect: isCorrect,\n                },\n            };\n        }\n        case CHANGE_NODE:\n            return {\n                ...state,\n                changingNodeIndex: action.index,\n                changingNodeInputRow: {\n                    ...state.changingNodeInputRow,\n                    nodeNumber: state.nodesRows[action.index].nodeNumber,\n                    nodeForce: state.nodesRows[action.index].nodeForce,\n                },\n            };\n        case CHANGING_NODE_NUMBER_CHANGED:\n            if (\n                isNaN(Number(value)) ||\n                (Number(value) <= 0 && value.length !== 0)\n            ) {\n                isCorrect = false;\n            }\n            return {\n                ...state,\n                changingNodeInputRow: {\n                    ...state.changingNodeInputRow,\n                    nodeNumber: value,\n                    isNodeNumberCorrect: isCorrect,\n                },\n            };\n        case CHANGING_NODE_FORCE_CHANGED:\n            if (isNaN(Number(value)) || value.length === 0) {\n                isCorrect = false;\n            }\n            return {\n                ...state,\n                changingNodeInputRow: {\n                    ...state.changingNodeInputRow,\n                    nodeForce: value,\n                    isNodeForceCorrect: isCorrect,\n                },\n            };\n        case CHANGING_NODE_SUBMIT:\n            if (\n                state.changingNodeInputRow.nodeNumber.length !== 0 &&\n                state.changingNodeInputRow.isNodeNumberCorrect &&\n                state.changingNodeInputRow.nodeForce.length !== 0 &&\n                state.changingNodeInputRow.isNodeForceCorrect\n            ) {\n                const changedNodeData = {\n                    nodeNumber: Number(state.changingNodeInputRow.nodeNumber),\n                    nodeForce: Number(state.changingNodeInputRow.nodeForce),\n                    reactKey: uuidv4(),\n                };\n                let changedNodesRows = JSON.parse(\n                    JSON.stringify(state.nodesRows)\n                );\n                changedNodesRows.splice(\n                    state.changingNodeIndex,\n                    1,\n                    changedNodeData\n                );\n                return {\n                    ...state,\n                    nodesRows: changedNodesRows,\n                    changingNodeIndex: null,\n                    changingNodeInputRow: {\n                        nodeNumber: \"\",\n                        isNodeNumberCorrect: true,\n                        nodeForce: \"\",\n                        isNodeForceCorrect: true,\n                    },\n                };\n            } else {\n                return {\n                    ...state,\n                    newNodeInputRow: {\n                        ...state.newNodeInputRow,\n                        isNodeNumberCorrect:\n                            state.newNodeInputRow.nodeNumber.length !== 0 &&\n                            state.newNodeInputRow.isNodeNumberCorrect,\n                        isNodeForceCorrect:\n                            state.newNodeInputRow.nodeForce.length !== 0 &&\n                            state.newNodeInputRow.isNodeForceCorrect,\n                    },\n                };\n            }\n        case REMOVE_NODE_ROW:\n            let filteredNodesRows = [...state.nodesRows];\n            filteredNodesRows.splice(action.index, 1);\n            return {\n                ...state,\n                nodesRows: filteredNodesRows,\n            };\n\n        case CHANGE_LEFT_SUPPORT:\n            if (state.rodsRows.length !== 0) {\n                return {\n                    ...state,\n                    leftSupport: {\n                        nodeNumber: action.isChecked ? 1 : null,\n                        isChecked: action.isChecked,\n                    },\n                };\n            }\n            return {\n                ...state,\n                leftSupport: {\n                    nodeNumber: null,\n                    isChecked: action.isChecked,\n                },\n            };\n        case CHANGE_RIGHT_SUPPORT:\n            if (state.rodsRows.length !== 0) {\n                return {\n                    ...state,\n                    rightSupport: {\n                        nodeNumber: action.isChecked\n                            ? state.rodsRows.length + 1\n                            : null,\n                        isChecked: action.isChecked,\n                    },\n                };\n            }\n            return {\n                ...state,\n                rightSupport: {\n                    nodeNumber: null,\n                    isChecked: action.isChecked,\n                },\n            };\n        case CHECK_FOR_ERROR:\n            if (\n                !(state.leftSupport.isChecked || state.rightSupport.isChecked)\n            ) {\n                return {\n                    ...state,\n                    isError: true,\n                    isCanvasShown: false,\n                    errorMessage:\n                        \"В конструкции должна быть хотя бы одна заделка\",\n                    isReadyForSave: false,\n                };\n            } else if (state.changingRodIndex !== null) {\n                return {\n                    ...state,\n                    isError: true,\n                    isCanvasShown: false,\n                    errorMessage: \"Закончите изменение стержня\",\n                    isReadyForSave: false,\n                };\n            } else if (state.rodsRows.length < 1) {\n                return {\n                    ...state,\n                    isError: true,\n                    isCanvasShown: false,\n                    errorMessage: \"В конструкции отсутствуют стержни\",\n                    isReadyForSave: false,\n                };\n            } else if (\n                (state.rodsRows.length === 0 && state.nodesRows.length !== 0) ||\n                (state.rodsRows.length >= 1 &&\n                    Math.max(\n                        ...state.nodesRows.map((node) => node.nodeNumber)\n                    ) >\n                        state.rodsRows.length + 1)\n            ) {\n                return {\n                    ...state,\n                    isError: true,\n                    isCanvasShown: false,\n                    errorMessage: `Узел ${Math.max(\n                        ...state.nodesRows.map((node) => node.nodeNumber)\n                    )} не существует в конструкции`,\n                    isReadyForSave: false,\n                };\n            } else {\n                return {\n                    ...state,\n                    isError: false,\n                    isCanvasShown: true,\n                    errorMessage: \"\",\n                    isReadyForSave: true,\n                };\n            }\n        case SET_NEW_CONSTRUCTION_FROM_FILE_DATA: {\n            return {\n                ...action.newConstructionObj,\n            };\n        }\n        case SAVE_SOLUTION:\n            return {\n                ...state,\n                objWithSolutionFunctions: action.solution,\n            };\n        case CLEAR_SOLUTION:\n            return {\n                ...state,\n                objWithSolutionFunctions: null,\n            };\n        case SHOW_CANVAS :\n            return {\n                ...state,\n                isCanvasShown: true\n            }\n        default:\n            return state;\n    }\n};\n\nexport default rodsAndNodesReducer;\n\nconst CHANGE_LEFT_SUPPORT = \"CHANGE_LEFT_SUPPORT\";\nconst CHANGE_RIGHT_SUPPORT = \"CHANGE_RIGHT_SUPPORT\";\n\nexport const addNewRod = () => ({ type: ADD_NEW_ROD });\nexport const newRodAreaChanged = (value) => ({\n    type: NEW_ROD_AREA_CHANGED,\n    value,\n});\nexport const newRodLengthChanged = (value) => ({\n    type: NEW_ROD_LENGTH_CHANGED,\n    value,\n});\nexport const newRodModulusChanged = (value) => ({\n    type: NEW_ROD_MODULUS_CHANGED,\n    value,\n});\nexport const newRodSigmaChanged = (value) => ({\n    type: NEW_ROD_SIGMA_CHANGED,\n    value,\n});\n\nconst CHANGING_NODE_NUMBER_CHANGED = \"CHANGING_NODE_NUMBER_CHANGED\";\nconst CHANGING_NODE_FORCE_CHANGED = \"CHANGING_NODE_FORCE_CHANGED\";\nconst CHANGING_NODE_SUBMIT = \"CHANGING_NODE_SUBMIT\";\n\nexport const newRodDistLoadChanged = (value) => ({\n    type: NEW_ROD_DISTLOAD_CHANGED,\n    value,\n});\n\nexport const changeRod = (index) => ({\n    type: CHANGE_ROD,\n    index,\n});\nexport const changingRodAreaChanged = (value) => ({\n    type: CHANGING_ROD_AREA_CHANGED,\n    value,\n});\nexport const changingRodLengthChanged = (value) => ({\n    type: CHANGING_ROD_LENGTH_CHANGED,\n    value,\n});\nexport const changingRodModulusChanged = (value) => ({\n    type: CHANGING_ROD_MODULUS_CHANGED,\n    value,\n});\nexport const changingRodSigmaChanged = (value) => ({\n    type: CHANGING_ROD_SIGMA_CHANGED,\n    value,\n});\nexport const changingRodDistLoadChanged = (value) => ({\n    type: CHANGING_ROD_DISTLOAD_CHANGED,\n    value,\n});\n\nexport const changingRodSubmit = () => ({\n    type: CHANGING_ROD_SUBMIT,\n});\n\nexport const removeRodRow = (index) => ({\n    type: REMOVE_ROD_ROW,\n    index,\n});\n\nexport const addNodeRow = () => ({\n    type: ADD_NODE_ROW,\n});\n\nexport const removeNodeRow = (index) => ({\n    type: REMOVE_NODE_ROW,\n    index,\n});\n\nexport const changeNode = (index) => ({\n    type: CHANGE_NODE,\n    index,\n});\n\nexport const newNodeNumberChanged = (value) => ({\n    type: NEW_NODE_NUMBER_CHANGED,\n    value,\n});\n\nexport const newNodeForceChanged = (value) => ({\n    type: NEW_NODE_FORCE_CHANGED,\n    value,\n});\n\nexport const changingNodeNumberChanged = (value) => ({\n    type: CHANGING_NODE_NUMBER_CHANGED,\n    value,\n});\n\nexport const changingNodeForceChanged = (value) => ({\n    type: CHANGING_NODE_FORCE_CHANGED,\n    value,\n});\n\nexport const changingNodeSubmit = () => ({\n    type: CHANGING_NODE_SUBMIT,\n});\n\nexport const changeLeftSupport = (isChecked) => ({\n    type: CHANGE_LEFT_SUPPORT,\n    isChecked,\n});\n\nexport const changeRightSupport = (isChecked) => ({\n    type: CHANGE_RIGHT_SUPPORT,\n    isChecked,\n});\n\nexport const checkForError = () => ({ type: CHECK_FOR_ERROR });\n\nexport const downloadConstruction = () => (dispatch, getState) => {\n    dispatch(checkForError());\n    if (getState().rodsAndNodes.isReadyForSave) {\n        const state = getState().rodsAndNodes;\n        const objForDownload = {\n            rods: state.rodsRows.map((rod) => {\n                return [\n                    rod.area,\n                    rod.length,\n                    rod.modulus,\n                    rod.sigma,\n                    rod.distLoad,\n                ];\n            }),\n            nodes: state.nodesRows.map((node) => [\n                node.nodeNumber,\n                node.nodeForce,\n            ]),\n            left: state.leftSupport.nodeNumber ? true : false,\n            right: state.rightSupport.nodeNumber ? true : false,\n        };\n        let a = document.createElement(\"a\");\n        a.setAttribute(\"download\", \"construction.json\");\n        a.href =\n            \"data:text/plain;charset=utf-8,\" +\n            encodeURIComponent(JSON.stringify(objForDownload, null, \"\\t\"));\n        a.click();\n    }\n};\n\nexport const setNewConstructionFromFileData = (newConstructionObj) => ({\n    type: SET_NEW_CONSTRUCTION_FROM_FILE_DATA,\n    newConstructionObj,\n});\n\nexport const showFileReadingError = (message) => ({\n    type: SHOW_CONSTRUCTION_FROM_FILE_ERROR,\n    message,\n});\n\nconst CHANGE_ROD = \"CHANGE_ROD\";\nconst CHANGING_ROD_AREA_CHANGED = \"CHANGING_ROD_AREA_CHANGED\";\nconst CHANGING_ROD_LENGTH_CHANGED = \"CHANGING_ROD_LENGTH_CHANGED\";\nconst CHANGING_ROD_MODULUS_CHANGED = \"CHANGING_ROD_MODULUS_CHANGED\";\nconst CHANGING_ROD_SIGMA_CHANGED = \"CHANGING_ROD_SIGMA_CHANGED\";\nconst CHANGING_ROD_DISTLOAD_CHANGED = \"CHANGING_ROD_DISTLOAD_CHANGED\";\nconst CHANGING_ROD_SUBMIT = \"CHANGING_ROD_SUBMIT\";\n\n\nexport const handleFileOpening = (inputRef) => (dispatch, getState) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n        let data = JSON.parse(reader.result);\n        let newConstructionObj = {};\n        newConstructionObj.rodsRows = data.rods.map((rodData, index) => {\n            return {\n                index: index + 1,\n                area: rodData[0],\n                length: rodData[1],\n                modulus: rodData[2],\n                sigma: rodData[3],\n                distLoad: rodData[4],\n                reactKey: uuidv4(),\n            };\n        });\n        newConstructionObj.nodesRows = data.nodes.map((nodeData, index) => {\n            return {\n                nodeNumber: nodeData[0],\n                nodeForce: nodeData[1],\n                reactKey: uuidv4(),\n            };\n        });\n        newConstructionObj.leftSupport = {\n            nodeNumber: data.left ? 1 : null,\n            isChecked: data.left,\n        };\n        newConstructionObj.rightSupport = {\n            nodeNumber: data.right\n                ? newConstructionObj.rodsRows.length + 1\n                : null,\n            isChecked: data.right,\n        };\n        newConstructionObj.changingRodIndex = null;\n        newConstructionObj.changingRodInputRow = {\n            area: \"\",\n            isAreaCorrect: true,\n            length: \"\",\n            isLengthCorrect: true,\n            modulus: \"\",\n            isModulusCorrect: true,\n            sigma: \"\",\n            isSigmaCorrect: true,\n            distLoad: \"\",\n            isDistLoadCorrect: true,\n        };\n        newConstructionObj.newRodInputRow = {\n            area: \"\",\n            isAreaCorrect: true,\n            length: \"\",\n            isLengthCorrect: true,\n            modulus: \"\",\n            isModulusCorrect: true,\n            sigma: \"\",\n            isSigmaCorrect: true,\n            distLoad: \"\",\n            isDistLoadCorrect: true,\n        };\n        newConstructionObj.newNodeInputRow = {\n            nodeNumber: \"\",\n            isNodeNumberCorrect: true,\n            nodeForce: \"\",\n            isNodeForceCorrect: true,\n        };\n        newConstructionObj.changingNodeIndex = null;\n        newConstructionObj.changingNodeInputRow = {\n            nodeNumber: \"\",\n            isNodeNumberCorrect: true,\n            nodeForce: \"\",\n            isNodeForceCorrect: true,\n        };\n        newConstructionObj.isError = false;\n        newConstructionObj.errorMessage = \"\";\n        newConstructionObj.isReadyForSave = true;\n        newConstructionObj.objWithSolutionFunctions = null;\n        dispatch(setNewConstructionFromFileData(newConstructionObj));\n    };\n    reader.readAsText(inputRef.current.files[0]);\n};\n\nexport const saveSolution = (solutionObj) => ({\n    type: SAVE_SOLUTION,\n    solution: solutionObj,\n});\n\nconst ADD_NEW_ROD = \"ADD_NEW_ROD\";\nconst NEW_ROD_AREA_CHANGED = \"NEW_ROD_AREA_CHANGED\";\nconst NEW_ROD_LENGTH_CHANGED = \"NEW_ROD_LENGTH_CHANGED\";\nconst NEW_ROD_MODULUS_CHANGED = \"NEW_ROD_MODULUS_CHANGED\";\nconst NEW_ROD_SIGMA_CHANGED = \"NEW_ROD_SIGMA_CHANGED\";\nconst NEW_ROD_DISTLOAD_CHANGED = \"NEW_ROD_DISTLOAD_CHANGED\";\n\nexport const clearSolution = () => ({\n    type: CLEAR_SOLUTION,\n});\n\nexport const showCanvas = () => ({\n    type: SHOW_CANVAS\n})\n\n\n\n\nconst REMOVE_ROD_ROW = \"REMOVE_ROD_ROW\";\nconst ADD_NODE_ROW = \"ADD_NODE_ROW\";\nconst NEW_NODE_NUMBER_CHANGED = \"NEW_NODE_NUMBER_CHANGED\";\nconst NEW_NODE_FORCE_CHANGED = \"NEW_NODE_FORCE_CHANGED\";\n\nconst CHANGE_NODE = \"CHANGE_NODE\";\nconst REMOVE_NODE_ROW = \"REMOVE_NODE_ROW\";\n\n\n\n\nconst CHECK_FOR_ERROR = \"CHECK_FOR_ERROR\";\nconst SHOW_CONSTRUCTION_FROM_FILE_ERROR = \"SHOW_CONSTRUCTION_FROM_FILE_ERROR\";\nconst SET_NEW_CONSTRUCTION_FROM_FILE_DATA =\n    \"SET_NEW_CONSTRUCTION_FROM_FILE_DATA\";\n\nconst SAVE_SOLUTION = \"SAVE_SOLUTION\";\nconst CLEAR_SOLUTION = \"CLEAR_SOLUTION\";\n\nconst SHOW_CANVAS = \"SHOW_CANVAS\"\n\nconst initialState = {\n    rodsRows: [],\n    nodesRows: [],\n    changingRodIndex: null,\n    newRodInputRow: {\n        area: \"\",\n        isAreaCorrect: true,\n        length: \"\",\n        isLengthCorrect: true,\n        modulus: \"\",\n        isModulusCorrect: true,\n        sigma: \"\",\n        isSigmaCorrect: true,\n        distLoad: \"\",\n        isDistLoadCorrect: true,\n    },\n    changingRodInputRow: {\n        area: \"\",\n        isAreaCorrect: true,\n        length: \"\",\n        isLengthCorrect: true,\n        modulus: \"\",\n        isModulusCorrect: true,\n        sigma: \"\",\n        isSigmaCorrect: true,\n        distLoad: \"\",\n        isDistLoadCorrect: true,\n    },\n    changingNodeInputRow: {\n        nodeNumber: \"\",\n        isNodeNumberCorrect: true,\n        nodeForce: \"\",\n        isNodeForceCorrect: true,\n    },\n    newNodeInputRow: {\n        nodeNumber: \"\",\n        isNodeNumberCorrect: true,\n        nodeForce: \"\",\n        isNodeForceCorrect: true,\n    },\n    changingNodeIndex: null,\n    leftSupport: {\n        nodeNumber: null,\n        isChecked: false,\n    },\n    rightSupport: {\n        nodeNumber: null,\n        isChecked: false,\n    },\n    isError: false,\n    errorMessage: \"Конструкция не введена\",\n    isReadyForSave: false,\n    objWithSolutionFunctions: null,\n    isCanvasShown: false\n};"]},"metadata":{},"sourceType":"module"}