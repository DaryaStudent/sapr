{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\glush\\\\Desktop\\\\react-sapr-main\\\\src\\\\components\\\\PostProcessor\\\\PostProcessorTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\n\nfunction PostProcessorTable({\n  rodsSigmas,\n  rodsLengths,\n  objWithSolutionFunctions\n}) {\n  _s();\n\n  let [chosenRodForTable, setChosenRodForTable] = useState(1);\n  let [stepForTable, setStepForTable] = useState(0.1);\n  let [isStepForTableCorrect, setIsStepForTableCorrect] = useState(true);\n  let [isTableShown, setIsTableShown] = useState(false);\n  let [tableData, setTableData] = useState([]);\n\n  function fixTail(num, n = 5) {\n    let biasedNumStr = (num + 10 ** (-n - 1)).toFixed(n);\n    return Number(biasedNumStr);\n  }\n\n  function handleShowTableButtonClick() {\n    if (isStepForTableCorrect) {\n      let data = [];\n      let xStartPos = 0;\n      let totalIterations = parseInt(rodsLengths[chosenRodForTable - 1] / Number(stepForTable), 10);\n\n      for (let i = 0; i <= totalIterations; i++) {\n        data.push({\n          x: fixTail(xStartPos),\n          NValue: fixTail(objWithSolutionFunctions.N[chosenRodForTable - 1](fixTail(xStartPos))),\n          UValue: fixTail(objWithSolutionFunctions.U[chosenRodForTable - 1](fixTail(xStartPos))),\n          SValue: fixTail(objWithSolutionFunctions.S[chosenRodForTable - 1](fixTail(xStartPos)))\n        });\n        xStartPos = fixTail(xStartPos + Number(stepForTable));\n      }\n\n      if (totalIterations !== rodsLengths[chosenRodForTable - 1] / Number(stepForTable)) {\n        data.push({\n          x: rodsLengths[chosenRodForTable - 1],\n          UValue: objWithSolutionFunctions.U[chosenRodForTable - 1](fixTail(rodsLengths[chosenRodForTable - 1])),\n          NValue: objWithSolutionFunctions.N[chosenRodForTable - 1](fixTail(rodsLengths[chosenRodForTable - 1])),\n          SValue: objWithSolutionFunctions.S[chosenRodForTable - 1](fixTail(rodsLengths[chosenRodForTable - 1]))\n        });\n      }\n\n      setTableData(data);\n      setIsTableShown(true);\n    }\n  }\n\n  function handleStepForTableChange(e) {\n    let valueStr = e.target.value.replace(\",\", \".\");\n\n    if (Number(valueStr) <= 0 || Number(valueStr) > rodsLengths[chosenRodForTable - 1] || isNaN(valueStr)) {\n      setIsStepForTableCorrect(false);\n    } else {\n      setIsStepForTableCorrect(true);\n    }\n\n    setStepForTable(valueStr);\n  }\n\n  function handleSavingTableData() {\n    if (isTableShown) {\n      let csvArr = [];\n      let rows = [[\"x\", \"N(x)\", \"U(x)\", \"S(x)\"]];\n      tableData.forEach(row => {\n        rows.push([row.x, row.NValue, row.UValue, row.SValue]);\n      });\n      rows.forEach(row => {\n        csvArr.push(row.join(\",\"));\n      });\n      let csvFile = new Blob([csvArr.join(\"\\n\")], {\n        type: \"text/csv\"\n      });\n      let a = document.createElement(\"a\");\n      a.href = URL.createObjectURL(csvFile);\n      a.setAttribute(\"download\", \"values.csv\");\n      document.body.appendChild(a);\n      a.click();\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"post-processor-table\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-processor-table-interface\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"\\u0421\\u0442\\u0435\\u0440\\u0436\\u0435\\u043D\\u044C\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: chosenRodForTable,\n          onChange: e => setChosenRodForTable(Number(e.target.value)),\n          children: rodsLengths.map((rodLength, index) => {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              value: index + 1,\n              children: index + 1\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"\\u0428\\u0430\\u0433:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          className: `step-for-table-input ${isStepForTableCorrect ? null : `error`}`,\n          type: \"number\",\n          value: stepForTable,\n          onChange: handleStepForTableChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleShowTableButtonClick,\n          children: \"\\u041F\\u043E\\u043A\\u0430\\u0437\\u0430\\u0442\\u044C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), isTableShown ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"x\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"N\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"U\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u03C3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: tableData.map((dataRow, index) => {\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: dataRow.x\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: dataRow.NValue\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: dataRow.UValue\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: Math.abs(dataRow.SValue) > rodsSigmas[chosenRodForTable - 1] ? \"out-of-limit\" : null,\n                children: dataRow.SValue\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 41\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 37\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PostProcessorTable, \"6oA9WqJSbfMNKnGVYmPCJGwB1+o=\");\n\n_c = PostProcessorTable;\nexport default PostProcessorTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostProcessorTable\");","map":{"version":3,"sources":["C:/Users/glush/Desktop/react-sapr-main/src/components/PostProcessor/PostProcessorTable.js"],"names":["React","useState","PostProcessorTable","rodsSigmas","rodsLengths","objWithSolutionFunctions","chosenRodForTable","setChosenRodForTable","stepForTable","setStepForTable","isStepForTableCorrect","setIsStepForTableCorrect","isTableShown","setIsTableShown","tableData","setTableData","fixTail","num","n","biasedNumStr","toFixed","Number","handleShowTableButtonClick","data","xStartPos","totalIterations","parseInt","i","push","x","NValue","N","UValue","U","SValue","S","handleStepForTableChange","e","valueStr","target","value","replace","isNaN","handleSavingTableData","csvArr","rows","forEach","row","join","csvFile","Blob","type","a","document","createElement","href","URL","createObjectURL","setAttribute","body","appendChild","click","map","rodLength","index","dataRow","Math","abs"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\n\nfunction PostProcessorTable({ rodsSigmas, rodsLengths, objWithSolutionFunctions}) {\n    let [chosenRodForTable, setChosenRodForTable] = useState(1);\n    let [stepForTable, setStepForTable] = useState(0.1);\n    let [isStepForTableCorrect, setIsStepForTableCorrect] = useState(true);\n    let [isTableShown, setIsTableShown] = useState(false);\n    let [tableData, setTableData] = useState([]);\n\n    function fixTail(num, n = 5) {\n        let biasedNumStr = (num + 10 ** (-n - 1)).toFixed(n);\n        return Number(biasedNumStr);\n    }\n\n    function handleShowTableButtonClick() {\n        if (isStepForTableCorrect) {\n            let data = [];\n            let xStartPos = 0;\n            let totalIterations = parseInt(\n                rodsLengths[chosenRodForTable - 1] / Number(stepForTable),\n                10\n            );\n            for (let i = 0; i <= totalIterations; i++) {\n                data.push({\n                    x: fixTail(xStartPos),\n                    NValue: fixTail(objWithSolutionFunctions.N[chosenRodForTable - 1](\n                        fixTail(xStartPos))\n                    ),\n                    UValue: fixTail(objWithSolutionFunctions.U[chosenRodForTable - 1](\n                        fixTail(xStartPos))\n                    ),\n                    SValue: fixTail(objWithSolutionFunctions.S[chosenRodForTable - 1](\n                        fixTail(xStartPos))\n                    ),\n                });\n                xStartPos = fixTail(xStartPos + Number(stepForTable));\n            }\n            if (\n                totalIterations !==\n                rodsLengths[chosenRodForTable - 1] / Number(stepForTable)\n            ) {\n                data.push({\n                    x: rodsLengths[chosenRodForTable - 1],\n                    UValue: objWithSolutionFunctions.U[chosenRodForTable - 1](\n                        fixTail(rodsLengths[chosenRodForTable - 1])\n                    ),\n                    NValue: objWithSolutionFunctions.N[chosenRodForTable - 1](\n                        fixTail(rodsLengths[chosenRodForTable - 1])\n                    ),\n                    SValue: objWithSolutionFunctions.S[chosenRodForTable - 1](\n                        fixTail(rodsLengths[chosenRodForTable - 1])\n                    ),\n                });\n            }\n            setTableData(data);\n            setIsTableShown(true);\n        }\n    }\n\n    function handleStepForTableChange(e) {\n        let valueStr = e.target.value.replace(\",\", \".\");\n        if (\n            Number(valueStr) <= 0 ||\n            Number(valueStr) > rodsLengths[chosenRodForTable - 1] ||\n            isNaN(valueStr)\n        ) {\n            setIsStepForTableCorrect(false);\n        } else {\n            setIsStepForTableCorrect(true);\n        }\n        setStepForTable(valueStr);\n    }\n\n    function handleSavingTableData() {\n        if (isTableShown) {\n            let csvArr = [];\n            let rows = [[\"x\", \"N(x)\", \"U(x)\", \"S(x)\"]];\n            tableData.forEach((row) => {\n                rows.push([row.x, row.NValue, row.UValue, row.SValue]);\n            });\n            rows.forEach((row) => {\n                csvArr.push(row.join(\",\"));\n            });\n            let csvFile = new Blob([csvArr.join(\"\\n\")], { type: \"text/csv\" });\n            let a = document.createElement(\"a\");\n            a.href = URL.createObjectURL(csvFile);\n            a.setAttribute(\"download\", \"values.csv\");\n            document.body.appendChild(a);\n            a.click();\n        }\n    }\n\n    return (\n        <div className=\"post-processor-table\">\n            <div className=\"post-processor-table-interface\">\n                <div>\n                    Стержень\n                    <select\n                        value={chosenRodForTable}\n                        onChange={(e) =>\n                            setChosenRodForTable(Number(e.target.value))\n                        }>\n                        {rodsLengths.map((rodLength, index) => {\n                            return (\n                                <option key={index} value={index + 1}>{index + 1}</option>\n                            );\n                        })}\n                    </select>\n                </div>\n                <div>\n                    Шаг:\n                    <input\n                        className={`step-for-table-input ${\n                            isStepForTableCorrect ? null : `error`\n                        }`}\n                        type=\"number\"\n                        value={stepForTable}\n                        onChange={handleStepForTableChange}\n                    />\n                </div>\n                <div>\n                    <button onClick={handleShowTableButtonClick}>\n                        Показать\n                    </button>\n                </div>\n            </div>\n            {isTableShown ? (\n                <div>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>x</th>\n                                <th>N</th>\n                                <th>U</th>\n                                <th>σ</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {tableData.map((dataRow, index) => {\n                                return (\n                                    <tr key={index}>\n                                        <td>{dataRow.x}</td>\n                                        <td>{dataRow.NValue}</td>\n                                        <td>{dataRow.UValue}</td>\n                                        <td className={Math.abs(dataRow.SValue) > rodsSigmas[chosenRodForTable - 1]? \"out-of-limit\" : null}>{dataRow.SValue}</td>\n                                    </tr>\n                                );\n                            })}\n                        </tbody>\n                    </table>\n                </div>\n            ) : null}\n        </div>\n    );\n}\n\nexport default PostProcessorTable;\n"]},"metadata":{},"sourceType":"module"}