{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\glush\\\\Desktop\\\\react-sapr-main\\\\src\\\\components\\\\Preprocessor\\\\ConstructionCanvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\n\nfunction ConstructionCanvas(props) {\n  _s();\n\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const centralAxisStart = {\n    x: 400,\n    y: 400\n  };\n  const baseLength = 100;\n  const baseHeight = 35;\n  const arrowLength = 30;\n  const initialLineWidth = 2;\n  const reducedVortexsRows = [];\n\n  for (let i = 0; i < props.data.rodsRows.length + 1; i++) {\n    reducedVortexsRows.push({\n      nodeNumber: i + 1,\n      nodeForce: 0\n    });\n  }\n\n  props.data.nodesRows.forEach(node => {\n    reducedVortexsRows[node.nodeNumber - 1].nodeForce += node.nodeForce;\n  });\n  reducedVortexsRows.forEach(node => {\n    node.nodeForce = Number(node.nodeForce.toFixed(5));\n  });\n  const data = {\n    rodsAndVortexs: {\n      rodsRows: [...props.data.rodsRows],\n      nodesRows: reducedVortexsRows,\n      leftSupport: { ...props.data.leftSupport\n      },\n      rightSupport: { ...props.data.rightSupport\n      }\n    }\n  };\n  const [zoomScale, setZoomScale] = useState(1);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [globalDX, setGlobalDX] = useState(centralAxisStart.x);\n  const [globalDY, setGlobalDY] = useState(centralAxisStart.y);\n  const prevPoint = useRef([0, 0]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = window.innerWidth;\n    canvas.height =\n    /* window.innerHeight - 250; */\n    700;\n    contextRef.current = canvas.getContext(\"2d\");\n    clearCanvas();\n    draw();\n  }, []);\n  useEffect(() => {\n    clearCanvas();\n    draw();\n  });\n\n  const startDrawing = ({\n    nativeEvent\n  }) => {\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    prevPoint.current = [offsetX, offsetY];\n    setIsDrawing(true);\n  };\n\n  const finishDrawing = () => {\n    setIsDrawing(false);\n  };\n\n  const move = ({\n    nativeEvent\n  }) => {\n    if (!isDrawing) {\n      return;\n    }\n\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    const deltaX = offsetX - prevPoint.current[0];\n    const deltaY = offsetY - prevPoint.current[1];\n    prevPoint.current = [offsetX, offsetY];\n    setGlobalDX(prev => prev + deltaX);\n    setGlobalDY(prev => prev + deltaY);\n  };\n\n  function clearCanvas() {\n    contextRef.current.setTransform(1, 0, 0, 1, centralAxisStart.x, centralAxisStart.y);\n    contextRef.current.clearRect(0 - centralAxisStart.x, 0 - centralAxisStart.y, canvasRef.current.width, canvasRef.current.height);\n    contextRef.current.setTransform(zoomScale, 0, 0, zoomScale, globalDX, globalDY);\n  }\n\n  function resetCanvas() {\n    setZoomScale(1);\n    setGlobalDX(centralAxisStart.x);\n    setGlobalDY(centralAxisStart.y);\n  }\n\n  function canvas_distArrow(context, fromx, fromy, tox, toy) {\n    let headlen = 8; // length of head in pixels\n\n    let dx = tox - fromx;\n    let dy = toy - fromy;\n    let angle = Math.atan2(dy, dx);\n    context.beginPath();\n    context.moveTo(fromx, fromy);\n    context.lineTo(tox, toy);\n    context.strokeStyle = \"black\";\n    context.lineTo(tox - headlen * Math.cos(angle - Math.PI / 6), toy - headlen * Math.sin(angle - Math.PI / 6));\n    context.moveTo(tox, toy);\n    context.lineTo(tox - headlen * Math.cos(angle + Math.PI / 6), toy - headlen * Math.sin(angle + Math.PI / 6));\n    context.stroke();\n    context.strokeStyle = \"black\";\n  }\n\n  function canvas_concArrow(ctx, fromx, fromy, tox, toy, tipWidth, tipHeight) {\n    ctx.lineWidth = 5;\n    ctx.beginPath();\n    ctx.moveTo(fromx, fromy);\n    ctx.lineTo(tox, toy);\n    ctx.strokeStyle = \"black\";\n    ctx.stroke();\n\n    if (tox - fromx < 0) {\n      ctx.beginPath();\n      ctx.fillStyle = \"black\";\n      ctx.moveTo(tox + tipWidth, toy - tipHeight / 3);\n      ctx.lineTo(tox + tipWidth, toy + tipHeight / 2);\n      ctx.lineTo(tox - tipWidth, toy);\n      ctx.fill();\n    } else {\n      ctx.beginPath();\n      ctx.moveTo(fromx, fromy);\n      ctx.lineTo(tox, toy);\n      ctx.stroke();\n      ctx.beginPath();\n      ctx.fillStyle = \"black\";\n      ctx.moveTo(tox - tipWidth, toy - tipHeight / 2);\n      ctx.lineTo(tox - tipWidth, toy + tipHeight / 2);\n      ctx.lineTo(tox + tipWidth, toy);\n      ctx.fill();\n    }\n\n    ctx.lineWidth = initialLineWidth;\n    ctx.strokeStyle = \"black\";\n    ctx.fillStyle = \"black\";\n  }\n\n  function drawSupport(ctx, width, height, lineCount, lineDeltaX, lineDeltaY, isRightSupport = false) {\n    if (isRightSupport) {\n      ctx.translate(0, -height / 2);\n      ctx.fillRect(0, 0, width, height);\n      ctx.beginPath();\n      let interval = height / lineCount;\n      let deltaY = 1;\n      ctx.moveTo(width, 0);\n      ctx.lineTo(width + lineDeltaX, lineDeltaY);\n\n      for (let i = 0; i <= lineCount; i++) {\n        ctx.lineTo(width + lineDeltaX, lineDeltaY + deltaY);\n        deltaY += interval;\n        ctx.moveTo(width, deltaY);\n      }\n\n      ctx.stroke();\n      ctx.translate(0, height / 2);\n    } else {\n      ctx.translate(-width, -height / 2);\n      ctx.fillRect(0, 0, width, height);\n      ctx.beginPath();\n      ctx.moveTo(0, 1);\n      let interval = height / lineCount;\n      let deltaY = 1;\n\n      for (let i = 0; i <= lineCount; i++) {\n        ctx.lineTo(-lineDeltaX, -lineDeltaY + deltaY);\n        deltaY += interval;\n        ctx.moveTo(0, deltaY);\n        ctx.stroke();\n      }\n\n      ctx.translate(width, height / 2);\n    }\n  }\n\n  function drawDistLoad(rodLength, distLoad, arrowLength) {\n    if (distLoad !== 0) {\n      if (distLoad > 0) {\n        if (rodLength <= arrowLength) {\n          canvas_distArrow(contextRef.current, 0, 0, rodLength, 0);\n        } else {\n          let currentXPos = 0;\n\n          while (currentXPos + arrowLength < rodLength) {\n            canvas_distArrow(contextRef.current, currentXPos, 0, currentXPos + 10, 0);\n            currentXPos += arrowLength;\n          }\n\n          canvas_distArrow(contextRef.current, currentXPos, 0, rodLength, 0);\n        }\n      } else {\n        if (rodLength <= arrowLength) {\n          canvas_distArrow(contextRef.current, rodLength, 0, 0, 0);\n        } else {\n          let currentXPos = 0;\n\n          while (currentXPos + arrowLength < rodLength) {\n            canvas_distArrow(contextRef.current, currentXPos + 10, 0, currentXPos, 0);\n            currentXPos += arrowLength;\n          }\n\n          canvas_distArrow(contextRef.current, rodLength, 0, currentXPos, 0);\n        }\n      }\n    }\n  }\n\n  function drawConcLoad(index) {\n    if (data.rodsAndVortexs.nodesRows[index].nodeForce !== 0) {\n      if (!(data.rodsAndVortexs.rightSupport.nodeNumber === data.rodsAndVortexs.nodesRows[index].nodeNumber) && data.rodsAndVortexs.nodesRows[index].nodeForce > 0) {\n        canvas_concArrow(contextRef.current, 0, 0, baseLength / 2 - 20, 0, 10, 20);\n      } else if (!(data.rodsAndVortexs.leftSupport.nodeNumber === data.rodsAndVortexs.nodesRows[index].nodeNumber) && data.rodsAndVortexs.nodesRows[index].nodeForce < 0) {\n        canvas_concArrow(contextRef.current, 0, 0, -baseLength / 2 + 5, 0, 10, 20);\n      }\n    }\n  }\n\n  const draw = () => {\n    const ctx = contextRef.current;\n    ctx.lineWidth = initialLineWidth;\n    data.rodsAndVortexs.rodsRows.forEach((rodRow, index) => {\n      if (data.rodsAndVortexs.leftSupport.nodeNumber === index + 1) {\n        drawSupport(ctx, 20, 100, 5, 10, 15);\n      }\n\n      const area = rodRow.area;\n      const length = rodRow.length;\n      const distLoad = rodRow.distLoad;\n      const rodStartX = 0;\n      const rodStartY = -area * baseHeight;\n      const rodLength = length * baseLength;\n      const rodHeight = 2 * area * baseHeight;\n      ctx.lineWidth = 5;\n      ctx.strokeRect(rodStartX, rodStartY, rodLength, rodHeight);\n      ctx.lineWidth = initialLineWidth;\n      drawDistLoad(rodLength, distLoad, arrowLength);\n      drawConcLoad(index);\n      ctx.translate(rodLength, 0);\n\n      if (index === data.rodsAndVortexs.nodesRows.length - 2) {\n        drawConcLoad(index + 1);\n\n        if (data.rodsAndVortexs.rightSupport.nodeNumber === index + 2) {\n          drawSupport(ctx, 20, 100, 5, 10, 15, true);\n        }\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"preprocessor__canvas\",\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      onMouseDown: startDrawing,\n      onMouseUp: finishDrawing,\n      onMouseMove: move\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 326,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ConstructionCanvas, \"IE55tZELgtxbfV6kU8os8QSIa+Y=\");\n\n_c = ConstructionCanvas;\nexport default ConstructionCanvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConstructionCanvas\");","map":{"version":3,"sources":["C:/Users/glush/Desktop/react-sapr-main/src/components/Preprocessor/ConstructionCanvas.js"],"names":["React","useRef","useEffect","useState","ConstructionCanvas","props","canvasRef","contextRef","centralAxisStart","x","y","baseLength","baseHeight","arrowLength","initialLineWidth","reducedVortexsRows","i","data","rodsRows","length","push","nodeNumber","nodeForce","nodesRows","forEach","node","Number","toFixed","rodsAndVortexs","leftSupport","rightSupport","zoomScale","setZoomScale","isDrawing","setIsDrawing","globalDX","setGlobalDX","globalDY","setGlobalDY","prevPoint","canvas","current","width","window","innerWidth","height","getContext","clearCanvas","draw","startDrawing","nativeEvent","offsetX","offsetY","finishDrawing","move","deltaX","deltaY","prev","setTransform","clearRect","resetCanvas","canvas_distArrow","context","fromx","fromy","tox","toy","headlen","dx","dy","angle","Math","atan2","beginPath","moveTo","lineTo","strokeStyle","cos","PI","sin","stroke","canvas_concArrow","ctx","tipWidth","tipHeight","lineWidth","fillStyle","fill","drawSupport","lineCount","lineDeltaX","lineDeltaY","isRightSupport","translate","fillRect","interval","drawDistLoad","rodLength","distLoad","currentXPos","drawConcLoad","index","rodRow","area","rodStartX","rodStartY","rodHeight","strokeRect"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;;AAEA,SAASC,kBAAT,CAA4BC,KAA5B,EAAmC;AAAA;;AAC/B,QAAMC,SAAS,GAAGL,MAAM,CAAC,IAAD,CAAxB;AACA,QAAMM,UAAU,GAAGN,MAAM,CAAC,IAAD,CAAzB;AACA,QAAMO,gBAAgB,GAAG;AAAEC,IAAAA,CAAC,EAAE,GAAL;AAAUC,IAAAA,CAAC,EAAE;AAAb,GAAzB;AACA,QAAMC,UAAU,GAAG,GAAnB;AACA,QAAMC,UAAU,GAAG,EAAnB;AACA,QAAMC,WAAW,GAAG,EAApB;AACA,QAAMC,gBAAgB,GAAG,CAAzB;AAEA,QAAMC,kBAAkB,GAAG,EAA3B;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,KAAK,CAACY,IAAN,CAAWC,QAAX,CAAoBC,MAApB,GAA6B,CAAjD,EAAoDH,CAAC,EAArD,EAAyD;AACrDD,IAAAA,kBAAkB,CAACK,IAAnB,CAAwB;AAAEC,MAAAA,UAAU,EAAEL,CAAC,GAAG,CAAlB;AAAqBM,MAAAA,SAAS,EAAE;AAAhC,KAAxB;AACH;;AACDjB,EAAAA,KAAK,CAACY,IAAN,CAAWM,SAAX,CAAqBC,OAArB,CAA8BC,IAAD,IAAU;AACnCV,IAAAA,kBAAkB,CAACU,IAAI,CAACJ,UAAL,GAAkB,CAAnB,CAAlB,CAAwCC,SAAxC,IAAqDG,IAAI,CAACH,SAA1D;AACH,GAFD;AAIAP,EAAAA,kBAAkB,CAACS,OAAnB,CAA4BC,IAAD,IAAU;AACjCA,IAAAA,IAAI,CAACH,SAAL,GAAiBI,MAAM,CAACD,IAAI,CAACH,SAAL,CAAeK,OAAf,CAAuB,CAAvB,CAAD,CAAvB;AACH,GAFD;AAIA,QAAMV,IAAI,GAAG;AACTW,IAAAA,cAAc,EAAE;AACZV,MAAAA,QAAQ,EAAE,CAAC,GAAGb,KAAK,CAACY,IAAN,CAAWC,QAAf,CADE;AAEZK,MAAAA,SAAS,EAAER,kBAFC;AAGZc,MAAAA,WAAW,EAAE,EAAE,GAAGxB,KAAK,CAACY,IAAN,CAAWY;AAAhB,OAHD;AAIZC,MAAAA,YAAY,EAAE,EAAE,GAAGzB,KAAK,CAACY,IAAN,CAAWa;AAAhB;AAJF;AADP,GAAb;AASA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4B7B,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAAC8B,SAAD,EAAYC,YAAZ,IAA4B/B,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACgC,QAAD,EAAWC,WAAX,IAA0BjC,QAAQ,CAACK,gBAAgB,CAACC,CAAlB,CAAxC;AACA,QAAM,CAAC4B,QAAD,EAAWC,WAAX,IAA0BnC,QAAQ,CAACK,gBAAgB,CAACE,CAAlB,CAAxC;AACA,QAAM6B,SAAS,GAAGtC,MAAM,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,CAAxB;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMsC,MAAM,GAAGlC,SAAS,CAACmC,OAAzB;AACAD,IAAAA,MAAM,CAACE,KAAP,GAAeC,MAAM,CAACC,UAAtB;AACAJ,IAAAA,MAAM,CAACK,MAAP;AAAgB;AAAgC,OAAhD;AACAtC,IAAAA,UAAU,CAACkC,OAAX,GAAqBD,MAAM,CAACM,UAAP,CAAkB,IAAlB,CAArB;AACAC,IAAAA,WAAW;AACXC,IAAAA,IAAI;AACP,GAPQ,EAON,EAPM,CAAT;AASA9C,EAAAA,SAAS,CAAC,MAAM;AACZ6C,IAAAA,WAAW;AACXC,IAAAA,IAAI;AACP,GAHQ,CAAT;;AAKA,QAAMC,YAAY,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAqB;AACtC,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX,QAAuBF,WAA7B;AACAX,IAAAA,SAAS,CAACE,OAAV,GAAoB,CAACU,OAAD,EAAUC,OAAV,CAApB;AACAlB,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,GAJD;;AAMA,QAAMmB,aAAa,GAAG,MAAM;AACxBnB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAFD;;AAIA,QAAMoB,IAAI,GAAG,CAAC;AAAEJ,IAAAA;AAAF,GAAD,KAAqB;AAC9B,QAAI,CAACjB,SAAL,EAAgB;AACZ;AACH;;AACD,UAAM;AAAEkB,MAAAA,OAAF;AAAWC,MAAAA;AAAX,QAAuBF,WAA7B;AACA,UAAMK,MAAM,GAAGJ,OAAO,GAAGZ,SAAS,CAACE,OAAV,CAAkB,CAAlB,CAAzB;AACA,UAAMe,MAAM,GAAGJ,OAAO,GAAGb,SAAS,CAACE,OAAV,CAAkB,CAAlB,CAAzB;AACAF,IAAAA,SAAS,CAACE,OAAV,GAAoB,CAACU,OAAD,EAAUC,OAAV,CAApB;AACAhB,IAAAA,WAAW,CAAEqB,IAAD,IAAUA,IAAI,GAAGF,MAAlB,CAAX;AACAjB,IAAAA,WAAW,CAAEmB,IAAD,IAAUA,IAAI,GAAGD,MAAlB,CAAX;AACH,GAVD;;AAYA,WAAST,WAAT,GAAuB;AACnBxC,IAAAA,UAAU,CAACkC,OAAX,CAAmBiB,YAAnB,CACI,CADJ,EAEI,CAFJ,EAGI,CAHJ,EAII,CAJJ,EAKIlD,gBAAgB,CAACC,CALrB,EAMID,gBAAgB,CAACE,CANrB;AAQAH,IAAAA,UAAU,CAACkC,OAAX,CAAmBkB,SAAnB,CACI,IAAInD,gBAAgB,CAACC,CADzB,EAEI,IAAID,gBAAgB,CAACE,CAFzB,EAGIJ,SAAS,CAACmC,OAAV,CAAkBC,KAHtB,EAIIpC,SAAS,CAACmC,OAAV,CAAkBI,MAJtB;AAMAtC,IAAAA,UAAU,CAACkC,OAAX,CAAmBiB,YAAnB,CACI3B,SADJ,EAEI,CAFJ,EAGI,CAHJ,EAIIA,SAJJ,EAKII,QALJ,EAMIE,QANJ;AAQH;;AAED,WAASuB,WAAT,GAAuB;AACnB5B,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACAI,IAAAA,WAAW,CAAC5B,gBAAgB,CAACC,CAAlB,CAAX;AACA6B,IAAAA,WAAW,CAAC9B,gBAAgB,CAACE,CAAlB,CAAX;AACH;;AAED,WAASmD,gBAAT,CAA0BC,OAA1B,EAAmCC,KAAnC,EAA0CC,KAA1C,EAAiDC,GAAjD,EAAsDC,GAAtD,EAA2D;AACvD,QAAIC,OAAO,GAAG,CAAd,CADuD,CACtC;;AACjB,QAAIC,EAAE,GAAGH,GAAG,GAAGF,KAAf;AACA,QAAIM,EAAE,GAAGH,GAAG,GAAGF,KAAf;AACA,QAAIM,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWH,EAAX,EAAeD,EAAf,CAAZ;AACAN,IAAAA,OAAO,CAACW,SAAR;AACAX,IAAAA,OAAO,CAACY,MAAR,CAAeX,KAAf,EAAsBC,KAAtB;AACAF,IAAAA,OAAO,CAACa,MAAR,CAAeV,GAAf,EAAoBC,GAApB;AACAJ,IAAAA,OAAO,CAACc,WAAR,GAAsB,OAAtB;AACAd,IAAAA,OAAO,CAACa,MAAR,CACIV,GAAG,GAAGE,OAAO,GAAGI,IAAI,CAACM,GAAL,CAASP,KAAK,GAAGC,IAAI,CAACO,EAAL,GAAU,CAA3B,CADpB,EAEIZ,GAAG,GAAGC,OAAO,GAAGI,IAAI,CAACQ,GAAL,CAAST,KAAK,GAAGC,IAAI,CAACO,EAAL,GAAU,CAA3B,CAFpB;AAIAhB,IAAAA,OAAO,CAACY,MAAR,CAAeT,GAAf,EAAoBC,GAApB;AACAJ,IAAAA,OAAO,CAACa,MAAR,CACIV,GAAG,GAAGE,OAAO,GAAGI,IAAI,CAACM,GAAL,CAASP,KAAK,GAAGC,IAAI,CAACO,EAAL,GAAU,CAA3B,CADpB,EAEIZ,GAAG,GAAGC,OAAO,GAAGI,IAAI,CAACQ,GAAL,CAAST,KAAK,GAAGC,IAAI,CAACO,EAAL,GAAU,CAA3B,CAFpB;AAIAhB,IAAAA,OAAO,CAACkB,MAAR;AACAlB,IAAAA,OAAO,CAACc,WAAR,GAAsB,OAAtB;AACH;;AAED,WAASK,gBAAT,CACIC,GADJ,EAEInB,KAFJ,EAGIC,KAHJ,EAIIC,GAJJ,EAKIC,GALJ,EAMIiB,QANJ,EAOIC,SAPJ,EAQE;AACEF,IAAAA,GAAG,CAACG,SAAJ,GAAgB,CAAhB;AACAH,IAAAA,GAAG,CAACT,SAAJ;AACAS,IAAAA,GAAG,CAACR,MAAJ,CAAWX,KAAX,EAAkBC,KAAlB;AACAkB,IAAAA,GAAG,CAACP,MAAJ,CAAWV,GAAX,EAAgBC,GAAhB;AACAgB,IAAAA,GAAG,CAACN,WAAJ,GAAkB,OAAlB;AACAM,IAAAA,GAAG,CAACF,MAAJ;;AACA,QAAIf,GAAG,GAAGF,KAAN,GAAc,CAAlB,EAAqB;AACjBmB,MAAAA,GAAG,CAACT,SAAJ;AACAS,MAAAA,GAAG,CAACI,SAAJ,GAAgB,OAAhB;AACAJ,MAAAA,GAAG,CAACR,MAAJ,CAAWT,GAAG,GAAGkB,QAAjB,EAA2BjB,GAAG,GAAGkB,SAAS,GAAG,CAA7C;AACAF,MAAAA,GAAG,CAACP,MAAJ,CAAWV,GAAG,GAAGkB,QAAjB,EAA2BjB,GAAG,GAAGkB,SAAS,GAAG,CAA7C;AACAF,MAAAA,GAAG,CAACP,MAAJ,CAAWV,GAAG,GAAGkB,QAAjB,EAA2BjB,GAA3B;AACAgB,MAAAA,GAAG,CAACK,IAAJ;AACH,KAPD,MAOO;AACHL,MAAAA,GAAG,CAACT,SAAJ;AACAS,MAAAA,GAAG,CAACR,MAAJ,CAAWX,KAAX,EAAkBC,KAAlB;AACAkB,MAAAA,GAAG,CAACP,MAAJ,CAAWV,GAAX,EAAgBC,GAAhB;AACAgB,MAAAA,GAAG,CAACF,MAAJ;AACAE,MAAAA,GAAG,CAACT,SAAJ;AACAS,MAAAA,GAAG,CAACI,SAAJ,GAAgB,OAAhB;AACAJ,MAAAA,GAAG,CAACR,MAAJ,CAAWT,GAAG,GAAGkB,QAAjB,EAA2BjB,GAAG,GAAGkB,SAAS,GAAG,CAA7C;AACAF,MAAAA,GAAG,CAACP,MAAJ,CAAWV,GAAG,GAAGkB,QAAjB,EAA2BjB,GAAG,GAAGkB,SAAS,GAAG,CAA7C;AACAF,MAAAA,GAAG,CAACP,MAAJ,CAAWV,GAAG,GAAGkB,QAAjB,EAA2BjB,GAA3B;AACAgB,MAAAA,GAAG,CAACK,IAAJ;AACH;;AACDL,IAAAA,GAAG,CAACG,SAAJ,GAAgBvE,gBAAhB;AACAoE,IAAAA,GAAG,CAACN,WAAJ,GAAkB,OAAlB;AACAM,IAAAA,GAAG,CAACI,SAAJ,GAAgB,OAAhB;AACH;;AAED,WAASE,WAAT,CACIN,GADJ,EAEIxC,KAFJ,EAGIG,MAHJ,EAII4C,SAJJ,EAKIC,UALJ,EAMIC,UANJ,EAOIC,cAAc,GAAG,KAPrB,EAQE;AACE,QAAIA,cAAJ,EAAoB;AAChBV,MAAAA,GAAG,CAACW,SAAJ,CAAc,CAAd,EAAiB,CAAChD,MAAD,GAAU,CAA3B;AACAqC,MAAAA,GAAG,CAACY,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmBpD,KAAnB,EAA0BG,MAA1B;AACAqC,MAAAA,GAAG,CAACT,SAAJ;AACA,UAAIsB,QAAQ,GAAGlD,MAAM,GAAG4C,SAAxB;AACA,UAAIjC,MAAM,GAAG,CAAb;AACA0B,MAAAA,GAAG,CAACR,MAAJ,CAAWhC,KAAX,EAAkB,CAAlB;AACAwC,MAAAA,GAAG,CAACP,MAAJ,CAAWjC,KAAK,GAAGgD,UAAnB,EAA+BC,UAA/B;;AACA,WAAK,IAAI3E,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIyE,SAArB,EAAgCzE,CAAC,EAAjC,EAAqC;AACjCkE,QAAAA,GAAG,CAACP,MAAJ,CAAWjC,KAAK,GAAGgD,UAAnB,EAA+BC,UAAU,GAAGnC,MAA5C;AACAA,QAAAA,MAAM,IAAIuC,QAAV;AACAb,QAAAA,GAAG,CAACR,MAAJ,CAAWhC,KAAX,EAAkBc,MAAlB;AACH;;AACD0B,MAAAA,GAAG,CAACF,MAAJ;AACAE,MAAAA,GAAG,CAACW,SAAJ,CAAc,CAAd,EAAiBhD,MAAM,GAAG,CAA1B;AACH,KAfD,MAeO;AACHqC,MAAAA,GAAG,CAACW,SAAJ,CAAc,CAACnD,KAAf,EAAsB,CAACG,MAAD,GAAU,CAAhC;AACAqC,MAAAA,GAAG,CAACY,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmBpD,KAAnB,EAA0BG,MAA1B;AACAqC,MAAAA,GAAG,CAACT,SAAJ;AACAS,MAAAA,GAAG,CAACR,MAAJ,CAAW,CAAX,EAAc,CAAd;AACA,UAAIqB,QAAQ,GAAGlD,MAAM,GAAG4C,SAAxB;AACA,UAAIjC,MAAM,GAAG,CAAb;;AACA,WAAK,IAAIxC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIyE,SAArB,EAAgCzE,CAAC,EAAjC,EAAqC;AACjCkE,QAAAA,GAAG,CAACP,MAAJ,CAAW,CAACe,UAAZ,EAAwB,CAACC,UAAD,GAAcnC,MAAtC;AACAA,QAAAA,MAAM,IAAIuC,QAAV;AACAb,QAAAA,GAAG,CAACR,MAAJ,CAAW,CAAX,EAAclB,MAAd;AACA0B,QAAAA,GAAG,CAACF,MAAJ;AACH;;AACDE,MAAAA,GAAG,CAACW,SAAJ,CAAcnD,KAAd,EAAqBG,MAAM,GAAG,CAA9B;AACH;AACJ;;AAED,WAASmD,YAAT,CAAsBC,SAAtB,EAAiCC,QAAjC,EAA2CrF,WAA3C,EAAwD;AACpD,QAAIqF,QAAQ,KAAK,CAAjB,EAAoB;AAChB,UAAIA,QAAQ,GAAG,CAAf,EAAkB;AACd,YAAID,SAAS,IAAIpF,WAAjB,EAA8B;AAC1BgD,UAAAA,gBAAgB,CAACtD,UAAU,CAACkC,OAAZ,EAAqB,CAArB,EAAwB,CAAxB,EAA2BwD,SAA3B,EAAsC,CAAtC,CAAhB;AACH,SAFD,MAEO;AACH,cAAIE,WAAW,GAAG,CAAlB;;AACA,iBAAOA,WAAW,GAAGtF,WAAd,GAA4BoF,SAAnC,EAA8C;AAC1CpC,YAAAA,gBAAgB,CACZtD,UAAU,CAACkC,OADC,EAEZ0D,WAFY,EAGZ,CAHY,EAIZA,WAAW,GAAG,EAJF,EAKZ,CALY,CAAhB;AAOAA,YAAAA,WAAW,IAAItF,WAAf;AACH;;AACDgD,UAAAA,gBAAgB,CACZtD,UAAU,CAACkC,OADC,EAEZ0D,WAFY,EAGZ,CAHY,EAIZF,SAJY,EAKZ,CALY,CAAhB;AAOH;AACJ,OAvBD,MAuBO;AACH,YAAIA,SAAS,IAAIpF,WAAjB,EAA8B;AAC1BgD,UAAAA,gBAAgB,CAACtD,UAAU,CAACkC,OAAZ,EAAqBwD,SAArB,EAAgC,CAAhC,EAAmC,CAAnC,EAAsC,CAAtC,CAAhB;AACH,SAFD,MAEO;AACH,cAAIE,WAAW,GAAG,CAAlB;;AACA,iBAAOA,WAAW,GAAGtF,WAAd,GAA4BoF,SAAnC,EAA8C;AAC1CpC,YAAAA,gBAAgB,CACZtD,UAAU,CAACkC,OADC,EAEZ0D,WAAW,GAAG,EAFF,EAGZ,CAHY,EAIZA,WAJY,EAKZ,CALY,CAAhB;AAOAA,YAAAA,WAAW,IAAItF,WAAf;AACH;;AACDgD,UAAAA,gBAAgB,CACZtD,UAAU,CAACkC,OADC,EAEZwD,SAFY,EAGZ,CAHY,EAIZE,WAJY,EAKZ,CALY,CAAhB;AAOH;AACJ;AACJ;AACJ;;AACD,WAASC,YAAT,CAAsBC,KAAtB,EAA6B;AACzB,QAAIpF,IAAI,CAACW,cAAL,CAAoBL,SAApB,CAA8B8E,KAA9B,EAAqC/E,SAArC,KAAmD,CAAvD,EAA0D;AACtD,UACI,EACIL,IAAI,CAACW,cAAL,CAAoBE,YAApB,CAAiCT,UAAjC,KACAJ,IAAI,CAACW,cAAL,CAAoBL,SAApB,CAA8B8E,KAA9B,EAAqChF,UAFzC,KAIAJ,IAAI,CAACW,cAAL,CAAoBL,SAApB,CAA8B8E,KAA9B,EAAqC/E,SAArC,GAAiD,CALrD,EAME;AACE2D,QAAAA,gBAAgB,CACZ1E,UAAU,CAACkC,OADC,EAEZ,CAFY,EAGZ,CAHY,EAIZ9B,UAAU,GAAG,CAAb,GAAiB,EAJL,EAKZ,CALY,EAMZ,EANY,EAOZ,EAPY,CAAhB;AASH,OAhBD,MAgBO,IACH,EACIM,IAAI,CAACW,cAAL,CAAoBC,WAApB,CAAgCR,UAAhC,KACAJ,IAAI,CAACW,cAAL,CAAoBL,SAApB,CAA8B8E,KAA9B,EAAqChF,UAFzC,KAIAJ,IAAI,CAACW,cAAL,CAAoBL,SAApB,CAA8B8E,KAA9B,EAAqC/E,SAArC,GAAiD,CAL9C,EAML;AACE2D,QAAAA,gBAAgB,CACZ1E,UAAU,CAACkC,OADC,EAEZ,CAFY,EAGZ,CAHY,EAIZ,CAAC9B,UAAD,GAAc,CAAd,GAAkB,CAJN,EAKZ,CALY,EAMZ,EANY,EAOZ,EAPY,CAAhB;AASH;AACJ;AACJ;;AAED,QAAMqC,IAAI,GAAG,MAAM;AACf,UAAMkC,GAAG,GAAG3E,UAAU,CAACkC,OAAvB;AACAyC,IAAAA,GAAG,CAACG,SAAJ,GAAgBvE,gBAAhB;AACAG,IAAAA,IAAI,CAACW,cAAL,CAAoBV,QAApB,CAA6BM,OAA7B,CAAqC,CAAC8E,MAAD,EAASD,KAAT,KAAmB;AACpD,UAAIpF,IAAI,CAACW,cAAL,CAAoBC,WAApB,CAAgCR,UAAhC,KAA+CgF,KAAK,GAAG,CAA3D,EAA8D;AAC1Db,QAAAA,WAAW,CAACN,GAAD,EAAM,EAAN,EAAU,GAAV,EAAe,CAAf,EAAkB,EAAlB,EAAsB,EAAtB,CAAX;AACH;;AACD,YAAMqB,IAAI,GAAGD,MAAM,CAACC,IAApB;AACA,YAAMpF,MAAM,GAAGmF,MAAM,CAACnF,MAAtB;AACA,YAAM+E,QAAQ,GAAGI,MAAM,CAACJ,QAAxB;AACA,YAAMM,SAAS,GAAG,CAAlB;AACA,YAAMC,SAAS,GAAG,CAACF,IAAD,GAAQ3F,UAA1B;AACA,YAAMqF,SAAS,GAAG9E,MAAM,GAAGR,UAA3B;AACA,YAAM+F,SAAS,GAAG,IAAIH,IAAJ,GAAW3F,UAA7B;AACAsE,MAAAA,GAAG,CAACG,SAAJ,GAAgB,CAAhB;AACAH,MAAAA,GAAG,CAACyB,UAAJ,CAAeH,SAAf,EAA0BC,SAA1B,EAAqCR,SAArC,EAAgDS,SAAhD;AACAxB,MAAAA,GAAG,CAACG,SAAJ,GAAgBvE,gBAAhB;AACAkF,MAAAA,YAAY,CAACC,SAAD,EAAYC,QAAZ,EAAsBrF,WAAtB,CAAZ;AACAuF,MAAAA,YAAY,CAACC,KAAD,CAAZ;AACAnB,MAAAA,GAAG,CAACW,SAAJ,CAAcI,SAAd,EAAyB,CAAzB;;AACA,UAAII,KAAK,KAAKpF,IAAI,CAACW,cAAL,CAAoBL,SAApB,CAA8BJ,MAA9B,GAAuC,CAArD,EAAwD;AACpDiF,QAAAA,YAAY,CAACC,KAAK,GAAG,CAAT,CAAZ;;AACA,YAAIpF,IAAI,CAACW,cAAL,CAAoBE,YAApB,CAAiCT,UAAjC,KAAgDgF,KAAK,GAAG,CAA5D,EAA+D;AAC3Db,UAAAA,WAAW,CAACN,GAAD,EAAM,EAAN,EAAU,GAAV,EAAe,CAAf,EAAkB,EAAlB,EAAsB,EAAtB,EAA0B,IAA1B,CAAX;AACH;AACJ;AACJ,KAvBD;AAwBH,GA3BD;;AA4BA,sBACI;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA,2BAeI;AACI,MAAA,GAAG,EAAE5E,SADT;AAEI,MAAA,WAAW,EAAE2C,YAFjB;AAGI,MAAA,SAAS,EAAEI,aAHf;AAII,MAAA,WAAW,EAAEC;AAJjB;AAAA;AAAA;AAAA;AAAA;AAfJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAwBH;;GA1VQlD,kB;;KAAAA,kB;AA4VT,eAAeA,kBAAf","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\n\nfunction ConstructionCanvas(props) {\n    const canvasRef = useRef(null);\n    const contextRef = useRef(null);\n    const centralAxisStart = { x: 400, y: 400 };\n    const baseLength = 100;\n    const baseHeight = 35;\n    const arrowLength = 30;\n    const initialLineWidth = 2;\n\n    const reducedVortexsRows = [];\n    for (let i = 0; i < props.data.rodsRows.length + 1; i++) {\n        reducedVortexsRows.push({ nodeNumber: i + 1, nodeForce: 0 });\n    }\n    props.data.nodesRows.forEach((node) => {\n        reducedVortexsRows[node.nodeNumber - 1].nodeForce += node.nodeForce;\n    });\n\n    reducedVortexsRows.forEach((node) => {\n        node.nodeForce = Number(node.nodeForce.toFixed(5));\n    });\n\n    const data = {\n        rodsAndVortexs: {\n            rodsRows: [...props.data.rodsRows],\n            nodesRows: reducedVortexsRows,\n            leftSupport: { ...props.data.leftSupport },\n            rightSupport: { ...props.data.rightSupport },\n        },\n    };\n\n    const [zoomScale, setZoomScale] = useState(1);\n    const [isDrawing, setIsDrawing] = useState(false);\n    const [globalDX, setGlobalDX] = useState(centralAxisStart.x);\n    const [globalDY, setGlobalDY] = useState(centralAxisStart.y);\n    const prevPoint = useRef([0, 0]);\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        canvas.width = window.innerWidth;\n        canvas.height = /* window.innerHeight - 250; */ 700;\n        contextRef.current = canvas.getContext(\"2d\");\n        clearCanvas();\n        draw();\n    }, []);\n\n    useEffect(() => {\n        clearCanvas();\n        draw();\n    });\n\n    const startDrawing = ({ nativeEvent }) => {\n        const { offsetX, offsetY } = nativeEvent;\n        prevPoint.current = [offsetX, offsetY];\n        setIsDrawing(true);\n    };\n\n    const finishDrawing = () => {\n        setIsDrawing(false);\n    };\n\n    const move = ({ nativeEvent }) => {\n        if (!isDrawing) {\n            return;\n        }\n        const { offsetX, offsetY } = nativeEvent;\n        const deltaX = offsetX - prevPoint.current[0];\n        const deltaY = offsetY - prevPoint.current[1];\n        prevPoint.current = [offsetX, offsetY];\n        setGlobalDX((prev) => prev + deltaX);\n        setGlobalDY((prev) => prev + deltaY);\n    };\n\n    function clearCanvas() {\n        contextRef.current.setTransform(\n            1,\n            0,\n            0,\n            1,\n            centralAxisStart.x,\n            centralAxisStart.y\n        );\n        contextRef.current.clearRect(\n            0 - centralAxisStart.x,\n            0 - centralAxisStart.y,\n            canvasRef.current.width,\n            canvasRef.current.height\n        );\n        contextRef.current.setTransform(\n            zoomScale,\n            0,\n            0,\n            zoomScale,\n            globalDX,\n            globalDY\n        );\n    }\n\n    function resetCanvas() {\n        setZoomScale(1);\n        setGlobalDX(centralAxisStart.x);\n        setGlobalDY(centralAxisStart.y);\n    }\n\n    function canvas_distArrow(context, fromx, fromy, tox, toy) {\n        let headlen = 8; // length of head in pixels\n        let dx = tox - fromx;\n        let dy = toy - fromy;\n        let angle = Math.atan2(dy, dx);\n        context.beginPath();\n        context.moveTo(fromx, fromy);\n        context.lineTo(tox, toy);\n        context.strokeStyle = \"black\";\n        context.lineTo(\n            tox - headlen * Math.cos(angle - Math.PI / 6),\n            toy - headlen * Math.sin(angle - Math.PI / 6)\n        );\n        context.moveTo(tox, toy);\n        context.lineTo(\n            tox - headlen * Math.cos(angle + Math.PI / 6),\n            toy - headlen * Math.sin(angle + Math.PI / 6)\n        );\n        context.stroke();\n        context.strokeStyle = \"black\";\n    }\n\n    function canvas_concArrow(\n        ctx,\n        fromx,\n        fromy,\n        tox,\n        toy,\n        tipWidth,\n        tipHeight\n    ) {\n        ctx.lineWidth = 5;\n        ctx.beginPath();\n        ctx.moveTo(fromx, fromy);\n        ctx.lineTo(tox, toy);\n        ctx.strokeStyle = \"black\";\n        ctx.stroke();\n        if (tox - fromx < 0) {\n            ctx.beginPath();\n            ctx.fillStyle = \"black\";\n            ctx.moveTo(tox + tipWidth, toy - tipHeight / 3);\n            ctx.lineTo(tox + tipWidth, toy + tipHeight / 2);\n            ctx.lineTo(tox - tipWidth, toy);\n            ctx.fill();\n        } else {\n            ctx.beginPath();\n            ctx.moveTo(fromx, fromy);\n            ctx.lineTo(tox, toy);\n            ctx.stroke();\n            ctx.beginPath();\n            ctx.fillStyle = \"black\";\n            ctx.moveTo(tox - tipWidth, toy - tipHeight / 2);\n            ctx.lineTo(tox - tipWidth, toy + tipHeight / 2);\n            ctx.lineTo(tox + tipWidth, toy);\n            ctx.fill();\n        }\n        ctx.lineWidth = initialLineWidth;\n        ctx.strokeStyle = \"black\";\n        ctx.fillStyle = \"black\";\n    }\n\n    function drawSupport(\n        ctx,\n        width,\n        height,\n        lineCount,\n        lineDeltaX,\n        lineDeltaY,\n        isRightSupport = false\n    ) {\n        if (isRightSupport) {\n            ctx.translate(0, -height / 2);\n            ctx.fillRect(0, 0, width, height);\n            ctx.beginPath();\n            let interval = height / lineCount;\n            let deltaY = 1;\n            ctx.moveTo(width, 0);\n            ctx.lineTo(width + lineDeltaX, lineDeltaY);\n            for (let i = 0; i <= lineCount; i++) {\n                ctx.lineTo(width + lineDeltaX, lineDeltaY + deltaY);\n                deltaY += interval;\n                ctx.moveTo(width, deltaY);\n            }\n            ctx.stroke();\n            ctx.translate(0, height / 2);\n        } else {\n            ctx.translate(-width, -height / 2);\n            ctx.fillRect(0, 0, width, height);\n            ctx.beginPath();\n            ctx.moveTo(0, 1);\n            let interval = height / lineCount;\n            let deltaY = 1;\n            for (let i = 0; i <= lineCount; i++) {\n                ctx.lineTo(-lineDeltaX, -lineDeltaY + deltaY);\n                deltaY += interval;\n                ctx.moveTo(0, deltaY);\n                ctx.stroke();\n            }\n            ctx.translate(width, height / 2);\n        }\n    }\n\n    function drawDistLoad(rodLength, distLoad, arrowLength) {\n        if (distLoad !== 0) {\n            if (distLoad > 0) {\n                if (rodLength <= arrowLength) {\n                    canvas_distArrow(contextRef.current, 0, 0, rodLength, 0);\n                } else {\n                    let currentXPos = 0;\n                    while (currentXPos + arrowLength < rodLength) {\n                        canvas_distArrow(\n                            contextRef.current,\n                            currentXPos,\n                            0,\n                            currentXPos + 10,\n                            0\n                        );\n                        currentXPos += arrowLength;\n                    }\n                    canvas_distArrow(\n                        contextRef.current,\n                        currentXPos,\n                        0,\n                        rodLength,\n                        0\n                    );\n                }\n            } else {\n                if (rodLength <= arrowLength) {\n                    canvas_distArrow(contextRef.current, rodLength, 0, 0, 0);\n                } else {\n                    let currentXPos = 0;\n                    while (currentXPos + arrowLength < rodLength) {\n                        canvas_distArrow(\n                            contextRef.current,\n                            currentXPos + 10,\n                            0,\n                            currentXPos,\n                            0\n                        );\n                        currentXPos += arrowLength;\n                    }\n                    canvas_distArrow(\n                        contextRef.current,\n                        rodLength,\n                        0,\n                        currentXPos,\n                        0\n                    );\n                }\n            }\n        }\n    }\n    function drawConcLoad(index) {\n        if (data.rodsAndVortexs.nodesRows[index].nodeForce !== 0) {\n            if (\n                !(\n                    data.rodsAndVortexs.rightSupport.nodeNumber ===\n                    data.rodsAndVortexs.nodesRows[index].nodeNumber\n                ) &&\n                data.rodsAndVortexs.nodesRows[index].nodeForce > 0\n            ) {\n                canvas_concArrow(\n                    contextRef.current,\n                    0,\n                    0,\n                    baseLength / 2 - 20,\n                    0,\n                    10,\n                    20\n                );\n            } else if (\n                !(\n                    data.rodsAndVortexs.leftSupport.nodeNumber ===\n                    data.rodsAndVortexs.nodesRows[index].nodeNumber\n                ) &&\n                data.rodsAndVortexs.nodesRows[index].nodeForce < 0\n            ) {\n                canvas_concArrow(\n                    contextRef.current,\n                    0,\n                    0,\n                    -baseLength / 2 + 5,\n                    0,\n                    10,\n                    20\n                );\n            }\n        }\n    }\n\n    const draw = () => {\n        const ctx = contextRef.current;\n        ctx.lineWidth = initialLineWidth;\n        data.rodsAndVortexs.rodsRows.forEach((rodRow, index) => {\n            if (data.rodsAndVortexs.leftSupport.nodeNumber === index + 1) {\n                drawSupport(ctx, 20, 100, 5, 10, 15);\n            }\n            const area = rodRow.area;\n            const length = rodRow.length;\n            const distLoad = rodRow.distLoad;\n            const rodStartX = 0;\n            const rodStartY = -area * baseHeight;\n            const rodLength = length * baseLength;\n            const rodHeight = 2 * area * baseHeight;\n            ctx.lineWidth = 5;\n            ctx.strokeRect(rodStartX, rodStartY, rodLength, rodHeight);\n            ctx.lineWidth = initialLineWidth;\n            drawDistLoad(rodLength, distLoad, arrowLength);\n            drawConcLoad(index);\n            ctx.translate(rodLength, 0);\n            if (index === data.rodsAndVortexs.nodesRows.length - 2) {\n                drawConcLoad(index + 1);\n                if (data.rodsAndVortexs.rightSupport.nodeNumber === index + 2) {\n                    drawSupport(ctx, 20, 100, 5, 10, 15, true);\n                }\n            }\n        });\n    };\n    return (\n        <div className=\"preprocessor__canvas\">\n            {/* <div className={props.styles.canvasButtons}>\n                <button\n                    disabled={zoomScale <= 0.25}\n                    onClick={() => setZoomScale((prev) => prev - 0.25)}>\n                    Уменьшить\n                </button>\n                <div>{zoomScale}</div>\n                <button\n                    disabled={zoomScale >= 10}\n                    onClick={() => setZoomScale((prev) => prev + 0.25)}>\n                    Увеличить\n                </button>\n                <button onClick={() => resetCanvas()}>Сброс</button>\n            </div> */}\n            <canvas\n                ref={canvasRef}\n                onMouseDown={startDrawing}\n                onMouseUp={finishDrawing}\n                onMouseMove={move}\n            />\n        </div>\n    );\n}\n\nexport default ConstructionCanvas;\n"]},"metadata":{},"sourceType":"module"}