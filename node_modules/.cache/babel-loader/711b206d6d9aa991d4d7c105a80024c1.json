{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\glush\\\\Desktop\\\\react-sapr-main\\\\src\\\\components\\\\PostProcessor\\\\PostProcessor.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./PostProcessor.scss\";\nimport { VictoryChart, VictoryArea } from \"victory\";\nimport { connect } from \"react-redux\";\nimport { fixTail } from \"./../Processor/calculate\";\nimport PostProcessorTable from \"./PostProcessorTable\";\n\nfunction PostProcessor(props) {\n  _s();\n\n  const [chosenRodForNx, setChosenRodForNx] = useState(1);\n  const [NxInputValue, setNxInputValue] = useState(0);\n  let NxResult = \"\";\n  const [chosenRodForUx, setChosenRodForUx] = useState(1);\n  const [UxInputValue, setUxInputValue] = useState(0);\n  let UxResult = \"\";\n  const [chosenRodForSx, setChosenRodForSx] = useState(1);\n  const [SxInputValue, setSxInputValue] = useState(0);\n  let SxResult = \"\";\n\n  if (!props.objWithSolutionFunctions) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"post-processor error\"\n    }, /*#__PURE__*/React.createElement(\"div\", null, \"\\u041D\\u0435\\u043E\\u0431\\u0445\\u043E\\u0434\\u0438\\u043C\\u043E \\u043F\\u0440\\u043E\\u0432\\u0435\\u0441\\u0442\\u0438 \\u0440\\u0430\\u0441\\u0447\\u0435\\u0442. \\u041F\\u0435\\u0440\\u0435\\u0439\\u0434\\u0438\\u0442\\u0435 \\u0432 \\u043F\\u0440\\u043E\\u0446\\u0435\\u0441\\u0441\\u043E\\u0440.\"));\n  }\n\n  const rodsLengths = props.rodsRows.map(rod => rod.length);\n  const rodsSigmas = props.rodsRows.map(rod => rod.sigma);\n  const NxPlotData = [];\n  let xPosForNxPlot = 0;\n  rodsLengths.forEach((rodLength, index) => {\n    const dotsPerRod = 10;\n    const step = rodLength / dotsPerRod;\n    let currentRodXPos = 0;\n\n    for (let i = 0; i < dotsPerRod; i++) {\n      NxPlotData.push({\n        x: xPosForNxPlot + currentRodXPos,\n        y: fixTail(props.objWithSolutionFunctions.N[index](currentRodXPos)),\n        y0: 0\n      });\n      currentRodXPos += step;\n\n      if (i === dotsPerRod - 1) {\n        NxPlotData.push({\n          x: xPosForNxPlot + currentRodXPos,\n          y: fixTail(props.objWithSolutionFunctions.N[index](currentRodXPos)),\n          y0: 0\n        }); // NxPlotData.push({\n        //     x: xPosForNxPlot + currentRodXPos,\n        //     y: 0,\n        //     y0: 0,\n        // });\n        // NxPlotData.push({\n        //     x: xPosForNxPlot + currentRodXPos,\n        //     y: fixTail(\n        //         props.objWithSolutionFunctions.N[index](currentRodXPos)\n        //     ),\n        //     y0: 0,\n        // });\n      }\n    }\n\n    xPosForNxPlot += rodLength;\n  });\n  console.log(NxPlotData);\n  const UxPlotData = [];\n  let xPosForUxPlot = 0;\n  rodsLengths.forEach((rodLength, index) => {\n    const dotsPerRod = 10;\n    const step = rodLength / dotsPerRod;\n    let currentRodXPos = 0;\n\n    for (let i = 0; i < dotsPerRod; i++) {\n      UxPlotData.push({\n        x: xPosForUxPlot + currentRodXPos,\n        y: fixTail(props.objWithSolutionFunctions.U[index](currentRodXPos)),\n        y0: 0\n      });\n      currentRodXPos += step;\n\n      if (i === dotsPerRod - 1) {\n        UxPlotData.push({\n          x: xPosForUxPlot + currentRodXPos,\n          y: fixTail(props.objWithSolutionFunctions.U[index](currentRodXPos)),\n          y0: 0\n        }); // UxPlotData.push({\n        //     x: xPosForUxPlot + currentRodXPos,\n        //     y: 0,\n        //     y0: 0,\n        // });\n        // UxPlotData.push({\n        //     x: xPosForUxPlot + currentRodXPos,\n        //     y: fixTail(\n        //         props.objWithSolutionFunctions.U[index](currentRodXPos)\n        //     ),\n        //     y0: 0,\n        // });\n      }\n    }\n\n    xPosForUxPlot += rodLength;\n  });\n  const SxPlotData = [];\n  let xPosForSxPlot = 0;\n  rodsLengths.forEach((rodLength, index) => {\n    const dotsPerRod = 10;\n    const step = rodLength / dotsPerRod;\n    let currentRodXPos = 0;\n\n    for (let i = 0; i < dotsPerRod; i++) {\n      SxPlotData.push({\n        x: xPosForSxPlot + currentRodXPos,\n        y: fixTail(props.objWithSolutionFunctions.S[index](currentRodXPos)),\n        y0: 0\n      });\n      currentRodXPos += step;\n\n      if (i === dotsPerRod - 1) {\n        SxPlotData.push({\n          x: xPosForSxPlot + currentRodXPos,\n          y: fixTail(props.objWithSolutionFunctions.S[index](currentRodXPos)),\n          y0: 0\n        }); // SxPlotData.push({\n        //     x: xPosForSxPlot + currentRodXPos,\n        //     y: 0,\n        //     y0: 0,\n        // });\n        // SxPlotData.push({\n        //     x: xPosForSxPlot + currentRodXPos,\n        //     y: fixTail(\n        //         props.objWithSolutionFunctions.S[index](currentRodXPos)\n        //     ),\n        //     y0: 0,\n        // });\n      }\n    }\n\n    xPosForSxPlot += rodLength;\n  });\n\n  if (NxInputValue < 0 || NxInputValue > rodsLengths[chosenRodForNx - 1]) {\n    NxResult = \"Неправильно введен X\";\n  } else {\n    NxResult = props.objWithSolutionFunctions.N[chosenRodForNx - 1](NxInputValue);\n  }\n\n  if (UxInputValue < 0 || UxInputValue > rodsLengths[chosenRodForUx - 1]) {\n    UxResult = \"Неправильно введен X\";\n  } else {\n    UxResult = props.objWithSolutionFunctions.U[chosenRodForUx - 1](UxInputValue);\n  }\n\n  if (SxInputValue < 0 || SxInputValue > rodsLengths[chosenRodForSx - 1]) {\n    SxResult = \"Неправильно введен X\";\n  } else {\n    SxResult = props.objWithSolutionFunctions.S[chosenRodForSx - 1](SxInputValue);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post-processor\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"plots\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"plot\"\n  }, /*#__PURE__*/React.createElement(VictoryChart, null, /*#__PURE__*/React.createElement(VictoryArea, {\n    data: NxPlotData,\n    style: {\n      data: {\n        fill: \"#c43a31\",\n        fillOpacity: 0.7\n      }\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"exact-values\"\n  }, \"N\", /*#__PURE__*/React.createElement(\"select\", {\n    defaultValue: chosenRodForNx,\n    onChange: e => setChosenRodForNx(Number(e.target.value))\n  }, rodsLengths.map((rod, index) => {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: index,\n      value: index + 1\n    }, index + 1);\n  })), \"(\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    value: NxInputValue,\n    onChange: e => setNxInputValue(e.target.value)\n  }), \") =\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    readOnly: true,\n    value: NxResult\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"plot\"\n  }, /*#__PURE__*/React.createElement(VictoryChart, null, /*#__PURE__*/React.createElement(VictoryArea, {\n    data: UxPlotData,\n    style: {\n      data: {\n        fill: \"#c43a31\",\n        fillOpacity: 0.7\n      }\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"exact-values\"\n  }, \"U\", /*#__PURE__*/React.createElement(\"select\", {\n    default: chosenRodForUx,\n    onChange: e => setChosenRodForUx(Number(e.target.value))\n  }, rodsLengths.map((rod, index) => {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: index,\n      value: index + 1\n    }, index + 1);\n  })), \"(\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    value: UxInputValue,\n    onChange: e => setUxInputValue(e.target.value)\n  }), \") =\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    readOnly: true,\n    value: UxResult\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"plot\"\n  }, /*#__PURE__*/React.createElement(VictoryChart, null, /*#__PURE__*/React.createElement(VictoryArea, {\n    data: SxPlotData,\n    style: {\n      data: {\n        fill: \"#c43a31\",\n        fillOpacity: 0.7\n      }\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"exact-values\"\n  }, \"\\u03C3\", /*#__PURE__*/React.createElement(\"select\", {\n    defaultValue: chosenRodForSx,\n    onChange: e => setChosenRodForSx(Number(e.target.value))\n  }, rodsLengths.map((rod, index) => {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: index,\n      value: index + 1\n    }, index + 1);\n  })), \"(\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    value: SxInputValue,\n    onChange: e => setSxInputValue(e.target.value)\n  }), \") =\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    readOnly: true,\n    value: SxResult\n  })))), /*#__PURE__*/React.createElement(PostProcessorTable, {\n    rodsSigmas: rodsSigmas,\n    rodsLengths: rodsLengths,\n    objWithSolutionFunctions: props.objWithSolutionFunctions\n  }));\n}\n\n_s(PostProcessor, \"/emXPBu9XUir1F2pAe0nEfU4cDE=\");\n\n_c = PostProcessor;\n\nconst mapStateToProps = state => {\n  return {\n    isConstructionComputed: state.rodsAndNodes.objWithSolutionFunctions,\n    rodsRows: state.rodsAndNodes.rodsRows,\n    nodesRows: state.rodsAndNodes.nodesRows,\n    leftSupport: state.rodsAndNodes.leftSupport,\n    rightSupport: state.rodsAndNodes.rightSupport,\n    objWithSolutionFunctions: state.rodsAndNodes.objWithSolutionFunctions\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostProcessor);\n\nvar _c;\n\n$RefreshReg$(_c, \"PostProcessor\");","map":{"version":3,"sources":["C:/Users/glush/Desktop/react-sapr-main/src/components/PostProcessor/PostProcessor.js"],"names":["React","useState","VictoryChart","VictoryArea","connect","fixTail","PostProcessorTable","PostProcessor","props","chosenRodForNx","setChosenRodForNx","NxInputValue","setNxInputValue","NxResult","chosenRodForUx","setChosenRodForUx","UxInputValue","setUxInputValue","UxResult","chosenRodForSx","setChosenRodForSx","SxInputValue","setSxInputValue","SxResult","objWithSolutionFunctions","rodsLengths","rodsRows","map","rod","length","rodsSigmas","sigma","NxPlotData","xPosForNxPlot","forEach","rodLength","index","dotsPerRod","step","currentRodXPos","i","push","x","y","N","y0","console","log","UxPlotData","xPosForUxPlot","U","SxPlotData","xPosForSxPlot","S","data","fill","fillOpacity","e","Number","target","value","mapStateToProps","state","isConstructionComputed","rodsAndNodes","nodesRows","leftSupport","rightSupport","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport \"./PostProcessor.scss\";\nimport { VictoryChart, VictoryArea } from \"victory\";\nimport { connect } from \"react-redux\";\nimport { fixTail } from \"./../Processor/calculate\";\nimport PostProcessorTable from \"./PostProcessorTable\";\n\nfunction PostProcessor(props) {\n    const [chosenRodForNx, setChosenRodForNx] = useState(1);\n    const [NxInputValue, setNxInputValue] = useState(0);\n    let NxResult = \"\";\n\n    const [chosenRodForUx, setChosenRodForUx] = useState(1);\n    const [UxInputValue, setUxInputValue] = useState(0);\n    let UxResult = \"\";\n\n    const [chosenRodForSx, setChosenRodForSx] = useState(1);\n    const [SxInputValue, setSxInputValue] = useState(0);\n    let SxResult = \"\";\n\n    if (!props.objWithSolutionFunctions) {\n        return (\n            <div className=\"post-processor error\">\n                <div>Необходимо провести расчет. Перейдите в процессор.</div>\n            </div>\n        );\n    }\n\n    const rodsLengths = props.rodsRows.map((rod) => rod.length);\n    const rodsSigmas = props.rodsRows.map((rod) => rod.sigma);\n    const NxPlotData = [];\n    let xPosForNxPlot = 0;\n    rodsLengths.forEach((rodLength, index) => {\n        const dotsPerRod = 10;\n        const step = rodLength / dotsPerRod;\n        let currentRodXPos = 0;\n        for (let i = 0; i < dotsPerRod; i++) {\n            NxPlotData.push({\n                x: xPosForNxPlot + currentRodXPos,\n                y: fixTail(\n                    props.objWithSolutionFunctions.N[index](currentRodXPos)\n                ),\n                y0: 0,\n            });\n            currentRodXPos += step;\n            if (i === dotsPerRod - 1) {\n                NxPlotData.push({\n                    x: xPosForNxPlot + currentRodXPos,\n                    y: fixTail(\n                        props.objWithSolutionFunctions.N[index](currentRodXPos)\n                    ),\n                    y0: 0,\n                });\n                // NxPlotData.push({\n                //     x: xPosForNxPlot + currentRodXPos,\n                //     y: 0,\n                //     y0: 0,\n                // });\n                // NxPlotData.push({\n                //     x: xPosForNxPlot + currentRodXPos,\n                //     y: fixTail(\n                //         props.objWithSolutionFunctions.N[index](currentRodXPos)\n                //     ),\n                //     y0: 0,\n                // });\n            }\n        }\n        xPosForNxPlot += rodLength;\n    });\n\n    console.log(NxPlotData);\n\n    const UxPlotData = [];\n    let xPosForUxPlot = 0;\n    rodsLengths.forEach((rodLength, index) => {\n        const dotsPerRod = 10;\n        const step = rodLength / dotsPerRod;\n        let currentRodXPos = 0;\n        for (let i = 0; i < dotsPerRod; i++) {\n            UxPlotData.push({\n                x: xPosForUxPlot + currentRodXPos,\n                y: fixTail(\n                    props.objWithSolutionFunctions.U[index](currentRodXPos)\n                ),\n                y0: 0,\n            });\n            currentRodXPos += step;\n            if (i === dotsPerRod - 1) {\n                UxPlotData.push({\n                    x: xPosForUxPlot + currentRodXPos,\n                    y: fixTail(\n                        props.objWithSolutionFunctions.U[index](currentRodXPos)\n                    ),\n                    y0: 0,\n                });\n                // UxPlotData.push({\n                //     x: xPosForUxPlot + currentRodXPos,\n                //     y: 0,\n                //     y0: 0,\n                // });\n                // UxPlotData.push({\n                //     x: xPosForUxPlot + currentRodXPos,\n                //     y: fixTail(\n                //         props.objWithSolutionFunctions.U[index](currentRodXPos)\n                //     ),\n                //     y0: 0,\n                // });\n            }\n        }\n        xPosForUxPlot += rodLength;\n    });\n\n    const SxPlotData = [];\n    let xPosForSxPlot = 0;\n    rodsLengths.forEach((rodLength, index) => {\n        const dotsPerRod = 10;\n        const step = rodLength / dotsPerRod;\n        let currentRodXPos = 0;\n        for (let i = 0; i < dotsPerRod; i++) {\n            SxPlotData.push({\n                x: xPosForSxPlot + currentRodXPos,\n                y: fixTail(\n                    props.objWithSolutionFunctions.S[index](currentRodXPos)\n                ),\n                y0: 0,\n            });\n            currentRodXPos += step;\n            if (i === dotsPerRod - 1) {\n                SxPlotData.push({\n                    x: xPosForSxPlot + currentRodXPos,\n                    y: fixTail(\n                        props.objWithSolutionFunctions.S[index](currentRodXPos)\n                    ),\n                    y0: 0,\n                });\n                // SxPlotData.push({\n                //     x: xPosForSxPlot + currentRodXPos,\n                //     y: 0,\n                //     y0: 0,\n                // });\n                // SxPlotData.push({\n                //     x: xPosForSxPlot + currentRodXPos,\n                //     y: fixTail(\n                //         props.objWithSolutionFunctions.S[index](currentRodXPos)\n                //     ),\n                //     y0: 0,\n                // });\n            }\n        }\n        xPosForSxPlot += rodLength;\n    });\n\n    if (NxInputValue < 0 || NxInputValue > rodsLengths[chosenRodForNx - 1]) {\n        NxResult = \"Неправильно введен X\";\n    } else {\n        NxResult = props.objWithSolutionFunctions.N[chosenRodForNx - 1](\n            NxInputValue\n        );\n    }\n\n    if (UxInputValue < 0 || UxInputValue > rodsLengths[chosenRodForUx - 1]) {\n        UxResult = \"Неправильно введен X\";\n    } else {\n        UxResult = props.objWithSolutionFunctions.U[chosenRodForUx - 1](\n            UxInputValue\n        );\n    }\n\n    if (SxInputValue < 0 || SxInputValue > rodsLengths[chosenRodForSx - 1]) {\n        SxResult = \"Неправильно введен X\";\n    } else {\n        SxResult = props.objWithSolutionFunctions.S[chosenRodForSx - 1](\n            SxInputValue\n        );\n    }\n\n    return (\n        <div className=\"post-processor\">\n            <div className=\"plots\">\n                <div className=\"plot\">\n                    <VictoryChart>\n                        <VictoryArea\n                            data={NxPlotData}\n                            style={{\n                                data: { fill: \"#c43a31\", fillOpacity: 0.7 },\n                            }}\n                        />\n                    </VictoryChart>\n                    <div className=\"exact-values\">\n                        N\n                        <select\n                            defaultValue={chosenRodForNx}\n                            onChange={(e) =>\n                                setChosenRodForNx(Number(e.target.value))\n                            }>\n                            {rodsLengths.map((rod, index) => {\n                                return (\n                                    <option key={index} value={index + 1}>\n                                        {index + 1}\n                                    </option>\n                                );\n                            })}\n                        </select>\n                        (\n                        <input\n                            type=\"number\"\n                            value={NxInputValue}\n                            onChange={(e) => setNxInputValue(e.target.value)}\n                        />\n                        ) =\n                        <input type=\"text\" readOnly value={NxResult} />\n                    </div>\n                </div>\n                <div className=\"plot\">\n                    <VictoryChart >\n                        <VictoryArea\n                            data={UxPlotData}\n                            style={{\n                                data: { fill: \"#c43a31\", fillOpacity: 0.7 },\n                            }}\n                        />\n                    </VictoryChart>\n                    <div className=\"exact-values\">\n                        U\n                        <select\n                            default={chosenRodForUx}\n                            onChange={(e) =>\n                                setChosenRodForUx(Number(e.target.value))\n                            }>\n                            {rodsLengths.map((rod, index) => {\n                                return (\n                                    <option key={index} value={index + 1}>\n                                        {index + 1}\n                                    </option>\n                                );\n                            })}\n                        </select>\n                        (\n                        <input\n                            type=\"number\"\n                            value={UxInputValue}\n                            onChange={(e) => setUxInputValue(e.target.value)}\n                        />\n                        ) =\n                        <input type=\"text\" readOnly value={UxResult} />\n                    </div>\n                </div>\n                <div className=\"plot\">\n                    <VictoryChart>\n                        <VictoryArea\n                            data={SxPlotData}\n                            style={{\n                                data: { fill: \"#c43a31\", fillOpacity: 0.7 },\n                            }}\n                        />\n                    </VictoryChart>\n                    <div className=\"exact-values\">\n                        σ\n                        <select\n                            defaultValue={chosenRodForSx}\n                            onChange={(e) =>\n                                setChosenRodForSx(Number(e.target.value))\n                            }>\n                            {rodsLengths.map((rod, index) => {\n                                return (\n                                    <option key={index} value={index + 1}>\n                                        {index + 1}\n                                    </option>\n                                );\n                            })}\n                        </select>\n                        (\n                        <input\n                            type=\"number\"\n                            value={SxInputValue}\n                            onChange={(e) => setSxInputValue(e.target.value)}\n                        />\n                        ) =\n                        <input type=\"text\" readOnly value={SxResult} />\n                    </div>\n                </div>\n            </div>\n            <PostProcessorTable\n                rodsSigmas={rodsSigmas}\n                rodsLengths={rodsLengths}\n                objWithSolutionFunctions={props.objWithSolutionFunctions}\n            />\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isConstructionComputed: state.rodsAndNodes.objWithSolutionFunctions,\n        rodsRows: state.rodsAndNodes.rodsRows,\n        nodesRows: state.rodsAndNodes.nodesRows,\n        leftSupport: state.rodsAndNodes.leftSupport,\n        rightSupport: state.rodsAndNodes.rightSupport,\n        objWithSolutionFunctions: state.rodsAndNodes.objWithSolutionFunctions,\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostProcessor);\n"]},"metadata":{},"sourceType":"module"}